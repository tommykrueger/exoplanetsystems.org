{"version":3,"file":"public\\javascripts\\app.js","sources":["app/application.js","app/collections/collection.js","app/collections/constellations.js","app/collections/planetsystems.js","app/collections/stars.js","app/initialize.js","app/lib/app.js","app/lib/geometries.js","app/lib/helper/CameraHelper.js","app/lib/helper/CanvasElement.js","app/lib/math.js","app/lib/router.js","app/lib/settings.js","app/lib/shaders.js","app/lib/textures.js","app/lib/utils.js","app/models/constellation.js","app/models/model.js","app/models/particle.js","app/models/planetsystem.js","app/models/solarsystem.js","app/models/star.js","app/views/animation_controls_view.js","app/views/asteroidbelt_view.js","app/views/coordinate_system_view.js","app/views/firmament_view.js","app/views/galaxy_cluster_view.js","app/views/galaxy_skybox_view.js","app/views/galaxy_view.js","app/views/infobox_view.js","app/views/label_view.js","app/views/loader_view.js","app/views/menu_view.js","app/views/particle_stars_view.js","app/views/planet_view.js","app/views/planetsystem_view.js","app/views/popup_view.js","app/views/search_list.js","app/views/spaceobject_view.js","app/views/star_view.js","app/views/stars_view.js","app/views/systems_container_view.js","app/views/templates/about.eco","app/views/templates/animation-controls.eco","app/views/templates/app.eco","app/views/templates/console.eco","app/views/templates/dialog.eco","app/views/templates/help.eco","app/views/templates/infobox.eco","app/views/templates/label.eco","app/views/templates/menu.eco","app/views/templates/planet-info.eco","app/views/templates/planet-not-found.eco","app/views/templates/popup.eco","app/views/templates/search-list.eco","app/views/templates/search.eco","app/views/templates/settings.eco","app/views/templates/star-info.eco","app/views/templates/systems.eco","app/views/templates/tooltip.eco","app/views/templates/tour.eco","app/views/tooltip_view.js","app/views/tour_view.js","app/views/view.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AALA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtjnpJA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnIA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtpbA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhjzhnzhsBA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApIA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbrJA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7UA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/WA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9UA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxxbpEA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtHA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9CA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;;A,CCAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;;A","sourcesContent":["Application = {\n  initialize: function() {\n    var Router = require('lib/router');\n    var Settings = require('lib/settings');\n    var Utils = require('lib/utils');\n\n    // new Settings();\n    // new Utils();\n\n    this.router = new Router();\n    // this.loaderView = new Loader();\n\n    if (typeof Object.freeze === 'function') \n      Object.freeze(this);\n  }\n}\n\nmodule.exports = Application;\n","var application = require('application');\n\nmodule.exports = Backbone.Collection.extend({\n  \n});\n","var Constellation = require('../models/constellation');\r\nvar Collection = require('./collection');\r\n\r\nmodule.exports = Collection.extend({\r\n  model: Constellation,\r\n  url: 'data/constellations.json',\r\n\r\n  initialize: function() {\r\n    this.name = 'Constellation';\r\n    this.data = [];\r\n\r\n    _.bindAll(this, 'update');\r\n  },\r\n\r\n  update: function( node ) {\r\n  \tconsole.log( this );\r\n  }\r\n\r\n});","var Planetsystem = require('../models/planetsystem');\r\nvar Collection = require('./collection');\r\n\r\nmodule.exports = Collection.extend({\r\n  model: Planetsystem,\r\n  url: 'data/planetsystems.json?time=' + Math.random(),\r\n\r\n  initialize: function() {\r\n    this.name = 'Planetsystem';\r\n    this.data = [];\r\n\r\n    _.bindAll(this, 'remove', 'update');\r\n  },\r\n\r\n  remove: function( node ) {\r\n  \t//this.data.push( node );\r\n  },\r\n\r\n  update: function( node ) {\r\n  \tconsole.log( this );\r\n  }\r\n\r\n});","var Star = require('../models/star');\r\nvar Collection = require('./collection');\r\n\r\nmodule.exports = Collection.extend({\r\n  model: Star,\r\n  url: 'data/stars.json?time=' + Math.random(),\r\n\r\n  initialize: function() {\r\n    this.name = 'Stars';\r\n  }\r\n});","var Application = require('application');\n\n$(function() {\n  Application.initialize();\n  Backbone.history.start();\n});\n","\r\nvar Textures = require('lib/textures');\r\nvar Geometries = require('lib/geometries');\r\n\r\n// models\r\nvar Solarsystem = require('models/solarsystem');\r\n\r\n// views\r\nvar FirmamentView = require('views/firmament_view');\r\nvar GalaxyClusterView = require('views/galaxy_cluster_view');\r\nvar GalaxyView = require('views/galaxy_view');\r\nvar PlanetSystemView = require('views/planetsystem_view');\r\nvar ParticleStarsView = require('views/particle_stars_view');\r\nvar StarsView = require('views/stars_view');\r\nvar TourView = require('views/tour_view');\r\n\r\nvar CoordinateSystemView = require('views/coordinate_system_view');\r\nvar GalaxySkyboxView = require('views/galaxy_skybox_view');\r\n\r\n// helpers \r\nvar CameraHelper = require('lib/helper/CameraHelper');\r\nvar CanvasElement = require('lib/helper/CanvasElement');\r\n\r\n// Base class for all models.\r\nmodule.exports = Backbone.Model.extend({\r\n\r\n  initialize: function(options) {\r\n  \tvar self = this;\r\n\r\n  \tthis.stars = options.stars;\r\n  \tthis.planetsystems = options.planetsystems;\r\n  \tthis.constellations = options.constellations;\r\n  \tthis.shaders = options.shaders;\r\n\r\n  \tthis.config = {\r\n  \t\tloadAdditionalSystem: true,\r\n  \t\tdistance: {\r\n  \t\t\ttype: 'LY',\r\n  \t\t\tvalue: 1000\r\n  \t\t},\r\n  \t\tcamera: {\r\n  \t\t\tview: '3d'\r\n  \t\t},\r\n  \t\tsettings: {\r\n  \t\t\tsolarsystem: true,\r\n        stars: true,\r\n        galaxy: true,\r\n\r\n        logo: true,\r\n        stats: true,\r\n        tour: true,\r\n\r\n        inclination: true,\r\n        habitable_zone: false,\r\n        unconfirmed: true,\r\n        individial_orbit_colors: false\r\n  \t\t}\r\n  \t};\r\n\r\n  \tthis.config = $.extend({}, this.config, options.config);\r\n\r\n   \tthis.scene;\r\n\t\tthis.renderer;\r\n\t\tthis.camera; \r\n\t\tthis.cameraControls;\r\n\t\tthis.controls;\r\n\t\tthis.projector;\r\n\t\tthis.trackingOrbit = null;\r\n\t\tthis.cameraTarget = new THREE.Vector3(0,0,0);\r\n\r\n\t\tthis.meshes = [];\r\n\t\tthis.materials = [];\r\n\t\tthis.systems = [];\r\n\t\tthis.orbits = [];\r\n\t\tthis.labels = [];\r\n\t\tthis.stars = [];\r\n\t\tthis.loadedStars = [];\r\n\t\tthis.particleSystems = [];\r\n\t\tthis.particleStars = null;\r\n\t\tthis.starLines = [];\r\n\t\tthis.markers = [];\r\n\t\tthis.currentStar = {};\r\n\r\n\t\tthis.galaxy = null;\r\n\t\tthis.tour = null;\r\n\t\tthis.bulge = null;\r\n\t\tthis.bulgeLight = null;\r\n\t\tthis.galaxyParticles = [];\r\n\r\n\t\tthis.known_stars = null;\r\n\t\tthis.habitableStarLabels = [];\r\n\r\n\t\tthis.uniforms;\r\n\t\tthis.attributes;\r\n\r\n\t\t// holds current camera position\r\n\t\t// can be used to determine camera position changes\r\n\t\tthis.cameraPosition = 0;\r\n\t\tthis.cameraPositionOld = 0;\r\n\r\n\t\tthis.cameraHelper = null;\r\n\t\tthis.galaxySkybox = null;\r\n\r\n\t\tthis.habitableZones = [];\r\n\t\tthis.gridPlane;\r\n\r\n\t\tthis.starLinesRendered = false;\r\n\r\n\t\tthis.distanceObjects = {\r\n\t\t\t'au': [],\r\n\t\t\t'lightyears': []\r\n\t\t};\r\n\r\n\t\t// amount of loops to quit certain code part\r\n\t\tthis.allowedRenderLoops = 10;\r\n\t\tthis.currentRenderLoops = 0;\r\n\r\n\t\t// used for changing simulation speed\r\n\t\tthis.time = Date.now();\r\n\t\tthis.simTime = this.time;\r\n\t\tthis.simTimeSecs = null;\r\n\r\n\t\tthis.defaultSpeed = 100;\r\n\r\n\t\tthis.startTime = _.now();\r\n\r\n\t\t// current speed (1 earth day represents 365/100 seconds in app)\t\r\n\t\tthis.currentSpeed = 100;\r\n\t\tthis.speedStep = 100;\r\n\r\n\t\tthis.date = new Date( this.simTime );\r\n\t\tthis.timeElapsedSinceCameraMove = 0;\r\n\t\tthis.timeElapsed = 0;\r\n\r\n\t\tthis.interestingSystems = [\r\n\t\t\t'gj 667c.json',\r\n\t\t\t'kepler-62.json',\r\n\t\t\t'kepler-90.json'\r\n\t\t];\r\n\r\n\t\t// the current distance from the center in light years (from vector(0,0,0))\r\n\t\tthis.currentDistanceLY = 0;\r\n\r\n\t\tif( Detector.webgl ){\r\n\r\n\t\t\tthis.renderer = new THREE.WebGLRenderer({\r\n\t\t\t\tantialias: true,\r\n\t\t\t\talpha: true,\r\n\r\n\t\t\t\t// to allow screenshot\r\n\t\t\t\tpreserveDrawingBuffer: true\t\r\n\t\t\t});\r\n\r\n\t\t\tthis.renderer.setClearColor( 0x000000, 1 );\r\n\t\t} else {\r\n\r\n\t\t\tvar message = new Message('no-webgl', 'warning');\r\n\t\t\t\t\tmessage.render();\r\n\r\n\t\t\treturn;\r\n\r\n\t\t\t//console.log( Detector.addGetWebGLMessage() );\r\n\t\t\t//this.renderer = new THREE.CanvasRenderer();\r\n\r\n\t\t\t//alert( Detector.addGetWebGLMessage() );\r\n\t\t\t//return;\r\n\t\t}\r\n\r\n\t\tthis.renderer.setSize( window.innerWidth, window.innerHeight );\r\n\t\tthis.renderer.shadowMapEnabled = true;\r\n\r\n\t\tthis.container = document.getElementById('container');\r\n\t\tthis.container.appendChild(this.renderer.domElement);\r\n\r\n\t\t// window.utils.renderStats();\r\n\r\n\t\t// create a scene\r\n\t\tthis.scene = new THREE.Scene();\r\n\t\tthis.textures = new Textures();\r\n\t\tthis.initCamera();\r\n\t\tthis.initLighting();\r\n\r\n\t\t// allow 'p' to make screenshot\r\n\t\t// THREEx.Screenshot.bindKey(this.renderer);\r\n\t\t\t\r\n\t\t// allow 'f' to go fullscreen where this feature is supported\r\n\t\t//if( THREEx.FullScreen.available() ){\r\n\t\t\t//THREEx.FullScreen.bindKey();\r\n\t\t//}\r\n\r\n\t  this.projector = new THREE.Projector();\r\n\r\n\t  // add event listeners\r\n\t  //document.addEventListener( 'mousedown', this.onDocumentMouseDown.bind(this), false );\r\n\t  document.addEventListener( 'mousemove', this.onDocumentMouseMove.bind(this), false );\r\n\t  document.addEventListener( 'mouseover', this.onDocumentMouseMove.bind(this), false );\r\n\r\n\t  this.addSolarSystem();\r\n\r\n\t  _.defer(function(){\r\n\r\n\t  \tif (self.config.settings.galaxy)\r\n\t  \t\tself.galaxy = new GalaxyView({ app: self });\r\n\r\n\t  \tif (self.config.settings.tour)\r\n\t  \t\tself.tour = new TourView({ app: self });\r\n\r\n\t  \tself.coordinateSystem = new CoordinateSystemView({ app: self });\r\n\t  \tself.cameraHelper = new CameraHelper({ app: self });\r\n\t  });\r\n\r\n\t  setTimeout(function(){\r\n\r\n\t  \t// render all stars that have at least one planet nad make them markable\r\n\t  \tif (self.config.settings.stars)\r\n\t  \t\tself.renderStars();\r\n\r\n\t  \t// self.renderKnownStars();\r\n\t  \t// self.galaxyCluster = new GalaxyClusterView({ app: self });\r\n\t  \t// self.firmament = new FirmamentView({ app: self });\r\n\t  \t// self.galaxySkybox = new GalaxySkyboxView({ app: self });\r\n\r\n\t  }, 100);\r\n\r\n\t  /*\r\n\t  setTimeout(function(){\r\n\t  \t// render Orion stars\r\n\t  \tvar orionStars = [\r\n\t  \t\t{\t\r\n\t  \t\t\t\"name\": \"Beteigeuze\",\r\n\t  \t\t\t\"ra\": 9.04,\r\n\t  \t\t\t\"dec\": 5.72,\r\n\t  \t\t\t\"dist\": 200\r\n\t  \t\t},\r\n\t  \t\t{\t\r\n\t  \t\t\t\"name\": \"Rigel\",\r\n\t  \t\t\t\"ra\": 3.51,\r\n\t  \t\t\t\"dec\": 2.64,\r\n\t  \t\t\t\"dist\": 773\r\n\t  \t\t},\r\n\t  \t\t{\t\r\n\t  \t\t\t\"name\": \"Saiph\",\r\n\t  \t\t\t\"ra\": 1.50,\r\n\t  \t\t\t\"dec\": 1.14,\r\n\t  \t\t\t\"dist\": 721\r\n\t  \t\t},\r\n\t  \t\t{\t\r\n\t  \t\t\t\"name\": \"Bellatrix\",\r\n\t  \t\t\t\"ra\": 4.41,\r\n\t  \t\t\t\"dec\": 3.07,\r\n\t  \t\t\t\"dist\": 243\r\n\t  \t\t},\r\n\t  \t\t{\t\r\n\t  \t\t\t\"name\": \"Mintaka\",\r\n\t  \t\t\t\"ra\": 4.92,\r\n\t  \t\t\t\"dec\": 2.38,\r\n\t  \t\t\t\"dist\": 916\r\n\t  \t\t},\r\n\t  \t\t{\t\r\n\t  \t\t\t\"name\": \"Alnitak\",\r\n\t  \t\t\t\"ra\": 5.19,\r\n\t  \t\t\t\"dec\": 2.29,\r\n\t  \t\t\t\"dist\": 817\r\n\t  \t\t},\r\n\t  \t\t{\t\r\n\t  \t\t\t\"name\": \"Alnilam\",\r\n\t  \t\t\t\"ra\": 3.69,\r\n\t  \t\t\t\"dec\": 1.67,\r\n\t  \t\t\t\"dist\": 1342\r\n\t  \t\t}\r\n\t  \t];\r\n\r\n\r\n\t  \t_.each(orionStars, function(star){\r\n\t  \t\tconsole.log(star);\r\n\r\n\t  \t\tvar distance = star.dist * window.settings.PC * window.settings.LY / window.settings.distancePixelRatio;\r\n\r\n\t  \t\t//star.ra = star.ra * Math.PI / 180.0;\r\n\t      //star.dec = star.dec * Math.PI / 180.0;\r\n\r\n\t      var x = distance * Math.cos( (star.ra*15) ) * Math.cos( star.dec );\r\n\t      var y = distance * Math.sin( (star.ra*15) ) * Math.cos( star.dec );\r\n\t      var z = distance * Math.sin( star.dec );\r\n\r\n\t      var geometry = new THREE.SphereGeometry( 1000000, 32, 32 );\r\n\t\t\t\tvar material = new THREE.MeshLambertMaterial({ \r\n\t\t\t\t\tcolor: 0xffffff\r\n\t\t\t\t});\r\n\r\n\t\t\t\tconsole.log(x,y,z);\r\n\r\n\t      var starObj = new THREE.Mesh(geometry, material);\r\n\t      \t\tstarObj.position.set(\r\n\t      \t\t\tx / window.settings.distancePixelRatio, \r\n\t      \t\t\ty / window.settings.distancePixelRatio, \r\n\t      \t\t\tz / window.settings.distancePixelRatio\r\n\t      \t\t);\r\n\r\n\t      self.scene.add(starObj);\r\n\r\n\t  \t});\r\n\r\n\t  }, 1000);\r\n\t\t*/\r\n\r\n\t  // render on the basis of 10 (10AU, 100AU, 1000AU, etc.)\r\n\t  // this.renderDistanceCircles(5, 'au');\r\n\t\t// this.renderDistanceCircles(5, 'lightyears');\r\n\r\n\t\tthis.cameraPosition = new THREE.Vector3();\r\n\t\tthis.cameraPosition = this.cameraPosition.getPositionFromMatrix( this.camera.matrixWorld );\r\n\t\tthis.cameraPositionOld = this.cameraPosition;\r\n\r\n\t\tthis.canvasElement = new CanvasElement({ \r\n\t\t\tapp: self, \r\n\t\t\ttype: 'star' \r\n\t\t});\r\n\r\n\t\tif (this.config.settings.stats)\r\n\t\t\twindow.utils.renderStats();\r\n\r\n\t\tthis.animate();\r\n\r\n\t\t_.bindAll(this, 'moveCamera', 'initCamera', 'initLighting', 'loadSystem');\r\n\r\n\t\treturn this;\r\n  },\r\n\r\n  initCamera: function(target){\r\n  \tvar self = this;\r\n\r\n  \tif (target)\r\n  \t\tself.cameraTarget = target;\r\n\r\n  \t// put a camera in the scene\r\n\t\tthis.camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, window.settings.LY );\r\n\t\tthis.camera.useQuaternion = true;\r\n\r\n\t\tif (self.config.camera.view == '3d') {\r\n\t\t\tthis.camera.position.set(\r\n\t\t\t\twindow.utils.makeDistance( self.config.distance.value, self.config.distance.type ),\r\n\t\t\t\twindow.utils.makeDistance( self.config.distance.value, self.config.distance.type ),\r\n\t\t\t\twindow.utils.makeDistance( self.config.distance.value, self.config.distance.type )\r\n\t\t\t);\r\n\t\t} else {\r\n\r\n\t\t\t// show the planet system from 'top'\r\n\t\t\tthis.camera.position.set(\r\n\t\t\t\t0,\r\n\t\t\t\twindow.utils.makeDistance( self.config.distance.value, self.config.distance.type ),\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\tthis.scene.add(this.camera);\r\n\t\tthis.controls = new THREE.TrackballControls( this.camera, this.container );\r\n\r\n\t\tif (target !== undefined || target != null) {\r\n\t\t\tconsole.log('defining new camera target', target);\r\n\t\t\tthis.camera.position.set(\r\n\t\t\t\ttarget.x + window.settings.camera.planetDistance,\r\n\t\t\t\ttarget.y + window.settings.camera.planetDistance,\r\n\t\t\t\ttarget.z + window.settings.camera.planetDistance\r\n\t\t\t);\r\n\r\n\t\t\tthis.controls.target = target;\r\n\t\t\tthis.camera.lookAt(target);\r\n\t\t} else {\r\n\t\t\tvar vector = new THREE.Vector3(0,0,0);\r\n\t\t\tthis.controls.target = vector;\r\n\t\t\tthis.camera.lookAt(vector);\r\n\t\t}\r\n\r\n\t  this.controls.rotateSpeed = 1.0;\r\n\t  this.controls.zoomSpeed = 1.2;\r\n\t  this.controls.panSpeed = 0.8;\r\n\r\n\t  //this.controls.noZoom = false;\r\n\t  //this.controls.noPan = false;\r\n\r\n\t  this.controls.staticMoving = true;\r\n\t  this.controls.dynamicDampingFactor = 0.3;\r\n\r\n\t  //this.controls.keys = [ 65, 83, 68 ];\r\n\t  this.controls.addEventListener( 'change', this.render.bind(this) );\r\n\r\n\t\t// transparently support window resize\r\n\t\tTHREEx.WindowResize.bind(this.renderer, this.camera);\r\n  },\r\n\r\n  initLighting: function() {\r\n\r\n  \t// create a point light\r\n\t  this.pointLight = new THREE.PointLight(0xFFFFFF, 1);\r\n\t  this.pointLight.position.set(0, 0, 0);\r\n\t  this.scene.add( this.pointLight );\r\n\r\n\t  // add a very light ambient light\r\n\t  var globalLight = new THREE.AmbientLight(0xccffcc);\r\n\t  globalLight.color.setRGB( \r\n\t  \twindow.settings.globalLightIntensity,\r\n\t  \twindow.settings.globalLightIntensity,\r\n\t  \twindow.settings.globalLightIntensity\r\n\t  );\r\n\r\n\t  this.scene.add( globalLight );\r\n  },\r\n\r\n  animate: function ( step ){\r\n  \tthis.timeElapsed = step;\r\n\r\n    // loop on request animation loop\r\n\t\t// - it has to be at the begining of the function\r\n\t\t// - see details at http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\r\n\t\trequestAnimationFrame( this.animate.bind( this ) );\r\n\t\tthis.controls.update();\r\n\r\n\t\tif (this.systems.length > 0) {\r\n\t\t\t_.each( this.systems, function( system, index ){\r\n\t\t\t\tsystem.group.traverse(function(child) { \r\n\t\t\t    if (child.animate)\r\n\t\t\t\t\t\tchild.animate();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t  }\r\n\r\n\t  // set the time\r\n\t  this.lastTime = this.time;\r\n\t  this.time = Date.now();\r\n\t  this.dt = this.time - this.lastTime;\r\n\t  this.simTime += this.dt * this.currentSpeed;\r\n\t  this.date = new Date(this.simTime);\r\n\t  this.simTimeSecs = this.simTime;\r\n\r\n\t\t// do the render\r\n\t\tthis.render();\r\n\r\n\t\t// update stats\r\n\t\tif (this.config.settings.stats)\r\n\t\t\twindow.utils.stats.update();\r\n  },\r\n\r\n  render: function(){\r\n\t\tvar self = this;\r\n\r\n\t\t// this.renderCount++;\r\n\t\tvar now = _.now();\r\n\t\tvar currentDate = new Date(now - this.startTime);\r\n\t\tvar secondsElapsed = currentDate.getSeconds();\r\n\t\tvar minutesElapsed = currentDate.getMinutes();\r\n\t\t// console.log('time since app start', minutesElapsed + 'm ' + secondsElapsed + 's');\r\n\r\n\t\tthis.currentRenderLoops++;\r\n\r\n\t\t// calculate current distance from solar center\r\n\t\tthis.cameraPosition = new THREE.Vector3();\r\n\t\tthis.cameraPosition = this.cameraPosition.getPositionFromMatrix( this.camera.matrixWorld );\r\n\r\n\t\t// distance in px\r\n\t\tthis.distanceCamera = this.cameraPosition.distanceTo( self.cameraTarget );\r\n\t\tvar distanceSolarCenter = this.distanceCamera * window.settings.distancePixelRatio;\r\n\r\n\t\tvar distanceAU = parseFloat(distanceSolarCenter / window.settings.AU).toFixed(2);\r\n\t\tvar distanceLY = parseFloat(distanceSolarCenter / window.settings.LY).toFixed(2);\r\n\t\tvar distancePC = parseFloat(distanceLY / window.settings.PC).toFixed(2);\r\n\r\n\t\tthis.currentDistanceLY = distanceLY;\r\n\r\n\t\tdistanceSolarCenter = window.utils.numberFormat( this.distanceCamera * window.settings.distancePixelRatio );\r\n\r\n\t\t$('#distance-km').text( distanceSolarCenter );\r\n\t\t$('#distance-au').text( distanceAU );\r\n\t\t$('#distance-ly').text( distanceLY );\r\n\t\t$('#distance-pc').text( distancePC );\r\n\r\n\r\n\t\t// check if camera position changed and recalculate star sizes\r\n\t\tif (this.cameraPosition.y != this.cameraPositionOld.y) {\r\n\t\t\tthis.cameraPositionOld = this.cameraPosition;\r\n\t\t\tthis.timeElapsedSinceCameraMove = now;\r\n\r\n\t\t\t// clearTimeout(self.timer);\r\n\t\t\t//self.timer = setTimeout(function(){\r\n\t\t\t\tif (self.known_stars)\r\n\t\t\t\t\tself.known_stars.updateStarLabels();\r\n\t\t\t//}, 0);\r\n\r\n\t\t\tif (self.particleStars)\r\n\t\t\t\tself.particleStars.update();\r\n\r\n\t\t\tif (self.galaxySkybox)\r\n\t\t\t\tself.galaxySkybox.update();\r\n\t\t}\r\n\r\n\t\t// Move the camera in a circle with the pivot point in the center of this circle...\r\n\t  // ...so that the pivot point, and focus of the camera is on the center of the scene.\r\n\t  if ((now - this.timeElapsedSinceCameraMove) > 30000 && window.settings.camera.animate) {\r\n\t  \tif (this.cameraHelper)\r\n\t\t\t\tthis.cameraHelper.autoRotation();\r\n\t  }\r\n\r\n\t\tif (this.coordinateSystem)\r\n\t\t\tthis.coordinateSystem.update();\r\n\r\n\t\tif (this.cameraHelper)\r\n\t\t\tthis.cameraHelper.update();\r\n\r\n\t\tif (this.tour)\r\n\t\t\tthis.tour.update();\r\n\r\n\t\t// show or hide the related distance rings\r\n\t\t_.each( this.distanceObjects, function( objects, type ){\r\n\r\n\t\t\tif( type == 'au' ) {\r\n\t\t\t\t_.each( objects, function( object, idx ){\r\n\t\t\t\t\tif( object.properties.distanceScale <= distanceAU && window.settings.showDistances )\r\n\t\t\t\t\t\tobject.visible = true;\r\n\r\n\t\t\t\t\telse if( object.properties.distanceScale )\r\n\t\t\t\t\t\tobject.visible = false;\t\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif( type == 'lightyears') {\r\n\t\t\t\t_.each( objects, function( object, idx ){\r\n\t\t\t\t\tif( object.properties.distanceScale <= distanceLY && window.settings.showDistances )\r\n\t\t\t\t\t\tobject.visible = true;\r\n\r\n\t\t\t\t\telse if( object.properties.distanceScale )\r\n\t\t\t\t\t\tobject.visible = false;\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\r\n\t\tif (distanceLY >= 100000) {\r\n\t\t\tif (this.firmament)\r\n\t\t\t\tthis.firmament.show();\r\n\t\t}\r\n\r\n\t\tif (distanceLY < 100000) {\r\n\t\t\tif (this.firmament)\r\n\t\t\t\tthis.firmament.hide();\r\n\t\t}\r\n\r\n\r\n\t\tif (distanceLY >= 10000) {\r\n\t\t\tif (this.galaxyCluster)\r\n\t\t\t\tthis.galaxyCluster.show();\r\n\t\t}\r\n\r\n\t\tif (distanceLY < 10000) {\r\n\t\t\tif (this.galaxyCluster)\r\n\t\t\t\tthis.galaxyCluster.hide();\r\n\t\t}\r\n\r\n\r\n\t\tif (distanceLY >= 0.1) {\r\n\t\t\t$('#labels').hide();\r\n\t\t\t$('#star-labels').hide();\r\n\t\t}\r\n\t\tif (distanceLY < 0.1) {\r\n\t\t\t$('#labels').show();\r\n\t\t\t$('#star-labels').show();\r\n\t\t}\r\n\r\n\r\n\t\tif (distanceLY >= 1000) {\r\n\t\t\tif (this.gridPlane) {\r\n\t\t\t\tthis.gridPlane.traverse(function(child){\r\n\t\t\t\t\tchild.visible = true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.galaxy)\r\n\t\t\t\tthis.galaxy.show();\r\n\t\t}\r\n\t\t\r\n\t\tif (distanceLY < 1000) {\r\n\t\t\tif (this.gridPlane) {\r\n\t\t\t\tthis.gridPlane.traverse(function(child){\r\n\t\t\t\t\tchild.visible = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.galaxy)\r\n\t\t\t\tthis.galaxy.hide();\r\n\t\t}\r\n\r\n\r\n\t\tif (distanceLY >= 100) {\r\n\t\t\tif (this.stars) {\r\n\t\t\t\t//this.stars.traverse(function(child){\r\n\t\t\t\t\t//child.visible = true;\r\n\t\t\t\t//});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tif( distanceLY < 1000 ) {\r\n\t\t\tif( this.galaxy && window.settings.showGalaxy == false ) {\r\n\t\t\t\t//window.settings.showGalaxy = false;\r\n\t\t\t\tthis.galaxyParticles.traverse(function(child) { \r\n\t\t\t\t\tchild.visible = false;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t$('#filter-galaxy').attr('checked', false);\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t*/\r\n\r\n\t  /*\r\n\t  _.each(this.meshes, function(mesh){\r\n\t  \tif (mesh.properties.name == 'earth') {\r\n\t  \t\tconsole.log(mesh.position);\r\n\t  \t}\r\n\t  });\r\n\t\t*/\r\n\r\n\t\t// update label positions\r\n\t\t_.each(this.meshes, function( mesh, idx ) {\r\n\r\n\t\t\tif (mesh) {\r\n\t\t\t\t//var pos = window.utils.getPosition2D( mesh.parent.parent, self.camera, self.projector);\r\n\t\t\t\tvar pos = window.utils.project2D( mesh, self );\r\n\r\n\t\t\t\tvar labelID = 'object-' + mesh.name.replace(' ', '-').toLowerCase();\r\n        \t\tlabelID = labelID.replace(' ', '-');\r\n\r\n\t\t\t\t$('#' + labelID).html( mesh.name );\r\n\t\t\t\t$('#' + labelID).css({\r\n\t\t\t\t\t'left': pos.x + window.settings.labelOffsetX + 'px',\r\n\t\t\t\t\t'top': pos.y + window.settings.labelOffsetY + 'px',\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t});\t\r\n\r\n\r\n\t\t//if( this.starLinesRendered ) {\r\n\r\n\t\t\t// walk throught the renderd star lines and set their opacity\r\n\r\n\t\t\t/*\r\n\t\t\tvar renderIndex = renderCount;\r\n\t\t\tconsole.log( 'star length', this.starLines.length );\r\n\r\n\t\t\tif( renderIndex >= this.stars.length ) {\r\n\t\t\t\trenderIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log('renderIndex', renderIndex);\r\n\r\n\t\t\tfor( var i=0; i<this.stars.length; i++ ) {\r\n\t\t\t\tthis.starLines[ i ].material.opacity = 0.15;\r\n\r\n\t\t\t\t//if( i == 500 ) \r\n\t\t\t\t\t//console.log( this.starLines[ i ] );\r\n\r\n\t\t\t\tif( i == renderIndex ) {\r\n\t\t\t\t\tthis.starLines[ i ].needsUpdate = true;\r\n\t\t\t\t\tthis.starLines[ i ].material.opacity = 0.75;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\r\n\t\t//}\r\n\t\t*/\r\n\r\n\t\tTWEEN.update();\r\n\r\n\t\t// render the scene\r\n\t\tthis.renderer.render( this.scene, this.camera );\r\n\t},\r\n\r\n\tafterRender: function(){\r\n\t\t$('#loader').hide();\r\n\t},\r\n\r\n\t// Show the labels of the stars depending on the distance of the camera\r\n\tupdateStarLabels: function( distance ){\r\n\t\tvar self = this;\r\n\r\n\t\t// the maximum number of labels to show\r\n\t\tvar maxLabels = 10;\r\n\r\n\t\t// tolerance to show star labels in light years\r\n\t\tvar distanceTolerance = 25;\r\n\r\n\t\t// smaller then one light year\r\n\t\tif( distance < 1 ) {\r\n\r\n\t\t} else if( distance >= 100 ) {\r\n\t\t\t\r\n\t\t\tvar i = 0;\r\n\t\t\t_.each( this.stars, function( star ) {\r\n\r\n\t\t\t\tif( \r\n\t\t\t\t\tstar.properties.distanceLY >= (distance - distanceTolerance) &&\r\n\t\t\t\t\tstar.properties.distanceLY <= (distance + distanceTolerance)\r\n\t\t\t\t ) {\r\n\r\n\t\t\t\t \tif( i <= maxLabels ) {\r\n\r\n\t\t\t\t \t\tvar name = star.properties.name;\r\n\t\t\t\t\t\tvar pos = window.utils.toXYCoords( star.position, self.camera, self.projector );\r\n\r\n\t\t\t\t\t\t$('.star-label-' + i).css({\r\n\t\t\t\t\t\t\t'left': pos.x + window.settings.labelOffsetX + 'px',\r\n\t\t\t\t\t\t\t'top': pos.y + window.settings.labelOffsetY + 'px',\r\n\t\t\t\t\t\t});\r\n\t\t\t\t \t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\t\r\n\r\n\t\t} else if( distance >= 1000 ) {\r\n\t\t\t$('.star-label').hide()\r\n\t\t}\r\n\r\n\t},\r\n\r\n\taddSolarSystem: function() {\r\n\t\tvar self = this;\r\n\r\n\t\tif (self.config.settings.solarsystem) {\r\n\t\t\tvar solarsystem = new Solarsystem();\r\n\r\n\t\t\t// add the solar system to the scene\r\n\t\t\tvar planetSystemView = new PlanetSystemView({\r\n\t\t\t\tapp: self,\r\n\t\t\t\tmodel: solarsystem.getData()\r\n\t\t\t});\r\n\r\n\t\t\tthis.systems.push( planetSystemView );\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t// load anoth particular system randomly\r\n\t\tvar randomSystem = this.interestingSystems[ \r\n\t\t\tMath.round( Math.random() * (this.interestingSystems.length-1) ) \r\n\t\t];\r\n\r\n\t\t// load planet systems dynamically\r\n\t\tsetTimeout(function(){\r\n\t\t\t$.ajax({\r\n\t\t\t  dataType: \"json\",\r\n\t\t\t  url: 'data/planetsystems/' + randomSystem,\r\n\t\t\t  success: function( data ) {\r\n\t\t\t  \t\r\n\t\t\t  \tvar planetSystemView = new PlanetSystemView({\r\n\t\t\t  \t\tapp: self,\r\n\t\t\t\t\t\tmodel: data\r\n\t\t\t\t\t});\r\n\r\n\t\t\t  \t// self.system = new System( self.scene, self.meshes, self.orbits, data );\r\n\t\t\t\t\tself.systems.push( planetSystemView );\r\n\t\t\t  }\r\n\t\t\t});\r\n\t\t}, 1000);\r\n\t\t*/\r\n\r\n\t},\r\n\r\n\tloadSystem: function( system ){\r\n\t\tvar self = this;\r\n\r\n\t\tif (system.get('name')) {\r\n\t\t\tvar planetSystemView = new PlanetSystemView({\r\n\t  \t\tapp: self,\r\n\t\t\t\tmodel: {model: system}\r\n\t\t\t});\r\n\r\n\t\t\tself.systems.push( planetSystemView );\r\n\t\t}\r\n\t},\r\n\r\n\taddSystem: function( id ){\r\n\t\tvar self = this;\r\n\t\tvar systemRendered = false;\r\n\r\n\t\t// check if system already loaded\r\n\t\t_.each( this.systems, function( system, idx ){\r\n\t\t\tif ( parseInt(system.id) == parseInt(id) ) {\r\n\t\t\t\tconsole.log('system already rendered');\r\n\t\t\t\tsystemRendered = true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (!systemRendered) {\r\n\t\t\t_.each( self.planetsystems.models, function( system ){\r\n\t\t\t\tif ( parseInt(system.get('id')) == id ) {\r\n\t\t\t\t\tvar planetSystemView = new PlanetSystemView({\r\n\t\t\t  \t\tapp: self,\r\n\t\t\t\t\t\tmodel: system.attributes\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tself.systems.push( planetSystemView );\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t},\r\n\r\n\trenderStars: function(){\r\n\t\tvar self = this;\r\n\r\n\t\t$.ajax({\r\n\t\t  dataType: 'json',\r\n\t\t  url: 'data/stars.json?time=' + Math.random(),\r\n\t\t  success: function( stars ){\r\n\t\t  \t\r\n\t\t  \tself.loadedStars = stars;\r\n\t\t  \tconsole.log('stars loaded: ', stars.length );\r\n\t\t  \tself.particleStars = new ParticleStarsView({\r\n\t\t  \t\tapp: self, \r\n\t\t  \t\tstars: self.loadedStars \r\n\t\t  \t});\r\n\t\t  \tself.particleStars.update();\r\n\t\t  \t// self.coordinateSystem.renderDistanceLines();\r\n\t\t  }\r\n\t\t});\r\n\r\n\t},\r\n\r\n\trenderKnownStars: function(){\r\n\t\tvar self = this;\r\n\r\n\t\t$.ajax({\r\n\t\t  dataType: \"json\",\r\n\t\t  url: 'data/known_stars.json?time=' + Math.random(),\r\n\t\t  success: function( stars ){\r\n\t\t  \t\r\n\t\t  \tconsole.log('know stars loaded: ', stars.length );\r\n\t\t  \tself.known_stars = new StarsView({\r\n\t\t  \t\tapp: self, \r\n\t\t  \t\tstars: stars\r\n\t\t  \t});\r\n\t\t  \t\r\n\t\t  \tself.known_stars.update();\r\n\t\t  }\r\n\t\t});\r\n\r\n\t},\r\n\r\n\tupdateStars: function() {\r\n\t\tvar self = this;\r\n\r\n\t\tvar c = 0;\r\n\r\n\t\t_.each( this.stars, function( star, index ) {\r\n\r\n\t\t\tif ( c < 10 ) {\r\n\t\t\t\tconsole.log( star );\r\n\r\n\t\t\t\tvar distance = window.utils.getDistance( self.camera.position, star.position );\r\n\t\t\t\t// star.x = distance / window.settings.stars.minScale;\r\n\t\t\t\t// star.y = distance / window.settings.stars.minScale;\r\n\t\t\t\t// star.z = distance / window.settings.stars.minScale;\r\n\t\t\t}\r\n\t\t\tc++;\r\n\r\n\t\t});\r\n\r\n\t},\r\n\r\n\trenderDistanceCircles: function(limit, type){\r\n\t\tvar self = this;\r\n\r\n\t\tvar object = new THREE.Object3D();\r\n\t  var distanceType = window.settings.AU;\r\n\r\n\t  if( type == 'lightyears' )\r\n\t  \tdistanceType = window.settings.LY;\r\n\t  \r\n\t  // make the steps every 10^x circles\r\n\t\tfor ( var i=0; i<=5; i++ ) {\r\n\r\n\t\t\tif( i == 5 && type != 'lightyears') \r\n\t\t\t\tbreak;\r\n\r\n\t\t\tvar circleDistance = Math.pow( 10, i ) * (distanceType / window.settings.distancePixelRatio);\r\n\t\t\tvar distanceStep = Math.pow( 10, i );\r\n\r\n\t\t\tvar circle = new THREE.Shape();\r\n\t\t\t\t\tcircle.moveTo( circleDistance, 0 );\r\n\t\t\t\t\tcircle.absarc( 0, 0, circleDistance, 0, Math.PI*2, false );\r\n\t\t\t\r\n\t\t\tvar points = circle.createPointsGeometry(100);\r\n\r\n\t\t\tcircleLine = new THREE.Line(points, \r\n\t\t\t  new THREE.LineBasicMaterial({ \r\n\t\t      color : 0x00ffff,\r\n\t\t      opacity : 0.5,\r\n\t\t      linewidth: 1,\r\n\t\t      transparent: true,\r\n\t\t      blending: THREE.AdditiveBlending \r\n\t\t\t  })\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t// add one distanceStep as offset to move it to the center\t\t\r\n\t\t\t//v_circle.position.set(0, -100, 0);\t\t\r\n\t\t\tcircleLine.position.set( 0, 0, 0 );\r\n\t\t\tcircleLine.rotation.set( Math.PI/2, 0, 0 );\r\n\t\t\tcircleLine.visible = false;\r\n\t\t\tcircleLine.properties = {};\r\n\t\t\tcircleLine.properties.distanceScale = distanceStep;\r\n\r\n\t\t\tself.distanceObjects[ type ].push( circleLine );\r\n\t\t\tobject.add( circleLine );\t\r\n\r\n\t\t\t// for every distance create a canvas text based on a three texture\r\n\t   \tvar canvas = document.createElement('canvas');\r\n\t   \t\t\tcanvas.width = 600;\r\n\t    \t\tcanvas.height = 400;\r\n\r\n\t    var context = canvas.getContext('2d'),\r\n\t\t      centerX = canvas.width / 2,\r\n\t\t      centerY = canvas.height / 2,\r\n\t\t      angle = (Math.PI * 0.7),\r\n\t\t      radius = -520;\r\n\r\n\t    //context.clearRect(0, 0, canvas.width, canvas.height);\r\n\t    context.font = '32px Helvetica, Arial';\r\n\t    context.textAlign = 'center';\r\n\t    context.fillStyle = '#00ffff';\r\n\t    context.strokeStyle = '#00ffff';\r\n\t    context.lineWidth = 4;\r\n\r\n\t    var canvasText = distanceStep + ' astronomical unit';\r\n\t \r\n\t\t  if( type == 'lightyears' )\r\n\t\t  \tcanvasText = distanceStep + ' light year';\r\n\r\n\t\t  if( i > 0 ) \r\n\t\t  \tcanvasText += 's';\r\n\r\n\t    window.utils.textCircle(context, canvasText, centerX, centerY-480, radius, angle, 1);\r\n\t    context.stroke();\r\n\r\n\t    // taken from: http://stemkoski.github.io/Three.js/Texture-From-Canvas.html\r\n\t\t\t// canvas contents will be used for a texture\r\n\t\t\tvar texture = new THREE.Texture(canvas); \r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t      \r\n\t  \tvar material = new THREE.MeshBasicMaterial({\r\n\t  \t\tmap: texture, \r\n\t  \t\tcolor: 0x00ffff, \r\n\t  \t\ttransparent: true,\r\n\t  \t\topacity: 0.75,\r\n\t  \t\tside: THREE.DoubleSide,\r\n\t  \t\tblending: THREE.AdditiveBlending \r\n\t  \t});\r\n\r\n\t    material.needsUpdate = true;\r\n\r\n\t    var mesh = new THREE.Mesh(\r\n\t    \tnew THREE.PlaneGeometry(100, 100),\r\n\t   \t\tmaterial\r\n\t   \t);\r\n\r\n\t    mesh.properties = {};\r\n\t    mesh.properties.distanceScale = distanceStep;\r\n\t    mesh.visible = false;\r\n\t\t\tmesh.position.set(0, 0, circleDistance);\r\n\t\t\tmesh.rotation.set(-Math.PI/2, 0, 0);\r\n\r\n\t\t\tmesh.scale.x = 10.0 * ( Math.pow( 10, (i+1) ) );\r\n\t\t\tmesh.scale.y = 10.0 * ( Math.pow( 10, (i+1) ) );\r\n\r\n\t\t\tif( type == 'lightyears' ) {\r\n\t\t\t\tmesh.scale.x = 7.0 * ( Math.pow( 10, (i+6) ) );\r\n\t\t\t\tmesh.scale.y = 7.0 * ( Math.pow( 10, (i+6) ) );\r\n\t\t\t}\r\n\r\n\t\t\tthis.distanceObjects[ type ].push( mesh );\r\n\t\t\tthis.scene.add( mesh );\r\n\t\t}\r\n\r\n\t\tthis.scene.add( object );\r\n\r\n\t},\r\n\r\n\t// change the planet sizes (default 1)\r\n\tchangePlanetSizes: function( size ) {\r\n\t\t_.each( this.meshes, function( mesh, idx ) {\r\n\r\n\t\t\tif( size < 0 )\r\n\t\t\t\tsize = 0;\r\n\r\n\t\t\tif( mesh.properties.type != 'star' )\r\n\t\t\t\tmesh.scale.set(size, size, size);\r\n\r\n\t\t});\r\n\t},\r\n\r\n\tmoveCamera: function(){\r\n\t\tvar self = this;\r\n\r\n\t\tvar target = {\r\n\t\t\tx: window.settings.LY * 100000 / window.settings.distancePixelRatio,\r\n\t    y: window.settings.LY * 100000 / window.settings.distancePixelRatio,\r\n\t    z: window.settings.LY * 100000 / window.settings.distancePixelRatio \r\n\t\t};\r\n\r\n\t\tself.cameraHelper.moveTo(self.camera.position, target, 5000);\r\n\t},\r\n\r\n\t// EVENTS\r\n\tonDocumentMouseDown: function( event ) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tvar vector = new THREE.Vector3( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1, 0.5 );\r\n\t\tthis.projector.unprojectVector( vector, this.camera );\r\n\r\n\t\tvar rayCaster = new THREE.Raycaster( this.camera.position, vector.sub( this.camera.position ).normalize() );\r\n\t\tvar intersects = rayCaster.intersectObjects( this.meshes, true );\r\n\r\n\t\tif ( intersects.length > 0 ) {\r\n\r\n\t\t\tconsole.log( 'hovered', intersects[ 0 ].object );\r\n\t\t\t// intersects[ 0 ].object.material.color.setHex( Math.random() * 0xffffff );\r\n\r\n\t\t\tvar particle = new THREE.Particle();\r\n\t\t\tparticle.position = intersects[ 0 ].point;\r\n\t\t\tparticle.scale.x = particle.scale.y = 8;\r\n\t\t\tthis.scene.add( particle );\r\n\t\t\t//console.log( intersects[ 0 ].object.parent.parent.position );\r\n\r\n\r\n\t\t\tthis.trackingOrbit = intersects[ 0 ].object;\r\n\r\n\t\t\t//console.log( intersects[ 0 ].object.parent.parent.position );\r\n\r\n\t\t\t// move the camera to the specific space object\r\n\t\t\t//this.camera.lookAt( intersects[ 0 ].object.position );\r\n\r\n\t\t\t// move the camera to the object\r\n\t\t\t//this.camera.position.x = intersects[ 0 ].object.parent.position.x;\r\n\t\t\t//this.camera.position.y = intersects[ 0 ].object.parent.position.y;\r\n\t\t\t//this.camera.position.z = intersects[ 0 ].object.parent.position.z;\r\n\r\n\t\t\t//this.fixCameraToObject = true;\r\n\t\t}\r\n\t},\r\n\r\n\r\n\tonDocumentMouseMove: function( event ) {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tvar self = this;\r\n\r\n\t\tvar vector = new THREE.Vector3( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1, .5 );\r\n\t\tthis.projector.unprojectVector( vector, this.camera );\r\n\r\n\t\tvar rayCaster = new THREE.Raycaster( this.camera.position, vector.sub( this.camera.position ).normalize() );\r\n\r\n\t\t_.each( self.markers, function( marker, idx ){\r\n\t\t\tself.scene.remove( marker );\r\n\t\t});\r\n\r\n\t\tvar intersects = rayCaster.intersectObjects( this.meshes, true );\r\n\t\tvar mouse = { x: 0, y: 0, z: 1 };\r\n\r\n\t\t// this where begin to transform the mouse cordinates to three.js cordinates\r\n\t  mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n\t  mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n\t    \r\n\t  // this vector caries the mouse click cordinates\r\n\t  var mouse_vector = new THREE.Vector3(0,0,0);\r\n\t  \t\tmouse_vector.set( mouse.x, mouse.y, mouse.z );\r\n\r\n\t  this.projector.unprojectVector( mouse_vector, this.camera );\r\n\t  var direction = mouse_vector.sub( this.camera.position ).normalize();\r\n\t  rayCaster.set( this.camera.position, direction );\r\n\t    \r\n\t\t// check if the user moves the mouse over a planet or host star\r\n\t\t_.each( this.meshes, function( mesh, idx ){\r\n\t\t\t//console.log(mesh);\r\n\t\t\tif( mesh.position ) {\r\n\t\t\t\tintersects = rayCaster.intersectObject( [mesh] );\r\n\r\n\t\t\t\tif( intersects.length > 0 ) {\r\n\t  \t\t\tconsole.log( intersects[ 0 ].object );\r\n\t  \t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$('#tooltip').hide();\r\n\t\t$('#canvas').css({'opacity': 0.0});\r\n\t\tself.canvasElement.hideViewHelper();\r\n\r\n\t\t// console.log('mouse moved');\r\n\r\n\t\tif (window.settings.showStars && !self.isMouseOverElement(event)) {\r\n\r\n\t\t\t// check if user moves the mouse near a star\r\n\t\t\t_.each( self.stars, function( star, idx ){\r\n\r\n\t\t\t\tif (star) {\r\n\r\n\t\t\t\t\tvar pos = window.utils.getPosition2D( star, self.camera, self.projector);\r\n\r\n\t\t\t\t\tif( pos.x >= (event.clientX - 5) && pos.x <= (event.clientX + 5) ) {\r\n\t\t\t\t\t\tif( pos.y >= (event.clientY - 5) && pos.y <= (event.clientY + 5) ) {\r\n\t\t\t\t\t\t\tself.canvasElement.updatePosition(pos);\r\n\t\t\t\t\t\t\tself.canvasElement.updateObjectInfo(star);\r\n\t\t\t\t\t\t\tself.canvasElement.showTooltip();\r\n\t\t\t\t\t\t\tself.canvasElement.showViewHelper();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// check over which element the mouse is\r\n\tisMouseOverElement: function(event){\r\n\t\tel = document.elementFromPoint(event.clientX, event.clientY);\r\n    return !$(el).is('canvas') && !$(el).hasClass('habitable-star-label');\r\n\t}\r\n\t    \r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n","/**\r\n * Define Basis Geomentries here\r\n */\r\n\r\nmodule.exports = Backbone.Model.extend({\r\n\r\n  initialize: function(values){\r\n    Backbone.Model.prototype.initialize.call(this, values);\r\n  },\r\n\r\n\trenderDashedCircle: function( radius, color ) {\r\n\r\n\t\tif( color == undefined )\r\n\t\t\tcolor = new THREE.Color('rgba(255, 255, 255, 0.75)');\r\n\r\n\t\tvar circleGeometry = new THREE.Geometry();\r\n\t\tvar verticesArray = circleGeometry.vertices;\r\n\t\tvar segments = 128;\r\n\t\tvar angle = 2 * Math.PI / segments;\r\n\r\n\t\tfor( var i = 0; i <= segments; i++ ) {\r\n\t    var x = radius * Math.cos(angle * i);\r\n\t    var y = radius * Math.sin(angle * i);\r\n\r\n\t    verticesArray.push( new THREE.Vector3(x, y, 0) );\r\n\t\t}\r\n\r\n\t\t// see: http://soledadpenades.com/articles/three-js-tutorials/drawing-the-coordinate-axes/\r\n\t\tvar circleMaterial = new THREE.LineDashedMaterial({ \r\n\t\t\tcolor: 0x00FF00, \r\n\t\t\ttransparent: true,\r\n\t\t\topacity: 0.1,\r\n\t\t\tdashSize: window.settings.AU / 1000, \r\n\t\t\tgapSize: window.settings.AU / 1000\r\n\t\t});\r\n\r\n\t\tcircleGeometry.computeLineDistances();\r\n\r\n\t\tvar circleLine = new THREE.Line(circleGeometry, circleMaterial, THREE.LinePieces);\r\n\t\t\t\tcircleLine.position.set(0, 12, 0);\r\n\t\t\t\tcircleLine.rotation.set( -90 * Math.PI / 180, 0, 0 );\r\n\r\n\t\treturn circleLine;\r\n\t}\r\n\r\n});\r\n\r\n","module.exports = Backbone.Model.extend({\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n \r\n  \tthis.speed = 3000;\r\n    this.bindObject = null;\r\n    this.isAnimating = false;\r\n\r\n  \t_.bindAll(this, 'moveTo', 'lookTo', 'bindTo', 'update', 'updateCameraPosition', 'autoRotation');\r\n  },\r\n\r\n  // see: http://stackoverflow.com/questions/14567712/how-to-animate-camera-lookat-using-three-js\r\n  moveTo: function( position, target, speed, completeCallback ) {\r\n    var self = this;\r\n    self.isAnimating = true;\r\n\r\n    console.log('moving camera position');\r\n\r\n    if (self.bindObject !== null) {\r\n      target.x += window.settings.camera.planetDistance;\r\n      target.y += window.settings.camera.planetDistance;\r\n      target.z += window.settings.camera.planetDistance;\r\n    }\r\n\r\n  \tvar speed = speed || this.speed;\r\n\r\n  \tvar tween = new TWEEN.Tween( position ).to( {\r\n\t    x: target.x,\r\n\t    y: target.y,\r\n\t    z: target.z\r\n\t  }, speed)\r\n\t  \t.easing(TWEEN.Easing.Cubic.InOut)\r\n      .onUpdate(function(){\r\n\r\n        position.x = position.x;\r\n        position.y = position.y;\r\n        position.z = position.z;\r\n\r\n        self.app.camera.updateProjectionMatrix();\r\n      })\r\n      .onComplete(function(){\r\n\r\n        // self.app.controls.rotation.set( 0, 0, 0 );\r\n        if (self.bindObject !== null) {\r\n          target.x -= window.settings.camera.planetDistance;\r\n          target.y -= window.settings.camera.planetDistance;\r\n          target.z -= window.settings.camera.planetDistance;\r\n          self.app.initCamera(target);\r\n\r\n          // show child objects like moons\r\n          try {\r\n            self.bindObject.showChildren();\r\n          } catch(error) {}\r\n\r\n        } else \r\n          self.app.initCamera();\r\n        \r\n        //self.app.camera.rotation.set( 0, 0, 0 );\r\n        //self.app.camera.position.set(target.x, target.y, target.z);\r\n        //self.app.camera.updateProjectionMatrix();\r\n        //self.app.controls = new THREE.TrackballControls( self.app.camera, self.app.container );\r\n        //self.app.camera.target = new THREE.Vector3(target.x, target.y, target.z);\r\n        //console.log(self.app.controls.target);\r\n        //self.app.camera.lookAt(target);\r\n\r\n        self.isAnimating = false;\r\n\r\n        if (completeCallback)\r\n          completeCallback();\r\n\r\n      })\r\n\t  \t.start();\r\n  },\r\n\r\n  lookTo: function( target, completeCallback, speed ) {\r\n  \tvar self = this;\r\n  \tvar speed = speed || this.speed;\r\n    self.isAnimating = true;\r\n\r\n    console.log('camera currently looks at', self.app.controls.target);\r\n    console.log('camera will look at', target);\r\n\r\n  \t// vector looking to negative z-axis\r\n  \tvar vector = new THREE.Vector3( self.app.controls.target.x, self.app.controls.target.y, self.app.controls.target.z );\r\n  \t\t\tvector.applyQuaternion( self.app.camera.quaternion );\r\n\r\n  \tvar vector = self.app.controls.target;\r\n\r\n  \tvar tween = new TWEEN.Tween( vector ).to( {\r\n\t    x: target.x,\r\n\t    y: target.y,\r\n\t    z: target.z\r\n\t  }, speed)\r\n\t  \t.easing(TWEEN.Easing.Cubic.InOut)\r\n      .onUpdate(function(){\r\n      \tself.app.camera.lookAt(\r\n      \t\tnew THREE.Vector3(vector.x, vector.y, vector.z)\r\n      \t);\r\n      \t\r\n      \tself.app.controls.target = new THREE.Vector3(vector.x, vector.y, vector.z);\r\n        self.app.camera.updateProjectionMatrix();\r\n      })\r\n      .onComplete(function(){\r\n        //self.app.controls.reset();\r\n        self.app.controls.target = new THREE.Vector3(vector.x, vector.y, vector.z);\r\n\r\n        self.app.camera.lookAt(self.app.controls.target);\r\n        self.app.camera.updateProjectionMatrix();\r\n\r\n        console.log('starting callback', completeCallback);\r\n        self[completeCallback](self.app.camera.position, target);\r\n      })\r\n\t  \t.start();\r\n  },\r\n\r\n  bindTo: function( object, target ){\r\n    this.bindObject = object;\r\n    this.lookTo(target, 'moveTo');\r\n  },\r\n\r\n  update: function(){\r\n    if (this.bindObject != null && !this.isAnimating) {\r\n      this.updateCameraPosition(this.bindObject.object.properties.position);\r\n    }\r\n  },\r\n\r\n  updateCameraPosition: function(target) {\r\n    this.app.camera.lookAt(target);\r\n    this.app.camera.updateProjectionMatrix();\r\n  },\r\n\r\n  autoRotation: function(){\r\n    // only accept auto rotation if there is no object bound;\r\n    if (this.bindObject === null) {\r\n      var x = this.app.camera.position.x;\r\n      var y = this.app.camera.position.y;\r\n      var z = this.app.camera.position.z;\r\n\r\n      var rotSpeed = 0.0005;\r\n\r\n      this.app.camera.position.x = x * Math.cos(rotSpeed) + z * Math.sin(rotSpeed);\r\n      this.app.camera.position.z = z * Math.cos(rotSpeed) - x * Math.sin(rotSpeed);\r\n      this.app.camera.lookAt(this.app.cameraTarget);\r\n    }\r\n  }  \r\n\r\n});\r\n","\r\nvar TooltipView = require('../../views/tooltip_view');\r\nvar InfoboxView = require('../../views/infobox_view');\r\n\r\nmodule.exports = Backbone.View.extend({\r\n\r\n  events: {},\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n    this.model = options.object;\r\n    this.pos = options.pos;\r\n    this.type = options.type;\r\n\r\n    this.clicked = false;\r\n\r\n    this.viewHelperGroup = new THREE.Object3D();\r\n    \r\n  \t_.bindAll(this, 'render', 'showTooltip', 'updatePosition', 'updateObjectInfo', 'showViewHelper', 'hideViewHelper');\r\n\r\n    this.render();\r\n  },\r\n\r\n  render: function() {\r\n    var self = this;\r\n\r\n  \t// render a canvas circle at the screen position\r\n    self.canvas = document.getElementById('canvas');\r\n    self.canvas.width = 24;\r\n    self.canvas.height = 24;\r\n\r\n    var context = self.canvas.getContext('2d');\r\n        context.beginPath();\r\n        context.arc(12, 12, 11, 0, 2 * Math.PI, false);\r\n        context.lineWidth = 2;\r\n        context.strokeStyle = '#99FF66';\r\n        context.stroke();\r\n\r\n    // add click event (dirty)\r\n    $(document).on('click', '#canvas', function(e){\r\n\r\n      // dirty: prevent multiple click events\r\n      if (!self.clicked) {\r\n        self.clicked = true;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        // move the camera to the star\r\n        // self.app.cameraHelper.lookTo(self.model.position, 'moveTo');\r\n        self.infobox = new InfoboxView({\r\n          app: self.app,\r\n          data: self.model.properties,\r\n          template: 'star-info'\r\n        });\r\n      }\r\n\r\n      self.clicked = false;\r\n    });\r\n\r\n  },\r\n\r\n  showTooltip: function(){\r\n    var self = this;\r\n    self.tooltip = new TooltipView({\r\n      pos: self.pos,\r\n      data: self.model.properties\r\n    });\r\n  },\r\n\r\n  updatePosition: function(pos){\r\n    this.pos = pos;\r\n    $('#canvas').css({\r\n      'left': pos.x - 12 + 'px',\r\n      'top': pos.y - 12 + 'px',\r\n      'opacity': 1.0\r\n    });\r\n  },\r\n\r\n  updateObjectInfo: function(objectInfo){\r\n    this.model = objectInfo;\r\n  },\r\n\r\n  showViewHelper: function(){\r\n    var self = this;\r\n    \r\n    self.hideViewHelper();\r\n    self.viewHelperGroup = new THREE.Object3D();\r\n\r\n    if (self.app.currentDistanceLY >= 1) {\r\n      console.log('showing helper lines');\r\n      var pos = self.model.properties.position;\r\n\r\n      // show two lines\r\n      var material = new THREE.LineBasicMaterial({\r\n        color: 0x0090ff,\r\n        linewidth: 1\r\n      });\r\n\r\n      // define the geometry shape\r\n      var geometry = new THREE.Geometry();\r\n          geometry.vertices.push( new THREE.Vector3(0, 0, 0) );\r\n          geometry.vertices.push( new THREE.Vector3(pos.x, 0, pos.z) );\r\n\r\n      var line1 = new THREE.Line(geometry, material);\r\n\r\n      var geometry = new THREE.Geometry();\r\n          geometry.vertices.push( new THREE.Vector3(pos.x, 0, pos.z) );\r\n          geometry.vertices.push( new THREE.Vector3(pos.x, pos.y, pos.z) );\r\n\r\n      var line2 = new THREE.Line(geometry, material);\r\n\r\n      var geometry = new THREE.Geometry();\r\n          geometry.vertices.push( new THREE.Vector3(0, 0, 0) );\r\n          geometry.vertices.push( new THREE.Vector3(pos.x, pos.y, pos.z) );\r\n\r\n      var line3 = new THREE.Line(geometry, material);\r\n\r\n      self.viewHelperGroup.add(line1);\r\n      self.viewHelperGroup.add(line2);\r\n      self.viewHelperGroup.add(line3);\r\n\r\n      self.app.scene.add(self.viewHelperGroup);\r\n\r\n    }\r\n  },\r\n\r\n  hideViewHelper: function() {\r\n    this.app.scene.remove(this.viewHelperGroup);\r\n  }\r\n\r\n});\r\n","/**\r\n * Math functions that are useful to calculate bodies in space\r\n */\r\n\r\nwindow.spaceMath = {\r\n\r\n\ttoRad: function( a, b ) {\r\n\t  return a + Math.random() * ( b - a );\r\n\t},\r\n\r\n\ttoDeg: function() {\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","var application = require('application');\r\nvar App = require('lib/app');\r\nvar Shaders = require('lib/shaders');\r\n\r\n// collections\r\nvar Constellations = require('collections/constellations');\r\nvar Stars = require('collections/stars');\r\nvar Planetsystems = require('collections/planetsystems');\r\n\r\n// views\r\nvar MenuView = require('views/menu_view');\r\nvar AnimationControlsView = require('views/animation_controls_view');\r\nvar PopupView = require('views/popup_view');\r\n\r\nmodule.exports = Backbone.Router.extend({\r\n\r\n  routes: {\r\n    '': 'index',\r\n    ':planetsystem': 'index',\r\n    'show/:planetsystem': 'displayPlanetsystem',\r\n  },\r\n\r\n  index: function ( planetSystem ) {\r\n    console.log( planetSystem );\r\n\r\n    var self = this;  \r\n\r\n    console.log('initializing app');\r\n\r\n    var stars = new Stars();\r\n    var shaders = new Shaders();\r\n    var planetsystems = new Planetsystems();\r\n    var constellations = new Constellations();\r\n\r\n    $.when(\r\n      \r\n      // stars.fetch(),\r\n      shaders.fetch(),\r\n      stars.fetch(),\r\n      planetsystems.fetch(),\r\n      constellations.fetch()\r\n\r\n      ).done(function(){\r\n\r\n        var app = new App({\r\n          stars: stars,\r\n          planetsystems: planetsystems,\r\n          constellations: constellations,\r\n          shaders: shaders.data,\r\n          config: {\r\n            distance: {\r\n              type: 'au',\r\n              value: 1\r\n            }\r\n          }\r\n        });\r\n\r\n        var menuView = new MenuView({ app: app, type: 'mainmenu' });\r\n        var animationControlsView = new AnimationControlsView({ app: app });\r\n\r\n        app.animationControlsView = animationControlsView;\r\n\r\n        $('#interface').append(menuView.render().el);\r\n        $('#interface').append(animationControlsView.render().el);\r\n\r\n        window.app = app;\r\n\r\n        app.afterRender();\r\n    });    \r\n  },\r\n\r\n  displayPlanetsystem: function( systemName ){\r\n\r\n    var systemName = systemName.trim().replace(' ', '-').toLowerCase();\r\n    var planetsystems = new Planetsystems();\r\n    var planetsystem = null;\r\n\r\n    $.when( planetsystems.fetch() ).done(function(){\r\n\r\n      // check if planetsystem exists\r\n      var systemExists = false;\r\n      _.each(planetsystems.models, function(system, id){\r\n\r\n        var name = system.get('name').trim().replace(' ', '-').toLowerCase();\r\n        if ( name == systemName ) {\r\n          console.log('system found:', system);\r\n          systemExists = true;\r\n          planetsystem = system;\r\n        }\r\n      });\r\n\r\n      if (!systemExists) {\r\n        console.log('planet system not exists');\r\n        //new PopupView({\r\n          //template: 'planet-not-found'\r\n        //});\r\n\r\n      } else {\r\n\r\n        var app = new App({\r\n          stars: null,\r\n          planetsystems: planetsystems,\r\n          shaders: null,\r\n          config: {\r\n            distance: {\r\n              type: 'au',\r\n              value: 1\r\n            },\r\n            camera: {\r\n              view: '3d'\r\n            },\r\n            settings: {\r\n              solarsystem: false,\r\n              stars: false,\r\n              galaxy: false,\r\n\r\n              logo: false,\r\n              stats: false,\r\n              tour: false,\r\n\r\n              inclination: false,\r\n              habitable_zone: true,\r\n              unconfirmed: true,\r\n              individial_orbit_colors: true\r\n            }\r\n          }\r\n        });\r\n\r\n        var menuView = new MenuView({ \r\n          app: app, \r\n          type: 'mainmenu',\r\n          structure: {\r\n            menu: [\r\n              {\r\n                \"id\": \"systems\",\r\n                \"title\": \"Show loaded systems\"\r\n              },\r\n              {\r\n                \"id\": \"view-2d\",\r\n                \"title\": \"2D View\"\r\n              },\r\n              {\r\n                \"id\": \"view-3d\",\r\n                \"title\": \"3D View\"\r\n              },\r\n              {\r\n                \"id\": \"solarsystem\",\r\n                \"title\": \"Compare with Solar System\"\r\n              },\r\n              {\r\n                \"id\": \"settings\",\r\n                \"title\": \"Open the Settings\"\r\n              }\r\n            ]\r\n          } \r\n        });\r\n\r\n        var animationControlsView = new AnimationControlsView({ app: app });\r\n\r\n        $('#interface').append(menuView.render().el);\r\n        $('#interface').append(animationControlsView.render().el);\r\n\r\n        window.app = app;\r\n        \r\n        app.addSystem(planetsystem.get('id'));\r\n        app.afterRender();\r\n\r\n      }\r\n\r\n    });\r\n\r\n  }\r\n\r\n});\r\n","window.settings = {\r\n\r\n\tdefaultRotationSpeed: 0.0005,\r\n\r\n\t// ambient light intensity of global\r\n\tglobalLightIntensity: 0.1,\r\n\r\n\t// the default speed of the app, can be adjusted dynamically\r\n\t// simulation speed can be changed to:\r\n\t//   1s -> 1day\r\n\t//   1s -> 1week\r\n\t//   1s -> 1month\r\n\t//   1s -> 1year  \r\n\t// speed = (60 * 60 * 24); // 1s in vis is 1 day in realtime\r\n\r\n\t// Global settings\r\n\r\n\t// 1 AU (astronomical unit) in km\r\n\tAU: 149597870.700,\r\n\r\n\t// the distance for one light year in km\r\n\tLY: 9460730472580.800,\r\n\r\n\t// the distance of one parsec in light years\r\n\tPC: 3.26156,\r\n\r\n\t// define how large 1px is in comparison to the the real sizes\r\n\t// every distance will be divided by this value\r\n\tdistancePixelRatio: 25000,\r\n\r\n\t// define how large the objects radius should be. The objects radius\r\n\t// will be divided by this value\r\n\r\n\t// For planets\r\n\tradiusPixelRatio: 1000,\r\n\r\n\t// For stars\r\n\tradiusStarPixelRatio: 10000,\r\n\r\n\t// solar system settings\r\n\trenderSystemPlane: true,\r\n\r\n\tplanets: {\r\n\t\tdefaultColor: [0, 0, 200]\r\n\t},\r\n\r\n\t// earth radius in km\r\n\tradiusEarth: 6371,\r\n\tmassEarth: 1,\r\n\r\n\t// jupiter radius in km\r\n\tradiusJupiter: 69911,\r\n\r\n\t// orbit parameters\r\n\torbitColor: 0x9090bb,\r\n\torbitHoverColor: 0xffffff,\r\n\torbitTransparency: 0.5,\r\n\torbitStrokeWidth: 1,\r\n\r\n\t// set the default rotation time in days for stars\r\n\tdefaultStarRotationPeriod: 25.00,\r\n\r\n\tshowOrbits: true,\r\n\tshowInclination: true,\r\n\tshowStars: true,\r\n\tshowGalaxy: true,\r\n\tshowDistances: true,\r\n\r\n\t// habitableZoneColor = 0x66CCFF;\r\n\thabitableZoneColor: 0x008000,\r\n\r\n\r\n\t// Orbit colors are used every time another\r\n\t// system was added to the scene\r\n\torbitColors: [\r\n\t\t0xD59C6F,\r\n\t\t0x88bf8b,\r\n\t\t0x4682b4,\r\n\t\t0xd2691e,\r\n\t\t0xf0e68c,\r\n\t\t0xffa500,\r\n\t\t0xE89296,\r\n\t\t0x92DEE8,\r\n\t\t0x55732D,\r\n\t\t0x0FF7E8,\r\n\r\n\t\t0xE3B1E0,\r\n\t\t0xCA8E40,\r\n\t\t0x983315,\r\n\t\t0xA06E00,\r\n\t\t0xFFB100,\r\n\t\t0xFF6202,\r\n\t\t0x00579E,\r\n\t\t0x9E600A,\r\n\t\t0xFFA301,\r\n\t\t0x913E20\r\n\t],\r\n\r\n\r\n\t// kelvin to degrees factor\r\n\tKelvin: -272.15,\r\n\r\n\t// labels (in px)\r\n\tlabelOffsetX: 6,\r\n\tlabelOffsetY: 2,\r\n\r\n\t// Stefan Boltzmann constant (formerly used hor HZ calculation)\r\n\t// Boltzmann = 5.67 * Math.pow(10, -8);\r\n\r\n\tradiusSun: 696342, // km\r\n\ttempSun: 5777, // kelvin\r\n\tlumSun: 26.5842,\r\n\r\n\t// in AU - approximated min/max distance from sun in which \r\n\t// liquid water may exist on the planets surface and green \r\n\t// house effect is not too strong\r\n\t// minHZ = 0.7; // AU\r\n\t// maxHZ = 1.4; // AU\r\n\r\n\t// for optimistic HZ approximation\r\n\t// minHZ = 0.84;\r\n\t// maxHZ = 1.7;\r\n\r\n\t// for pessimistic HZ approximation\r\n\tminHZ: 0.95, // AU\r\n\tmaxHZ: 1.4, // AU\r\n\r\n\t// Derived from http://en.wikipedia.org/wiki/Stellar_classification\r\n\tspectralNames: {\r\n\t\t'o': 'Blue Giant',\r\n\t\t'b': 'Blue Giant',\r\n\t\t'a': 'White Giant',\r\n\t\t'f': 'Red Giant',\r\n\t\t'g': 'Sunlike',\r\n\t\t'k': 'Red Giant',\r\n\t\t'm': 'Red Dwarf',\r\n\t\t'l': 'Brown Dwarf',\r\n\t\t't': 'Brown Dwarf',\r\n\t\t'y': 'Brown Dwarf'\r\n\t},\r\n\r\n\tspectralColors: {\r\n\t\t'o': 0x9BB0FF, // blue\r\n\t\t'b': 0xBBCCFF, // blue white\r\n\t\t'a': 0xFBF8FF, // white\r\n\t\t'f': 0xFFFFF0, // yellow white\r\n\t\t'g': 0xFFFF00, // yellow\r\n\t\t'k': 0xFF9833, // orange\r\n\t\t'm': 0xBB2020, // red\r\n\t\t'l': 0xA52A2A, // red brown\r\n\t\t't': 0x964B00, // brown\r\n\t\t'y': 0x663300  // dark brown\r\n\t},\r\n\r\n\tgalaxyStarColors: [\r\n\r\n\t\t// blue\r\n\t\t{ type: 'o', color: 0x9BB0FF },\r\n\r\n\t\t// blue white\r\n\t\t{ type: 'b', color: 0xBBCCFF },\r\n\t\t\r\n\t\t// white\r\n\t\t//{ type: 'a', color: 0xFBF8FF },\r\n\r\n\t\t// yellow white\r\n\t\t//{ type: 'f', color: 0xFFFFF0 },\r\n\r\n\t\t// yellow\r\n\t\t{ type: 'g', color: 0xFFFFBB },\r\n\r\n\t\t// orange\r\n\t\t//{ type: 'k', color: 0xFF9833 },\r\n\r\n\t\t// red\r\n\t\t{ type: 'm', color: 0xCB6040 },\r\n\r\n\t\t// red brown\r\n\t\t//{ type: 'l', color: 0xA52A2A }, \r\n\r\n\t\t// brown\r\n\t\t//{ type: 't', color: 0x964B00 }, \r\n\r\n\t\t// dark brown\r\n\t\t//{ type: 'y', color: 0x663300 }  \r\n\t],\r\n\r\n\r\n\t// filter settings\r\n\tfilters: {\r\n\t\thabitableZones: false\r\n\t},\r\n\r\n\t// language settings\r\n\tdefaultlanguage: 'en',\r\n\r\n\tcamera: {\r\n\t\tanimate: true,\r\n\t\tplanetDistance: 100\r\n\t},\r\n\r\n\tstars: {\r\n\r\n\t\t// can be \"normalized sizes\" or \"relative sizes\"\r\n\t\tappearance: 'normalized sizes',\r\n\r\n\t\tminPlanets: 1,\r\n\t\tmaxPlanets: 20,\r\n\t\tminDistance: 0,\r\n\t\tmaxDistance: 50000,\r\n\r\n\t\t// minimum size of 100 px on screen\r\n\t\tsize: 1000000000,\r\n\r\n\t\t// the minimum size in pixels the star should be visible\r\n\t\tminSize: 12,\r\n\t\tmaxSize: 6\r\n\t},\r\n\r\n\tgalaxy: {\r\n\t\tplaneRotation: 63,\r\n\r\n\t\t// the distance of the galactical cnénter to the sun in light years\r\n\t\tcenterDistance: - this.LY * 28000 / this.distancePixelRatio\r\n\t},\r\n\r\n\ttoRad: function() { return Math.PI / 180; },\r\n\r\n\tgalaxyPlaneRotation: function () { \r\n\t\treturn -90 + this.galaxy.planeRotation * this.toRad() \r\n\t}\r\n\r\n}\r\n\r\n","\r\nmodule.exports = Backbone.Model.extend({\r\n\r\n  initialize: function(values){\r\n    Backbone.Model.prototype.initialize.call(this, values);\r\n\r\n    this.folder = 'data/shaders/';\r\n\r\n    this.data = {\r\n      'stars': {\r\n        vertex: '',\r\n        fragment: ''\r\n      },\r\n      'starnames': {\r\n        vertex: '',\r\n        fragment: ''\r\n      },\r\n      'galaxy': {\r\n        vertex: '',\r\n        fragment: ''\r\n      },\r\n      'galaxydust': {\r\n        vertex: '',\r\n        fragment: ''\r\n      },\r\n      'galaxyclusters': {\r\n        vertex: '',\r\n        fragment: ''\r\n      },\r\n      'firmament': {\r\n        vertex: '',\r\n        fragment: ''\r\n      }\r\n    };\r\n\r\n  },\r\n\r\n  fetch: function(){\r\n    var self = this;\r\n    _.each(self.data, function(value, shader){\r\n      self.loadShader( shader, value, 'vertex' );\r\n      self.loadShader( shader, value, 'fragment' );\r\n    });\r\n  },\r\n\r\n  // load the shader with ajax\r\n  loadShader: function( shader, data, type ) {\r\n  \tvar self = this;\r\n\r\n    $.ajax({\r\n      url: self.folder + shader + '-' + type + '.js',\r\n      type: 'GET',\r\n      dataType: 'text',\r\n      async: false,\r\n      complete: function( response ) {\r\n        data[type] = response.responseText;\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n});\r\n","/**\r\n * Define Basis Geomentries here\r\n */\r\n\r\nmodule.exports = Backbone.Model.extend({\r\n\r\n  initialize: function(values){\r\n    Backbone.Model.prototype.initialize.call(this, values);\r\n  },\r\n\r\n  getStarMaterial: function( showShininess ) {\r\n\t\r\n\t\t// create the star texture\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = 256;\r\n\t\t\t\tcanvas.height = 256;\r\n\r\n\t\t//var col = new THREE.Color(color);\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\r\n\t\tvar gradient = context.createRadialGradient( \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\t0, \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\tcanvas.width / 2 \r\n\t\t);\r\n\r\n\t\tgradient.addColorStop( 0, 'rgba(255, 255, 255, 1.0)');\r\n\t\tgradient.addColorStop( 0.05, 'rgba(205, 205, 224, 1.0)');\r\n\t\tgradient.addColorStop( 0.1, 'rgba(125, 100, 0, 0.35)' );\r\n\t\tgradient.addColorStop( 1.0, 'rgba(0,0,0,0.0)' );\r\n\r\n\t\tcontext.fillStyle = gradient;\r\n\t\tcontext.fillRect( 0, 0, canvas.width, canvas.height );\r\n\r\n\t\tif( showShininess ) {\r\n\t\t\tcontext.beginPath();\r\n\t\t\tcontext.lineWidth = 2;\r\n\r\n\t\t\t// top - bottom \r\n      context.moveTo(canvas.width/2, 0);\r\n      context.lineTo(canvas.width/2, canvas.height);\r\n\r\n      // left - right\r\n      context.moveTo(0, canvas.height/2);\r\n      context.lineTo(canvas.width, canvas.height/2);\r\n\r\n      // set line color\r\n      context.strokeStyle = 'rgba(255,255,255,0.75)';\r\n      context.stroke();\r\n\t\t} \r\n\r\n\t\tvar texture = new THREE.Texture(canvas); \r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\t},\r\n\r\n\tgetGalaxyStarMaterial: function() {\r\n\t\r\n\t\t// create the star texture\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = 256;\r\n\t\t\t\tcanvas.height = 256;\r\n\r\n\t\t//var col = new THREE.Color(color);\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\r\n\t\tvar gradient = context.createRadialGradient( \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\t0, \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\tcanvas.width / 2 \r\n\t\t);\r\n\r\n\t\tgradient.addColorStop( 0, 'rgba(255, 255, 255, 0.8)');\r\n\t\tgradient.addColorStop( 0.1, 'rgba(200, 200, 200, 0.8)');\r\n\t\tgradient.addColorStop( 0.5, 'rgba(125, 100, 0, 0.5)' );\r\n\t\tgradient.addColorStop( 1.0, 'rgba(0,0,0,0.0)' );\r\n\r\n\t\tcontext.fillStyle = gradient;\r\n\t\tcontext.fillRect( 0, 0, canvas.width, canvas.height );\r\n\r\n\t\tvar texture = new THREE.Texture(canvas); \r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\t},\r\n\r\n\tgetHabitableStarMaterial: function(){\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = 256;\r\n\t\t\t\tcanvas.height = 256;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\r\n\t\tvar gradient = context.createRadialGradient( \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\t0, \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\tcanvas.width / 2 \r\n\t\t);\r\n\r\n\t\tgradient.addColorStop( 0, 'rgba(255, 255, 255, 0.0)');\r\n\t\tgradient.addColorStop( 0.75, 'rgba(255, 255, 255, 0.0)' );\r\n\t\tgradient.addColorStop( 0.76, 'rgba(255, 255, 255, 0.5)' );\r\n\t\tgradient.addColorStop( 0.80, 'rgba(255, 255, 255, 0.5)' );\r\n\t\tgradient.addColorStop( 0.81, 'rgba(255, 255, 255, 0.0)' );\r\n\t\tgradient.addColorStop( 1.0, 'rgba(0, 0, 0, 0.0)' );\r\n\r\n\t\tcontext.fillStyle = gradient;\r\n\t\tcontext.fillRect( 0, 0, canvas.width, canvas.height );\r\n\r\n\t\tvar texture = new THREE.Texture(canvas); \r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tstarCluster: function(){\r\n\r\n\t\t// create the star texture\r\n\t\tvar canvas = document.createElement('canvas');\r\n\t\t\t\tcanvas.width = 256;\r\n\t\t\t\tcanvas.height = 256;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\r\n\t\tvar gradient = context.createRadialGradient( \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\t0, \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\tcanvas.width / 2 \r\n\t\t);\r\n\r\n\t\tgradient.addColorStop( 0, 'rgba(255, 255, 255, 0.8)');\r\n\t\tgradient.addColorStop( 0, 'rgba(190, 190, 190, 0.5)');\r\n\t\tgradient.addColorStop( 0.25, 'rgba(100, 100, 100, 0.6)');\r\n\t\tgradient.addColorStop( 0.5, 'rgba(100, 100, 100, 0.35)');\r\n\t\tgradient.addColorStop( 1.0, 'rgba(0, 0, 0, 0.25)');\r\n\r\n\t\tcontext.fillStyle = gradient;\r\n\t\tcontext.fillRect( 0, 0, canvas.width, canvas.height );\r\n\r\n\t\tvar texture = new THREE.Texture(canvas); \r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\r\n\tgalaxyPlaneTexture: function(){\r\n\r\n\t\t// create the star texture\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = 256;\r\n\t\t\t\tcanvas.height = 256;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\r\n\t\tvar gradient = context.createRadialGradient( \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\t0, \r\n\t\t\tcanvas.width / 2, \r\n\t\t\tcanvas.height / 2, \r\n\t\t\tcanvas.width / 2 \r\n\t\t);\r\n\r\n\t\t// the galaxy should hav white color in the center and outside blue\r\n\r\n\t\t// yellow galaxy colors\r\n\t\t//gradient.addColorStop( 0, 'rgba(255, 255, 255, 0.95)');\r\n\t\t//gradient.addColorStop( 0.1, 'rgba(205, 205, 224, 0.9)');\r\n\t\t//gradient.addColorStop( 0.5, 'rgba(125, 100, 0, 0.75)' );\r\n\t\t//gradient.addColorStop( 1.0, 'rgba(0,0,0,0.5)' );\r\n\r\n\t\t// blue galaxy colors\r\n\t\tgradient.addColorStop( 0, 'rgba(255, 255, 255, 0.95)');\r\n\t\tgradient.addColorStop( 0.2, 'rgba(189, 217, 231, 0.8)');\r\n\t\tgradient.addColorStop( 0.3, 'rgba(189, 217, 231, 0.6)');\r\n\t\tgradient.addColorStop( 0.35, 'rgba(189, 217, 231, 0.8)');\r\n\t\tgradient.addColorStop( 0.42, 'rgba(189, 217, 231, 0.6)');\r\n\t\tgradient.addColorStop( 0.70, 'rgba(189, 217, 231, 0.65)');\r\n\t\tgradient.addColorStop( 1.0, 'rgba(32, 65, 75, 0.0)');\r\n\r\n\t\tcontext.fillStyle = gradient;\r\n\t\tcontext.fillRect( 0, 0, canvas.width, canvas.height );\r\n\r\n\t\tvar texture = new THREE.Texture(canvas); \r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\r\n\t// taken from http://www.fascinatedwithsoftware.com/blog/post/2012/11/03/How-to-Draw-a-Star-with-HTML5.aspx\r\n\tdrawStar: function(xCenter, yCenter, nPoints, outerRadius, innerRadius) {\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = 256;\r\n\t\t\t\tcanvas.height = 256;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t  \t\tcontext.beginPath();\r\n\r\n\t  for (var ixVertex = 0; ixVertex <= 2 * nPoints; ++ixVertex) {\r\n\t    var angle = ixVertex * Math.PI / nPoints - Math.PI / 2;\r\n\t    var radius = ixVertex % 2 == 0 ? outerRadius : innerRadius;\r\n\r\n\t    context.lineTo(xCenter + radius * Math.cos(angle), yCenter + radius * Math.sin(angle));\r\n\t  }\r\n\r\n\t  var texture = new THREE.Texture(canvas); \r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n  },\r\n\r\n  drawCircle: function(){\r\n\r\n  \tvar canvas = document.createElement('canvas');\r\n  \t\t\tcanvas.width = 256;\r\n\t\t\t\tcanvas.height = 256;\r\n\r\n    var context = canvas.getContext('2d');\r\n    var centerX = canvas.width / 2;\r\n    var centerY = canvas.height / 2;\r\n    var radius = 20;\r\n\r\n  \tcontext.beginPath();\r\n    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n    context.fillStyle = 'green';\r\n    context.fill();\r\n    context.lineWidth = 5;\r\n    context.strokeStyle = '#003300';\r\n    context.stroke();\r\n\r\n    context.fillRect( 0, 0, canvas.width, canvas.height );\r\n\r\n   \tvar texture = new THREE.Texture(canvas); \r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\treturn texture;\r\n  }\r\n  \r\n\r\n});\r\n","window.utils = {\r\n\r\n\trand: function( a, b ) {\r\n\t  return a + Math.random() * ( b - a );\r\n\t},\r\n\r\n\trenderStats: function( container ) {\r\n\r\n\t\t// add Stats.js - https://github.com/mrdoob/stats.js\r\n\t\tthis.stats = new Stats();\r\n\r\n\t\t$(this.stats.domElement).css({\r\n\t\t\t'position': 'absolute',\r\n\t\t\t'bottom': '0px',\r\n\t\t\t'z-index': 99\r\n\t\t});\r\n\r\n\t\tif( container )\r\n\t\t\tcontainer.append( this.stats.domElement );\r\n\t\telse\r\n\t\t\t$('body').append( this.stats.domElement );\r\n\r\n\t},\r\n\r\n\t// see: https://gist.github.com/trongthanh/1294618\r\n\tproject3DTo2D: function( vector, app ){\r\n\t\t\r\n\t\t// project vector from 3d to 2d\r\n\t\tvar pos3D = new THREE.Vector3(vector.x, vector.y, vector.z);\r\n\t\tvar pos2D = app.projector.projectVector( pos3D, app.camera );\r\n\r\n\t\t// set the screen dimensions depending on the current window dimensions\r\n\t\tpos2D.x = (pos2D.x + 1)/2 * window.innerWidth;\r\n\t\tpos2D.y = - (pos2D.y - 1)/2 * window.innerHeight;\r\n\r\n\t\treturn pos2D;\r\n\t},\r\n\r\n\t// taken from: https://github.com/mrdoob/three.js/issues/78\r\n\ttoScreenXY: function ( position, camera ) {\r\n\r\n\t    var pos = position.clone();\r\n\t    projScreenMat = new THREE.Matrix4();\r\n\t    projScreenMat.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t    // projScreenMat.multiplyVector3( pos );\r\n\r\n\t    pos.applyMatrix4( projScreenMat );\r\n\r\n\t    return { \r\n\t    \tx: ( pos.x + 1 ),\r\n\t      y: ( - pos.y + 1)\r\n\t    };\r\n\r\n\t},\r\n\r\n\t// see: http://stackoverflow.com/questions/15248872/dynamically-create-2d-text-in-three-js\r\n\ttoXYCoords: function(pos, camera, projector) {\r\n\t\tcamera.updateMatrixWorld();\r\n\t\tpos = position.getPositionFromMatrix( pos.matrixWorld );\r\n\t\tvar vector = projector.projectVector(pos.clone(), camera);\r\n\t\tvector.x = (vector.x + 1)/2 * window.innerWidth;\r\n\t\tvector.y = -(vector.y - 1)/2 * window.innerHeight;\r\n\t\treturn vector;\r\n\t},\r\n\r\n\t// project a 3D vector to a 2D vector depending on the camera angle\r\n\tproject2D: function(mesh, app) {\r\n\r\n\t\tapp.scene.updateMatrixWorld(true);\r\n\r\n\t\tposition = new THREE.Vector3();\r\n\t\tpos = position.getPositionFromMatrix( mesh.matrixWorld );\r\n\t\t\r\n\t\tapp.camera.updateMatrixWorld(true);\r\n\r\n\t\t// var vector = app.projector.projectVector(pos.clone(), app.camera);\r\n\t\tvar vector = app.projector.projectVector(pos.clone(), app.camera);\r\n\r\n\t\tvector.x = (vector.x + 1)/2 * window.innerWidth;\r\n\t\tvector.y = -(vector.y - 1)/2 * window.innerHeight;\r\n\r\n\t\treturn vector;\r\n\t},\r\n\r\n\t// get the distance between two vectors in the scene\r\n\t// taken from http://ptn.github.io/kepler/app/kepler.js\r\n\tgetDistance: function( vector1, vector2 ) {\r\n\t\tvar x = vector1.x - vector2.x;\r\n\t  var y = vector1.y - vector2.y;\r\n\t  var z = vector1.z - vector2.z;\r\n\t  \r\n\t  return Math.sqrt(x * x + y * y + z * z);\r\n\t},\r\n\r\n\r\n\tgetDimensionToTen: function( min, max ) {\r\n\r\n\t\tvar size = Math.ceil( max * 100000 ) / 100000;\r\n\r\n\t\tif( max < 0.001 )\r\n\t\t\tsize = Math.ceil( max * 10000 ) / 10000;\r\n\t\telse if( max < 0.01 )\r\n\t\t\tsize = Math.ceil( max * 1000 ) / 1000;\r\n\t\telse if( max < 0.1 )\r\n\t\t\tsize = Math.ceil( max * 100 ) / 100;\r\n\t\telse if( max < 1 )\r\n\t\t\tsize = Math.ceil( max * 10 ) / 10;\r\n\r\n\t\telse {\r\n\t\t\tsize = Math.ceil( max );\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsize: size,\r\n\t\t\tmax: max,\r\n\t\t\tmin: min,\r\n\t\t\tminPercent: Math.round(min * 100 / size) / 100,\r\n\t\t\tmaxPercent: Math.round(max * 100 / size) / 100\r\n\t\t}\r\n\r\n\t},\r\n\r\n\r\n\t// taken from: http://zachberry.com/blog/tracking-3d-objects-in-2d-with-three-js/\r\n\tgetPosition2D: function( object, camera, projector){\r\n\r\n\t\tvar p, v, percX, percY, left, top;\r\n\r\n\t\t// this will give us position relative to the world\r\n\t\tp = object.position.clone();\r\n\r\n\t\t// projectVector will translate position to 2d\r\n\t\tv = projector.projectVector(p, camera);\r\n\r\n\t\t// Pick a point in front of the camera in camera space:\r\n\t\tvar pLocal = new THREE.Vector3(0, 0, -1);\r\n\r\n\t\t// Now transform that point into world space:\r\n\t\tvar pWorld = pLocal.applyMatrix4( camera.matrixWorld );\r\n\t\t\r\n\t\t// You can now construct the desired direction vector:\r\n\t\tvar dir = pWorld.sub( camera.position ).normalize();\r\n\r\n\t\tvar scalar = (p.x - camera.position.x) / dir.x;\r\n\t\t//console.log( scalar );\r\n\r\n\t  if(scalar < 0) {\r\n\t  \t//console.log('object behind camera');\r\n\t  \treturn false; //this means the point was behind the camera, so discard\r\n\t  }\r\n\t\t//console.log( v );\r\n\r\n\t\t// translate our vector so that percX=0 represents\r\n\t\t// the left edge, percX=1 is the right edge,\r\n\t\t// percY=0 is the top edge, and percY=1 is the bottom edge.\r\n\t\tpercX = (v.x + 1) / 2;\r\n\t\tpercY = (-v.y + 1) / 2;\r\n\r\n\t\t// scale these values to our viewport size\r\n\t\tleft = percX * window.innerWidth;\r\n\t\ttop = percY * window.innerHeight;\r\n\r\n\t\treturn { x: left, y: top };\r\n\t},\r\n\r\n\t// taken from: http://stackoverflow.com/questions/3177855/how-to-format-numbers-similar-to-stack-overflow-reputation-format\r\n\tnumberFormat: function(number) {\r\n\t\tvar repString = number.toString();\r\n\r\n\t  if ( number < 1000 ) {\r\n\t\t\trepString = number;\r\n\t  } else if ( number < 1000000 ) {\r\n\t\t\trepString = (Math.round((number / 1000) * 10) / 10) + ' K'\r\n\t  } else if ( number < 1000000000 ) {\r\n\t\t\trepString = (Math.round((number / 1000000) * 10) / 10) + ' Mio'\r\n\t  } else if ( number < 1000000000000000000 ) {\r\n\t\t\trepString = (Math.round((number / 1000000000) * 10) / 10) + ' Bio'\r\n\t  }\r\n\r\n\t  return repString;\r\n\t},\r\n\r\n\t// takes a hex string (6 characters) and returns rgb components as object\r\n\thexToRGB: function( hex ){\r\n\r\n\t\tvar r = parseInt( hex.substring(0,2), 16);\r\n\t\tvar g = parseInt( hex.substring(2,4), 16);\r\n\t\tvar b = parseInt( hex.substring(4,6), 16);\r\n\r\n\t\treturn rgb = {\r\n\t\t\tr: r,\r\n\t\t\tg: g,\r\n\t\t\tb: b\r\n\t\t}\r\n\t},\r\n\r\n\t// taken from: http://www.html5canvastutorials.com/labs/html5-canvas-text-along-arc-path/\r\n\tdrawTextAlongArc: function( context, str, centerX, centerY, radius, angle ) {\r\n\t  var len = str.length, s;\r\n\t  context.save();\r\n\t  context.translate(centerX, centerY);\r\n\t  context.rotate(-1 * angle / 2);\r\n\t  context.rotate(-1 * (angle / len) / 2);\r\n\t  for(var n = 0; n < len; n++) {\r\n\t    context.rotate(angle / len);\r\n\t    context.save();\r\n\t    context.translate(0, -1 * radius);\r\n\t    s = str[n];\r\n\t    context.fillText(s, 0, 0);\r\n\t    context.restore();\r\n\t  }\r\n\t  context.restore();\r\n\t},\r\n\r\n\r\n\t// taken from: http://jsfiddle.net/Brfp3/3/\r\n\ttextCircle: function(ctx, text, x, y, radius, space, top){\r\n\t   space = space || 0;\r\n\t   var numRadsPerLetter = (Math.PI - space * 2) / text.length;\r\n\t   ctx.save();\r\n\t   ctx.translate(x,y);\r\n\t   var k = (top) ? 1 : -1; \r\n\t   ctx.rotate(-k * ((Math.PI - numRadsPerLetter) / 2 - space));\r\n\t   for(var i=0;i<text.length;i++){\r\n\t      ctx.save();\r\n\t      ctx.rotate(k*i*(numRadsPerLetter));\r\n\t      ctx.textAlign = \"center\";\r\n\t     \tctx.textBaseline = (!top) ? \"top\" : \"bottom\";\r\n\t     \tctx.fillText(text[i],0,-k*(radius));\r\n\t      ctx.restore();\r\n\t   }\r\n\t   ctx.restore();\r\n\t},\r\n\r\n\r\n\tgetRandomRange: function(min, max) {\r\n\t  return Math.random() * (max - min) + min;\r\n\t},\r\n\r\n\tmakeDistance: function( distance, distanceType ) {\r\n\r\n\t\tif (distanceType.toLowerCase() == 'ly') {\r\n\t\t\treturn (distance * window.settings.LY / window.settings.distancePixelRatio);\r\n\t\t}\t\r\n\r\n\t\tif (distanceType.toLowerCase() == 'au') {\r\n\t\t\treturn (distance * window.settings.AU / window.settings.distancePixelRatio);\r\n\t\t}\r\n\r\n\t\telse\r\n\t\t\tconsole.log('wrong distance type');\r\n\t},\r\n\r\n\ttoggleInclination: function( meshes ){\r\n\t\t_.each( this.meshes, function( mesh, idx ) {\r\n\t\t\tif( mesh.properties.type != 'star' )\r\n\t\t\t\tmesh.rotation.set(0, 0, 0);\r\n\t\t});\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","var Model = require('./model');\r\n\r\nmodule.exports = Model.extend({\r\n\r\n\tintitialize : function(values){\r\n\t\tModel.prototype.initialize.call(this, values);\r\n\t}\r\n\r\n});","// Base class for all models.\nmodule.exports = Backbone.Model.extend({\n  initialize: function(values){\n    Backbone.Model.prototype.initialize.call(this, values);\n  },\n\n  // Generates a JSON representation of this model\n  toJSON: function(){\n    var data = Backbone.Model.prototype.toJSON.call(this);\n    return data;\n  }\n\n});\n","\r\nmodule.exports = Backbone.Model.extend({\r\n\r\n  initialize: function( options ){\r\n\r\n    // define the position of the particle\r\n\t\tthis.position = options.vector;\r\n\r\n\t\t// initialize size with init value\r\n\t\tthis.size = 256;\r\n\r\n\t\t// field for additional \r\n\t\tthis.properties = {};\r\n  }\r\n\r\n});\r\n","var Model = require('./model');\r\n\r\nmodule.exports = Model.extend({\r\n\r\n\tintitialize : function(values){\r\n\t\tModel.prototype.initialize.call(this, values);\r\n\t}\r\n\r\n});","\r\nvar Model = require('./model');\r\n\r\nmodule.exports = Model.extend({\r\n\r\n\tintitialize : function(values){\r\n\t\t\r\n\t\t_.bindAll(this, 'getData');\r\n\r\n\t\t// Model.prototype.initialize.call(this, values);\r\n\t},\r\n\r\n\tdefaults: {\r\n\t\tname: 'Solarsystem',\r\n\t\tradius: 100000,\r\n\t\tstars: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Sun',\r\n\t\t\t\ttype: 'star',\r\n\t\t\t\tradius: 1,\r\n\t\t\t\tspec: 'G',\r\n\t\t\t\tdist: 0.000015813,\r\n\t\t\t\ttemp: 5777,\r\n\t\t\t\tminhz: 0.950,\r\n\t\t\t\tmaxhz: 1.670,\r\n\t\t\t\trotationPeriod: 24.47,\r\n\t\t\t\tplanets: 8,\r\n\t\t\t\ttexture: 'sun.png'\r\n\t\t\t}\r\n\t\t],\r\n\t\tsatellites: [\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Mercury',\r\n\t\t\t\ttype: 'planet',\r\n\t\t\t\tradius: 2439.7,\r\n\t\t\t\t//position: [750, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 57909100,\r\n\t\t\t\teccentricity: 0.2056,\r\n\t\t\t\tinclination: 7.00,\r\n\t\t\t\tsiderealOrbitPeriod: 87.969,\r\n\t\t\t\trotationPeriod: 0,\r\n\t\t\t\tlongitudeAscendingNode: 48.331,\r\n\r\n\t\t\t\ttemp: 440,\r\n\t\t\t\tmasse: 0.055,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.596,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'observation',\r\n\t\t\t\tyear: '1400 BC',\r\n\r\n\t\t\t\ttexture: 'mercury.jpg',\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Venus',\r\n\t\t\t\ttype: 'planet',\r\n\t\t\t\tradius: 6051.8,\r\n\t\t\t\t//position: [750, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 108208000,\r\n\t\t\t\teccentricity: 0.0068,\r\n\t\t\t\tinclination: 3.395,\r\n\t\t\t\tsiderealOrbitPeriod: 224.701,\r\n\t\t\t\trotationPeriod: 243.0185,\r\n\t\t\t\trotationClockwise: false,\r\n\t\t\t\tlongitudeAscendingNode: 76.678,\r\n\r\n\t\t\t\torbit_color: 0xf4a460,\r\n\r\n\t\t\t\ttemp: 737,\r\n\t\t\t\tmasse: 0.815,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.444,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'observation',\r\n\t\t\t\tyear: '1645 BC',\r\n\r\n\t\t\t\torbitSpeed: 360,\r\n\t\t\t\ttexture: 'venus.jpg',\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Earth',\r\n\t\t\t\ttype: 'planet',\r\n\t\t\t\tradius: 6371,\r\n\t\t\t\tposition: [1000, 0, 0],\r\n\t\t\t\trotationSpeed: 1,\r\n\r\n\t\t\t\t// in km (proximation)\r\n\t\t\t\tsemiMajorAxis: 149600000,\r\n\t\t\t\teccentricity: 0.0167,\r\n\r\n\t\t\t\t// in earth days\r\n\t\t\t\tsiderealOrbitPeriod: 365.256,\r\n\r\n\t\t\t\t// degrees\r\n\t\t\t\tinclination: 0.0,\r\n\r\n\t\t\t\t// in hours min sec\r\n\t\t\t\trotationPeriod: 1,\r\n\r\n\t\t\t\t// steelblue\r\n\t\t\t\torbit_color: 0x4682b4,\r\n\r\n\t\t\t\ttemp: 288,\r\n\t\t\t\tmasse: 1,\r\n\t\t\t\thabitable: 1,\r\n\t\t\t\tesi: 1,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: '-',\r\n\t\t\t\tyear: '-',\r\n\r\n\t\t\t\ttexture: 'earth.jpg',\r\n\t\t\t\tsatellites: [\r\n\t\t\t\t\t{ // finish\r\n\t\t\t\t\t\tname: 'Moon',\r\n\t\t\t\t\t\ttype: 'moon',\r\n\t\t\t\t\t\tradius: 1737.10,\r\n\t\t\t\t\t\tposition: [120, 0, 0],\r\n\t\t\t\t\t\tisSatellite: true,\r\n\t\t\t\t\t\trotationSpeed: 1,\r\n\t\t\t\t\t\t// from earth\r\n\t\t\t\t\t\tsemiMajorAxis: 3843990,\r\n\t\t\t\t\t\teccentricity: 0.0549,\r\n\t\t\t\t\t\tinclination: 18.29,\r\n\t\t\t\t\t\tsiderealOrbitPeriod: 27.321582,\r\n\r\n\t\t\t\t\t\ttemp: 288,\r\n\t\t\t\t\t\tmasse: 1,\r\n\t\t\t\t\t\thabitable: 0,\r\n\t\t\t\t\t\tesi: 0.559,\r\n\t\t\t\t\t\thabitableMoon: 0,\r\n\t\t\t\t\t\tmethod: '-',\r\n\t\t\t\t\t\tyear: '-',\r\n\r\n\t\t\t\t\t\tcolor: [56,56,56],\r\n\t\t\t\t\t\ttexture: 'moon.jpg'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Mars',\r\n\t\t\t\ttype: 'planet',\r\n\t\t\t\tradius: 3396.2,\r\n\t\t\t\tposition: [1400, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 227939100,\r\n\t\t\t\teccentricity: 0.0935,\r\n\t\t\t\tinclination: 1.85,\r\n\t\t\t\tsiderealOrbitPeriod: 686.980,\r\n\t\t\t\trotationPeriod: 1.025957,\r\n\t\t\t\tlongitudeAscendingNode: 49.562,\r\n\r\n\t\t\t\torbit_color: 0xff7f50,\r\n\r\n\t\t\t\ttemp: 210,\r\n\t\t\t\tmasse: 0.10745,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.697,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: '-',\r\n\t\t\t\tyear: '-',\r\n\r\n\t\t\t\ttexture: 'mars.jpg'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: 'Jupiter',\r\n\t\t\t\ttype: 'planet',\r\n\t\t\t\tradius: 69911,\r\n\t\t\t\tposition: [2100, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 778500000,\r\n\t\t\t\teccentricity: 0.0484,\r\n\t\t\t\tinclination: 1.305,\r\n\t\t\t\tsiderealOrbitPeriod: 4332.59,\r\n\t\t\t\trotationPeriod: 9.925,\r\n\r\n\t\t\t\torbit_color: 0xf5deb3,\r\n\r\n\t\t\t\ttemp: 165,\r\n\t\t\t\tmasse: 317.84,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.292,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'observation',\r\n\t\t\t\tyear: '> 3000 BC',\r\n\r\n\t\t\t\ttexture: 'jupiter.jpg',\r\n\r\n\t\t\t\tsatellites: [\r\n\t\t\t\t\t{ // finish\r\n\t\t\t\t\t\tname: 'Io',\r\n\t\t\t\t\t\ttype: 'moon',\r\n\t\t\t\t\t\tisSatellite: true,\r\n\r\n\t\t\t\t\t\tradius: 3643/2,\r\n\t\t\t\t\t\trotationSpeed: 1, // synchronous\r\n\t\t\t\t\t\tsemiMajorAxis: 421800,\r\n\t\t\t\t\t\teccentricity: 0.004,\r\n\t\t\t\t\t\tinclination: 0.036,\r\n\t\t\t\t\t\tsiderealOrbitPeriod: 1.77,\r\n\r\n\t\t\t\t\t\ttemp: 110,\r\n\t\t\t\t\t\tmasse: 0.015,\r\n\t\t\t\t\t\thabitable: 0,\r\n\t\t\t\t\t\tesi: 0.362,\r\n\t\t\t\t\t\thabitableMoon: 0,\r\n\t\t\t\t\t\tmethod: 'telescope',\r\n\t\t\t\t\t\tyear: '1610',\r\n\r\n\t\t\t\t\t\ttexture: 'io.jpg',\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{ // finish\r\n\t\t\t\t\t\tname: 'Europa',\r\n\t\t\t\t\t\ttype: 'moon',\r\n\t\t\t\t\t\tisSatellite: true,\r\n\r\n\t\t\t\t\t\tradius: 3122/2,\r\n\t\t\t\t\t\trotationSpeed: 1,\r\n\t\t\t\t\t\tsemiMajorAxis: 6711000,\r\n\t\t\t\t\t\teccentricity: 0.009,\r\n\t\t\t\t\t\tinclination: 0.467,\r\n\t\t\t\t\t\tsiderealOrbitPeriod: 3.55,\r\n\r\n\t\t\t\t\t\ttemp: 102,\r\n\t\t\t\t\t\tmasse: 0.008,\r\n\t\t\t\t\t\thabitable: 0,\r\n\t\t\t\t\t\tesi: 0.262,\r\n\t\t\t\t\t\thabitableMoon: 0,\r\n\t\t\t\t\t\tmethod: 'telescope',\r\n\t\t\t\t\t\tyear: '1610',\r\n\r\n\t\t\t\t\t\ttexture: 'moon.jpg'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{ // finish\r\n\t\t\t\t\t\tname: 'Ganymede',\r\n\t\t\t\t\t\ttype: 'moon',\r\n\t\t\t\t\t\tisSatellite: true,\r\n\r\n\t\t\t\t\t\tradius: 5262/2,\r\n\t\t\t\t\t\trotationSpeed: 1,\r\n\t\t\t\t\t\tsemiMajorAxis: 10704000,\r\n\t\t\t\t\t\teccentricity: 0.001,\r\n\t\t\t\t\t\tinclination: 0.20,\r\n\t\t\t\t\t\tsiderealOrbitPeriod: 7.16,\r\n\r\n\t\t\t\t\t\ttemp: 110,\r\n\t\t\t\t\t\tmasse: 0.025,\r\n\t\t\t\t\t\thabitable: 0,\r\n\t\t\t\t\t\tesi: 0.289,\r\n\t\t\t\t\t\thabitableMoon: 0,\r\n\t\t\t\t\t\tmethod: 'telescope',\r\n\t\t\t\t\t\tyear: '1610',\r\n\r\n\t\t\t\t\t\ttexture: 'moon.jpg'\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{ // finish\r\n\t\t\t\t\t\tname: 'Callisto',\r\n\t\t\t\t\t\ttype: 'moon',\r\n\t\t\t\t\t\tisSatellite: true,\r\n\r\n\t\t\t\t\t\tradius: 4821/2,\r\n\t\t\t\t\t\trotationSpeed: 1,\r\n\t\t\t\t\t\tsemiMajorAxis: 18827000,\r\n\t\t\t\t\t\teccentricity: 0.007,\r\n\t\t\t\t\t\tinclination: 0.307,\r\n\t\t\t\t\t\tsiderealOrbitPeriod: 16.69,\r\n\r\n\t\t\t\t\t\ttemp: 134,\r\n\t\t\t\t\t\tmasse: 0.018,\r\n\t\t\t\t\t\thabitable: 0,\r\n\t\t\t\t\t\tesi: 0.338,\r\n\t\t\t\t\t\thabitableMoon: 0,\r\n\t\t\t\t\t\tmethod: 'telescope',\r\n\t\t\t\t\t\tyear: '1610',\r\n\r\n\t\t\t\t\t\ttexture: 'moon.jpg'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Saturn',\r\n\t\t\t\ttype: 'planet',\r\n\t\t\t\tradius: 60268,\r\n\t\t\t\tposition: [2500, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 1433449370,\r\n\t\t\t\teccentricity: 0.05648,\r\n\t\t\t\tinclination: 2.484,\r\n\t\t\t\tsiderealOrbitPeriod: 10759.22,\r\n\t\t\t\t\r\n\t\t\t\torbit_color: 0xDAB384,\r\n\t\t\t\t\r\n\t\t\t\ttemp: 135,\r\n\t\t\t\tmasse: 95.169,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.246,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'observation',\r\n\t\t\t\tyear: '> 3000 BC',\r\n\r\n\t\t\t\ttexture: 'saturn.jpg',\r\n\t\t\t\tsatellites: [\r\n\t\t\t\t\t{ // finish\r\n\t\t\t\t\t\tname: 'Titan',\r\n\t\t\t\t\t\ttype: 'moon',\r\n\t\t\t\t\t\tisSatellite: true,\r\n\r\n\t\t\t\t\t\tradius: 2576,\t\t\t\t\t\r\n\t\t\t\t\t\trotationSpeed: 1,\r\n\t\t\t\t\t\tsemiMajorAxis: 1221870,\r\n\t\t\t\t\t\teccentricity: 0.0288,\r\n\t\t\t\t\t\tinclination: 0.34854,\r\n\t\t\t\t\t\tsiderealOrbitPeriod: 15.945,\r\n\r\n\t\t\t\t\t\ttemp: 93.7,\r\n\t\t\t\t\t\tmasse: 0.0225,\r\n\t\t\t\t\t\thabitable: 0,\r\n\t\t\t\t\t\tesi: 0.242,\r\n\t\t\t\t\t\thabitableMoon: 0,\r\n\t\t\t\t\t\tmethod: 'telescope',\r\n\t\t\t\t\t\tyear: '1655',\r\n\r\n\t\t\t\t\t\tcolor: [56,56,56],\r\n\t\t\t\t\t\ttexture: 'moon.jpg'\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Uranus',\r\n\t\t\t\ttype: 'planet',\r\n\t\t\t\tradius: 25559,\r\n\t\t\t\tposition: [3100, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 2876679082,\r\n\t\t\t\teccentricity: 0.0472,\r\n\t\t\t\tinclination: 0.770,\r\n\t\t\t\tsiderealOrbitPeriod: 30799.095,\r\n\t\t\t\t\t\r\n\t\t\t\torbit_color: 0xD3FAF9,\r\n\r\n\t\t\t\ttemp: 76,\r\n\t\t\t\tmasse: 14.539,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.187,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'teleskope',\r\n\t\t\t\tyear: '1781',\r\n\r\n\t\t\t\tcolor: [0,135,213],\r\n\t\t\t\ttexture: 'uranus.jpg',\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Neptune',\r\n\t\t\t\ttype: 'planet',\r\n\t\t\t\tradius: 24764,\r\n\t\t\t\tposition: [3600, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 4503443661,\r\n\t\t\t\teccentricity: 0.0113,\r\n\t\t\t\tinclination: 1.769,\r\n\t\t\t\tsiderealOrbitPeriod: 60190.03,\r\n\r\n\t\t\t\torbit_color: 0x5D8CE4,\r\n\r\n\t\t\t\ttemp: 73,\r\n\t\t\t\tmasse: 17.149,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.184,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'telescope',\r\n\t\t\t\tyear: '1846',\r\n\t\t\t\t\r\n\t\t\t\ttexture: 'neptune.jpg',\r\n\t\t\t},\r\n\r\n\t\t\t// dwarf planets\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Ceres',\r\n\t\t\t\ttype: 'dwarf-planet',\r\n\t\t\t\tradius: 487.3,\r\n\r\n\t\t\t\tsemiMajorAxis: 413910000,\r\n\t\t\t\teccentricity: 0.075797,\r\n\t\t\t\tinclination: 10.593,\r\n\t\t\t\tsiderealOrbitPeriod: 1680.99,\r\n\t\t\t\tlongitudeAscendingNode: 80.3276,\r\n\r\n\t\t\t\ttemp: 168,\r\n\t\t\t\tmasse: 0.00015,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.271,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'telescope',\r\n\t\t\t\tyear: '1801',\r\n\r\n\t\t\t\ttexture: 'moon.jpg',\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Pluto',\r\n\t\t\t\ttype: 'dwarf-planet',\r\n\t\t\t\tradius: 1153,\r\n\t\t\t\tposition: [3600, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 5908994718,\r\n\t\t\t\teccentricity: 0.248807,\r\n\t\t\t\tinclination: 11.88,\r\n\t\t\t\tsiderealOrbitPeriod: 90465,\r\n\t\t\t\tlongitudeAscendingNode: 110.28683,\r\n\r\n\t\t\t\ttemp: 44,\r\n\t\t\t\tmasse: 0.00218,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.075,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'telescope',\r\n\t\t\t\tyear: '1930',\r\n\r\n\t\t\t\ttexture: 'pluto.jpg',\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Eris',\r\n\t\t\t\ttype: 'dwarf-planet',\r\n\t\t\t\tradius: 1163,\r\n\t\t\t\tposition: [3600, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 10194533900,\r\n\t\t\t\teccentricity: 0.437083,\r\n\t\t\t\tinclination: 43.8853,\r\n\t\t\t\tsiderealOrbitPeriod: 205467.7296,\r\n\t\t\t\tlongitudeAscendingNode: 36.031,\r\n\r\n\t\t\t\ttemp: 42.5,\r\n\t\t\t\tmasse: 0.0028,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.054,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'telescope',\r\n\t\t\t\tyear: '2005',\r\n\r\n\t\t\t\ttexture: 'moon.jpg',\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Haumea',\r\n\t\t\t\ttype: 'dwarf-planet',\r\n\t\t\t\tradius: 718,\r\n\t\t\t\tposition: [3600, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: 6483870900,\r\n\t\t\t\teccentricity: 0.19501,\r\n\t\t\t\tinclination: 28.22,\r\n\t\t\t\tsiderealOrbitPeriod: 103468,\r\n\t\t\t\trotationPeriod: 0.163146,\r\n\t\t\t\tlongitudeAscendingNode: 121.10,\r\n\r\n\t\t\t\ttemp: 50,\r\n\t\t\t\tmasse: 0.00066,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.091,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'telescope',\r\n\t\t\t\tyear: '2004',\r\n\r\n\t\t\t\ttexture: 'moon.jpg',\r\n\t\t\t},\r\n\t\t\t{\t// finish\r\n\t\t\t\tname: 'Makemake',\r\n\t\t\t\ttype: 'dwarf-planet',\r\n\t\t\t\tradius: 739,\r\n\r\n\t\t\t\tsemiMajorAxis: (6.8306 * Math.pow(10,9)),\r\n\t\t\t\teccentricity: 0.159,\r\n\t\t\t\tinclination: 28.96,\r\n\t\t\t\tsiderealOrbitPeriod: 113183,\r\n\t\t\t\trotationPeriod: 0.32379167,\r\n\t\t\t\tlongitudeAscendingNode: 79.382,\r\n\r\n\t\t\t\ttemp: 36,\r\n\t\t\t\tmasse: null,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.043,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'telescope',\r\n\t\t\t\tyear: '2005',\r\n\r\n\t\t\t\ttexture: 'moon.jpg',\r\n\t\t\t},\r\n\t\t\t{ // finish\r\n\t\t\t\tname: 'Sedna',\r\n\t\t\t\ttype: 'dwarf-planet',\r\n\t\t\t\tradius: 498,\r\n\t\t\t\tposition: [3600, 0, 0],\r\n\r\n\t\t\t\tsemiMajorAxis: (7.7576 * Math.pow(10,10)),\r\n\t\t\t\teccentricity: 0.8527,\r\n\t\t\t\tinclination: 11.927,\r\n\t\t\t\tsiderealOrbitPeriod: 4161000,\r\n\t\t\t\trotationPeriod: 0.42,\r\n\t\t\t\tlongitudeAscendingNode: 144.26,\r\n\r\n\t\t\t\ttemp: 12,\r\n\t\t\t\tmasse: 0.000167336,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.013,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'telescope',\r\n\t\t\t\tyear: '2003',\r\n\r\n\t\t\t\ttexture: 'moon.jpg',\r\n\t\t\t},\r\n\r\n\t\t\t// comets\r\n\t\t\t{\t\r\n\t\t\t\tname: 'Halley',\r\n\t\t\t\ttype: 'comet',\r\n\t\t\t\tradius: 7.5,\r\n\r\n\t\t\t\tsemiMajorAxis: 2667928426.0638,\r\n\t\t\t\teccentricity: 0.967,\r\n\t\t\t\tinclination: 162.262,\r\n\t\t\t\tsiderealOrbitPeriod: (75.32*365), // 75,32 years\r\n\t\t\t\tlongitudeAscendingNode: 58.42,\r\n\r\n\t\t\t\ttemp: 12,\r\n\t\t\t\tmasse: 0.000167336,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.0,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'night view',\r\n\t\t\t\tyear: '240 BC',\r\n\r\n\t\t\t\ttexture: 'moon.jpg',\r\n\t\t\t},\r\n\t\t\t{\t\r\n\t\t\t\tname: 'Tempel 1',\r\n\t\t\t\ttype: 'comet',\r\n\t\t\t\tradius: 7.5,\r\n\r\n\t\t\t\tsemiMajorAxis: 469751503,\r\n\t\t\t\teccentricity: 0.51159444,\r\n\t\t\t\tinclination: 10.50258430,\r\n\t\t\t\tsiderealOrbitPeriod: (5.5600*365), // 5.5600 years\r\n\t\t\t\tlongitudeAscendingNode: 68.8818134887,\r\n\r\n\t\t\t\ttemp: 12,\r\n\t\t\t\tmasse: 0.0,\r\n\t\t\t\thabitable: 0,\r\n\t\t\t\tesi: 0.0,\r\n\t\t\t\thabitableMoon: 0,\r\n\t\t\t\tmethod: 'telescope',\r\n\t\t\t\tyear: '1995',\r\n\r\n\t\t\t\ttexture: 'moon.jpg',\r\n\t\t\t}\r\n\r\n\t\t],\r\n\t\tasteroidbelt: [\r\n\t\t\t{\r\n\t\t\t\tname: 'Asteroid Belt',\r\n\t\t\t\ttype: 'asteroid-belt',\r\n\t\t\t\tmin: 2.06, // AU\r\n\t\t\t\tmax: 3.3\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\r\n\tgetData: function(){ \r\n\t\treturn this.defaults;\r\n\t},\r\n\r\n\ttoJSON: function(){ return this; }\r\n\r\n});","var Model = require('./model');\r\n\r\nmodule.exports = Model.extend({\r\n\r\n\tintitialize : function(values){\r\n\t\tModel.prototype.initialize.call(this, values);\r\n\t}\r\n\r\n});","var View = require('./view');\r\n\r\nvar PopupView = require('./popup_view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'animation-controls',\r\n  template: require('./templates/animation-controls'),\r\n\r\n  events: {\r\n    'click #btn-help': 'showHelp',\r\n  \t'click #btn-controls': 'toggleControlsContainer',\r\n    'click #play-pause-btn': 'pause',\r\n    'click .speed-btn': 'changeSpeed'\r\n  },\r\n\r\n  initialize: function( options ){\r\n    this.app = options.app;\r\n\r\n  \t_.bindAll(this, \r\n      'showHelp',\r\n      'toggleControlsContainer',\r\n      'pause',\r\n      'changeSpeed',\r\n      'afterRender'\r\n    );\r\n  \r\n  },\r\n\r\n  afterRender: function(){\r\n    var self = this;\r\n\r\n    console.log('intitializing slider');\r\n\r\n    $('#stars-distance-slider').slider({\r\n      range: true,\r\n      min: window.settings.stars.minDistance,\r\n      max: window.settings.stars.maxDistance,\r\n      step: 10,\r\n      values: [window.settings.stars.minDistance, window.settings.stars.maxDistance],\r\n      slide: function( event, ui ) {\r\n        $('#stars-distance-amount').text( ui.values[0] + ' - ' + ui.values[1] + ' LY');\r\n\r\n        window.settings.stars.minDistance = ui.values[0];\r\n        window.settings.stars.maxDistance = ui.values[1];\r\n\r\n        // remove all stars first\r\n       // App.scene.remove( App.particleStars );\r\n        //App.stars = [];\r\n        //App.particleStars = new ParticleStars( App, App.loadedStars);  \r\n        self.app.particleStars.filter();\r\n        //App.particleStars.filter();     \r\n      }\r\n    });\r\n\r\n  },\r\n\r\n  showHelp: function(){\r\n    var self = this;\r\n     new PopupView({ app:self.app, template: 'help'});\r\n  },\r\n\r\n  toggleControlsContainer: function(event){\r\n  \tthis.$('#animation-controls-container').toggle();\r\n  },\r\n\r\n  pause: function(e){\r\n    console.log('paused');\r\n\r\n    if (e !== undefined) {\r\n      var self = $(e.currentTarget);\r\n\r\n      if ( self.hasClass('paused') ) {\r\n        this.app.currentSpeed = this.app.defaultSpeed;\r\n        self.find('i').removeClass('fa-play');\r\n        self.find('i').addClass('fa-pause');\r\n        self.removeClass('paused');\r\n\r\n      } else {\r\n        this.app.currentSpeed = 0;\r\n        self.find('i').removeClass('fa-pause');\r\n        self.find('i').addClass('fa-play');\r\n        self.addClass('paused');\r\n      }\r\n    } else {\r\n      this.app.currentSpeed = 0;\r\n      $('#play-pause-btn').find('i').removeClass('fa-pause');\r\n      $('#play-pause-btn').find('i').addClass('fa-play');\r\n      $('#play-pause-btn').addClass('paused');\r\n    }\r\n    \r\n\r\n    $('.default-speed-btn').html( this.app.currentSpeed / this.app.defaultSpeed + '&times;');\r\n  },\r\n\r\n\r\n  changeSpeed: function(e){\r\n\r\n    if( $(e.currentTarget).attr('id') == 'speed-plus' ) {\r\n      this.app.currentSpeed *= 2;\r\n    } else {\r\n      this.app.currentSpeed /= 2;\r\n    }\r\n\r\n    console.log('set speed to', this.app.currentSpeed);\r\n\r\n    var newSpeed = this.app.currentSpeed / this.app.defaultSpeed;\r\n\r\n    if( newSpeed < 1 ) {\r\n      newSpeed = newSpeed.toFixed(4);\r\n    }\r\n\r\n    $('.default-speed-btn').html( newSpeed + '&times;');\r\n  },\r\n\r\n  defaultSpeed: function(){\r\n    console.log('set speed to', this.app.defaultSpeed);\r\n    this.app.currentSpeed = this.app.defaultSpeed;\r\n    $('.default-speed-btn').html( this.app.currentSpeed / this.app.defaultSpeed + '&times;');\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar Textures = require('lib/textures');\r\nvar Geometries = require('lib/geometries');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: null,\r\n  template: null,\r\n\r\n  initialize: function( options ){\r\n  \t// console.log( options );\r\n\r\n  \tthis.app = options.app;\r\n  \tthis.data = options.data;\r\n  \tthis.planetsystem = options.planetsystem;\r\n  \tthis.parentGroup = options.group;\r\n\r\n  \tthis.animationFunctions = [];\r\n  \tthis.texture = options.data.texture || false;\r\n\r\n  \t// orbit options\r\n\t\tthis.eccentricity = options.data.eccentricity || 0.0;\r\n\t\tthis.semiMajorAxis = options.data.semiMajorAxis || 1;\r\n\t\t//this.semiMinorAxis = this.semiMajorAxis * Math.sqrt( 1 - Math.pow(this.eccentricity, 2) );\r\n\t\tthis.inclination = options.data.inclination || 0;\r\n\r\n\t\tthis.rotationPeriod = options.data.rotationPeriod || null;\r\n\t\tthis.rotationClockwise = options.data.rotationClockwise;\r\n\t\tthis.longitudeAscendingNode = options.data.longitudeAscendingNode || 0;\r\n\r\n\t\t// assumed one erath year if not given\r\n\t\tthis.siderealOrbitPeriod = options.data.siderealOrbitPeriod || 365;\r\n\r\n  \tthis.radius = options.data.radius || window.settings.radiusEarth;\r\n  \t// console.log(this.radius);\r\n  \tif( this.data.type == 'planet' && this.radius < 1000 ) {\r\n\t\t\tthis.radius *= window.settings.radiusEarth;\r\n\t\t}\r\n\r\n\t\tif (this.data.confirmed == undefined)\r\n\t\t\tthis.data.confirmed = 1;\r\n\r\n  \t// used for longitude of the ascending node\r\n\t\tthis.referencePlane = new THREE.Object3D();\r\n\r\n\t\t// base plane holds the orbit ellipse and inclination\r\n\t\tthis.basePlane = new THREE.Object3D();\r\n\r\n\t\t// pivot holds the planet sphere shape\r\n\t  this.pivot = new THREE.Object3D();\r\n\r\n\t  // planet plane is used for additional objects like moons\r\n\t  // moons will be added as child objects to this group\r\n\t\tthis.objectPlane = new THREE.Object3D();\r\n\r\n  \tthis.referencePlane.add( this.basePlane );\r\n\t\tthis.basePlane.add(this.pivot);\r\n\t\tthis.pivot.add(this.objectPlane);\r\n\t\tthis.parentGroup.add( this.referencePlane );\r\n\r\n\t\tthis.color = new THREE.Color( window.settings.planets.defaultColor );\r\n\r\n\t\tif(options.data.color)\r\n\t\t\tthis.color.setRGB( options.data.color[0], options.data.color[1], options.data.color[2] );\r\n\r\n  \tthis.render();\r\n\t\tthis.renderOrbit();\r\n\t\tthis.prepareAnimations();\r\n\r\n\t\t_.bindAll(this, 'render');\r\n\r\n  \treturn this.object;\r\n  },\r\n\r\n  render: function() {\r\n  \tvar self = this;\r\n\r\n  \tvar geometry = new THREE.SphereGeometry( this.radius / window.settings.radiusPixelRatio, 32, 32 );\r\n\t\tvar material = new THREE.MeshLambertMaterial({ \r\n\t\t\tcolor: self.color.getHex()\r\n\t\t});\r\n\r\n\t\tvar planetTransparency = 1.0;\r\n\t\tif (!self.data.confirmed) {\r\n\t\t\tplanetTransparency = 0.25;\r\n\t\t}\r\n\t  if( self.texture ){\r\n\t  \tmaterial = new THREE.MeshLambertMaterial({\r\n\t\t    map: THREE.ImageUtils.loadTexture('img/materials/'+ self.texture + ''),\r\n\t\t    wireframe: false,\r\n\t\t    transparent: true,\r\n\t\t    opacity: planetTransparency\r\n\t\t  });\r\n\t  };\r\n\r\n\t  this.object = new THREE.Mesh(geometry, material);\r\n\t\tthis.object.name = self.data.name;\r\n\t\tthis.object.properties = {\r\n\t\t\tname: self.data.name,\r\n\t\t\trealName: self.realName,\r\n\t\t\tradius: self.radius.toFixed(2),\r\n\t\t\tdistance: (self.distance * window.settings.PC).toFixed(4),\r\n\t\t\tsiderealOrbitPeriod: self.siderealOrbitPeriod,\r\n\t\t\tsemiMajorAxis: self.semiMajorAxis,\r\n\t\t\teccentricity: self.eccentricity,\r\n\t\t\tinclination: self.inclination,\r\n\t\t\trotationPeriod: self.rotationPeriod,\r\n\t\t\timage: self.texture,\r\n\t\t\ttemparature: self.data.temp,\r\n\t\t\tmasse: self.data.masse,\r\n\t\t\thabitable: self.data.habitable,\r\n\t\t\tesi: self.data.esi,\r\n\t\t\thabitableMoon: self.data.habitableMoon,\r\n\t\t\tmethod: self.data.method,\r\n\t\t\tyear: self.data.year,\r\n\t\t\ttype: self.data.class,\r\n\t\t\ttempClass: self.data.tempClass,\r\n\t\t\tconfirmed: self.data.confirmed\r\n\t\t};\r\n\r\n\t\tthis.object.spaceRadius = self.radius / window.settings.radiusPixelRatio;\r\n\t\tthis.objectPlane.add(this.object);\r\n\t\tthis.planetsystem.meshes.push(this.object);\r\n\t\tthis.app.meshes.push(this.object);\r\n\r\n\t\tconsole.log('this one is a: ' + self.data.type);\r\n\r\n\t\tif ( self.data.type == 'planet' || self.data.type == 'dwarf-planet' || self.data.type == 'star' || self.data.type == 'comet' ) {\r\n\t\t\tvar labelView = new LabelView({ app: self.app, data: self.data, planetsystem: self.planetsystem });\r\n\t\t\t$('#labels').append(labelView.render().el);\r\n\t\t}\r\n\r\n\r\n\t\t// render planet moons\r\n\r\n\t\t/*\r\n\t\tif( self.satellites ) {\r\n\t\t\t_.each(self.satellites, function( satellite, index ){\r\n\r\n\t\t\t\tsatellite.parentGroup = self.objectPlane;\r\n\t\t\t\tsatellite.meshes = self.meshes;\r\n\t\t\t\tsatellite.orbits = self.orbits;\r\n\t\t\t\tsatellite.isSatellite = true;\r\n\t\t\t\tsatellite.orbitColor = self.orbitColor;\r\n\t\t\t\tsatellite.systemName = self.systemName;\r\n\r\n\t\t\t\tnew SpaceObjectView({\r\n\t\t\t\t\tapp: self.app,\r\n\t\t\t\t\tdata: satellite\r\n\t\t\t\t});\r\n\r\n\t\t\t});\t\r\n\t\t}\r\n\t\t*/\r\n\r\n  },\r\n\r\n  renderOrbit: function() {\r\n  \tvar self = this;\r\n\t  var circle = new THREE.Shape();\r\n\t  //circle.moveTo(this.position[0], 0);\r\n\r\n\t  if( this.eccentricity >= -1 ) {\r\n\r\n\t  \t// aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise\r\n\t\t\tvar ellipseCurve = new THREE.EllipseCurve(\r\n\t\t\t\t(self.eccentricity * 100 * self.semiMajorAxis / 100) / window.settings.distancePixelRatio,\r\n\t\t\t\t0,\r\n\t   \t\tself.semiMajorAxis / window.settings.distancePixelRatio, \r\n\r\n\t   \t\t// taken from http://en.wikipedia.org/wiki/Semi-minor_axis\r\n\t\t\t\t( self.semiMajorAxis * Math.sqrt(1 - Math.pow(self.eccentricity, 2) ) ) / window.settings.distancePixelRatio, \r\n\t    \t0, \r\n\t    \t2.0 * Math.PI,\r\n\t    \tfalse\r\n\t    );\r\n\r\n\t\t\tvar ellipseCurvePath = new THREE.CurvePath();\r\n\t\t\t\t\tellipseCurvePath.add(ellipseCurve);\r\n\r\n\t\t\tvar ellipseGeometry = ellipseCurvePath.createPointsGeometry(200);\r\n\t\t\t\t\tellipseGeometry.computeTangents();\r\n\r\n\t\t\t// render solid line\t\t\r\n\t\t\t/*\r\n\t\t\tvar orbitMaterial = new THREE.LineBasicMaterial({\r\n\t\t\t  color: window.settings.orbitColors[ App.systems.length ],\r\n\t\t\t  blending: THREE.AdditiveBlending,\r\n\t\t\t  depthTest: true,\r\n\t\t\t  depthWrite: false,\r\n\t\t\t  opacity: window.settings.orbitTransparency,\r\n\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t  transparent: true\r\n\t\t\t});\r\n\t\t\t*/\r\n\r\n\t\t\tvar orbitTransparency = window.settings.orbitTransparency;\r\n\t\t\tif (!self.data.confirmed) {\r\n\t\t\t\torbitTransparency = 0.25;\r\n\t\t\t}\r\n\r\n\t\t\tvar orbitColor = window.settings.orbitColors[ this.app.systems.length ];\r\n\t\t\tconsole.log('type', self.data.type);\r\n\t\t\tif (self.data.type == 'comet') {\r\n\t\t\t\torbitColor = 0x909090;\r\n\t\t\t}\r\n\r\n\t\t\t// render dashed line\r\n\t\t\tvar orbitMaterial = new THREE.LineDashedMaterial({\r\n\t\t\t  color: orbitColor,\r\n\t\t\t  blending: THREE.AdditiveBlending,\r\n\t\t\t  depthTest: true,\r\n\t\t\t  depthWrite: false,\r\n\t\t\t  opacity: orbitTransparency,\r\n\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t  transparent: true,\r\n\t\t\t  dashSize: window.settings.AU/10, \r\n\t\t\t  gapSize: window.settings.AU/10 \r\n\t\t\t});\r\n\r\n\t\t\tvar line = new THREE.Line(ellipseGeometry, orbitMaterial);\r\n\t\t\t\r\n\t\t\tif (!self.data.confirmed || self.data.type === 'comet') {\r\n\t\t\t\tellipseGeometry.computeLineDistances();\r\n\t\t\t\tline = new THREE.Line(ellipseGeometry, orbitMaterial, THREE.LinePieces);\r\n\t\t\t}\r\n\r\n\t\t\tline.orbitColor = window.settings.orbitColors[ this.app.systems.length ];\r\n\t\t\t// line.orbitColorHover = window.settings.Colors[ App.systems.length ].orbitHover;\r\n\r\n\t\t\tthis.referencePlane.rotation.y = this.longitudeAscendingNode * Math.PI/2;\r\n\t\t\tline.rotation.set(Math.PI/2, 0, 0);\r\n\r\n\t\t\tif( this.type != 'camera' ) {\r\n\t\t  \tself.basePlane.add(line);\r\n\t\t  \tself.planetsystem.orbits.push({ \r\n\t\t  \t\tline: line ,\r\n\t\t  \t\tname: self.name, \r\n\t\t  \t\ttype: self.type\r\n\t\t  \t});\r\n\t  \t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// x, y, radius, start, end, anti-clockwise\r\n\t\t\tcircle.absarc(0, 0, self.semiMajorAxis / window.settings.distancePixelRatio, 0, Math.PI*2, false);\r\n\r\n\t\t\tvar points = circle.createPointsGeometry(128);\r\n\t\t  v_circle = new THREE.Line(\r\n\t\t  \tpoints, \r\n\t\t\t\tnew THREE.LineBasicMaterial({ \r\n\t\t\t\t\t//color: self.orbitColor,\r\n\t\t\t\t\tcolor: window.settings.orbitColors[ self.app.systems.length ],\r\n\t\t\t\t\topacity: window.settings.orbitTransparency,\r\n\t\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t\t\ttransparent: true\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\t  v_circle.rotation.set(Math.PI/2, 0, 0);\r\n\r\n\t\t  self.basePlane.add(v_circle);\r\n\t\t  self.planetsystem.orbits.push({ \r\n\t\t  \tline: v_circle,\r\n\t\t  \tname: self.name, \r\n\t\t  \ttype: self.type\r\n\t\t  });\r\n\r\n\t\t}\r\n\r\n\t\tthis.basePlane.inclination = 1;\r\n\t\tthis.basePlane.rendertype = 'basePlane';\r\n\t\tthis.basePlane.rendername = this.name;\r\n\r\n\t\t// set the inclination\r\n\t\tif ( this.inclination > 0 && self.app.config.settings.inclination ) {\r\n\t\t\tthis.basePlane.inclination = this.inclination;\r\n\t\t\tthis.basePlane.rotation.set(this.inclination * Math.PI / 180.0, 0, 0);\r\n\t\t}\r\n\r\n  },\r\n\r\n  prepareAnimations: function(){\r\n  \tvar self = this;\r\n\r\n    // rotation of the space object\r\n    // not all objects have self rotation, e.g. mercury and moon don't have\r\n    // venus has a negative rotation\r\n\r\n    self.animationFunctions.push(function() {\r\n\r\n    \t// we have rotationPeriod in earth days\r\n    \tif ( self.rotationPeriod ) {\r\n\r\n    \t\tif ( self.rotationClockwise === false )\r\n\t\t\t\t\tself.object.rotation.y -= self.app.currentSpeed / (24 * 60 * 60);    \t\r\n\t\t\t\telse\r\n\t\t\t\t\tself.object.rotation.y += self.app.currentSpeed / (24 * 60 * 60);    \t\r\n    \t}\r\n    });\r\n\r\n    // planet orbit\r\n    if (self.pivot) {\r\n\t\t\tself.animationFunctions.push(function() {\r\n\t    \t\r\n\t\t\t\tif ( self.eccentricity > -1) {\r\n\r\n\t\t\t    var aRadius = self.semiMajorAxis / window.settings.distancePixelRatio;\r\n\t\t\t    var bRadius = aRadius * Math.sqrt(1.0 - Math.pow(self.eccentricity, 2.0));\r\n\r\n\t\t\t    // get the current angle\r\n\t\t\t    // the orbit period is always calculated in days, so here\r\n\t\t\t    // we need to change it to seconds\r\n\t\t\t    var angle = self.app.simTimeSecs / (self.siderealOrbitPeriod * 24 * 60 * 60) * Math.PI*2 * -1;\r\n\r\n\t\t\t    self.pivot.position.set(\r\n\t\t\t    \taRadius * Math.cos(angle) + (self.eccentricity * 100 * self.semiMajorAxis / 100) / window.settings.distancePixelRatio,\r\n\t\t\t    \t0,\r\n\t\t\t    \tbRadius * Math.sin(angle)\r\n\t\t\t    );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tself.pivot.rotation.y += 1 / self.siderealOrbitPeriod;\r\n\t\t\t});\r\n    };\r\n    \r\n    // Inject functions array\r\n    self.objectPlane.animate = function() {\t\r\n\t\t\tself.animationFunctions.forEach(function(dt) {\r\n\t\t\t\tdt();\r\n\t\t\t});\r\n    };\r\n\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar Shaders = require('lib/shaders');\r\nvar Particle = require('models/particle');\r\n\r\nmodule.exports = View.extend({\r\n\r\n  id: null,\r\n  template: null,\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n    this.color = options.color || 0xffffff;\r\n    this.transparency = options.transparency || 0.1;\r\n\r\n    this.coordinateSystems = {\r\n      'galaxy': {\r\n        'group': new THREE.Object3D(),\r\n        'visible': false,\r\n        'rendered': false,\r\n        'settings': {\r\n          'rings': 10,  \r\n          'segments': 36,\r\n          'degrees': 360/10,\r\n          'distance': (window.settings.LY * 10000 / window.settings.distancePixelRatio),\r\n          'position': (-window.settings.LY * 28000 / window.settings.distancePixelRatio),\r\n          'rotation': window.settings.galaxyPlaneRotation()\r\n        }\r\n      },\r\n      'cluster': {\r\n        'group': new THREE.Object3D(),\r\n        'visible': false,\r\n        'rendered': false,\r\n        'settings': {\r\n          'rings': 100,  \r\n          'segments': 36,\r\n          'distance': (window.settings.LY * 10 / window.settings.distancePixelRatio),\r\n        }\r\n      },\r\n      'stars': {\r\n        'group': new THREE.Object3D(),\r\n        'visible': false,\r\n        'rendered': false,\r\n        'settings': {\r\n          'rings': 100,  \r\n          'segments': 36,\r\n          'degrees': 360/10,\r\n          'distance': (window.settings.LY * 1 / window.settings.distancePixelRatio),\r\n        }\r\n      },\r\n      'planets': {\r\n        'group': new THREE.Object3D(),\r\n        'visible': false,\r\n        'rendered': false,\r\n        'settings': {\r\n          'rings': 100,  \r\n          'segments': 0,\r\n          'degrees': 360/10,\r\n          'distance': (window.settings.AU / window.settings.distancePixelRatio)\r\n        }\r\n      }\r\n    }\r\n\r\n  \tthis.update();\r\n\r\n  \t_.bindAll(\r\n      this, \r\n      'renderDistanceLines', \r\n      'renderCoordinateSystem',\r\n      'show',\r\n      'hide',\r\n      'update'\r\n    );\r\n  },\r\n\r\n  renderDistanceLines: function() {\r\n    var self = this;\r\n    \r\n    self.distanceLines = new THREE.Geometry();\r\n\r\n     for ( var i = 0; i < self.app.stars.length; ++i ) {\r\n      // var vector = new THREE.Vector3( self.app.stars[i].position.x, 0, self.app.stars[i].position.z );\r\n      var vector = new THREE.Vector3( 0, 0, 0 );\r\n      self.distanceLines.vertices.push( vector );\r\n      self.distanceLines.vertices.push( self.app.stars[i].position );\r\n    }\r\n\r\n    var material = new THREE.LineBasicMaterial({\r\n      color: self.color,\r\n      opacity: self.transparency,\r\n      transparent: true\r\n    });\r\n\r\n    var line = new THREE.Line( self.distanceLines, material, THREE.LinePieces );\r\n    self.app.scene.add( line );\r\n  },\r\n\r\n  // Renders a coordinate system by type with Three.js Lines\r\n  renderCoordinateSystem: function(type){\r\n    var self = this;\r\n\r\n    if (type == undefined){\r\n      console.log('Warning: You need to specify the type of the coordinate system to render');\r\n      return;\r\n    }\r\n\r\n    self.coordinateSystems[type].visible = true;\r\n\r\n    if ( self.coordinateSystems[type].rendered === true )\r\n      return;\r\n\r\n    console.log('Rendering coordinate system for', type);\r\n    self.coordinateSystems[type].visible = true;\r\n    self.coordinateSystems[type].rendered = true;\r\n\r\n    var settings = self.coordinateSystems[type].settings;\r\n    var dist = settings.distance;\r\n\r\n    var material = new THREE.LineBasicMaterial({ \r\n      blending: THREE.AdditiveBlending,\r\n      color: self.color,\r\n      opacity: self.transparency,\r\n      linewidth: 2,\r\n      transparent: true\r\n    });\r\n\r\n    var dashMaterial = new THREE.LineDashedMaterial({ \r\n      blending: THREE.AdditiveBlending,\r\n      color: self.color,\r\n      opacity: self.transparency/2,\r\n      linewidth: 2,\r\n      transparent: true,\r\n      dashSize: dist/4, \r\n      gapSize: dist/4\r\n    });\r\n\r\n    // render the rings\r\n    for (var i = 0; i < settings.rings + 1; i++) {\r\n\r\n      var circle = new THREE.Shape();\r\n          circle.moveTo(dist * i, 0 );\r\n          circle.absarc( 0, 0, i * dist, 0, Math.PI*2, false );\r\n      \r\n      var points = circle.createPointsGeometry(settings.rings);\r\n\r\n      circleLine = new THREE.Line(points, \r\n        new THREE.LineBasicMaterial({ \r\n          color: self.color,\r\n          opacity: self.transparency,\r\n          blending: THREE.AdditiveBlending,\r\n          linewidth: 1,\r\n          transparent: true\r\n        })\r\n      );\r\n      \r\n      // add one AU as offset to move it to the center    \r\n      // v_circle.position.set(0, -100, 0);    \r\n      if (settings.position !== undefined)\r\n        circleLine.position.set(settings.position, 0, 0);\r\n      else\r\n        circleLine.position.set(0, 0, 0);\r\n\r\n      if (settings.rotation !== undefined) \r\n        circleLine.rotation.set(settings.rotation, 0, 0);\r\n      else\r\n        circleLine.rotation.set(Math.PI/2, 0, 0);\r\n\r\n      self.coordinateSystems[type].group.add( circleLine );\r\n    }\r\n\r\n     // render the angles\r\n    for (var i = 0; i < settings.segments; i++) {\r\n      var geometry = new THREE.Geometry();\r\n          geometry.vertices.push( new THREE.Vector3(0, 0, 0) );\r\n          geometry.vertices.push( new THREE.Vector3(settings.rings * settings.distance, 0, 0) );\r\n          geometry.computeLineDistances();\r\n\r\n      var shapeLine = null;\r\n      if ( (i * 10) % 30 == 0 )\r\n        shapeLine = new THREE.Line(geometry, material);\r\n      else\r\n        shapeLine = new THREE.Line(geometry, material);\r\n\r\n      if (settings.position !== undefined)\r\n        shapeLine.position.set(settings.position, 0, 0);\r\n      else\r\n        shapeLine.position.set(0, 0, 0);\r\n\r\n      if (settings.rotation !== undefined) \r\n        shapeLine.rotation.set(settings.rotation, 0, 10*i * window.settings.toRad());\r\n      else\r\n        shapeLine.rotation.set(Math.PI/2, 0, 10*i * window.settings.toRad());\r\n\r\n      this.coordinateSystems[type].group.add( shapeLine );\r\n    }\r\n\r\n    self.app.scene.add( this.coordinateSystems[type].group );\r\n  },\r\n\r\n  // shows a pre-rendered coordinate system depending on its context\r\n  show: function( type ){\r\n    var self = this;\r\n    self.coordinateSystems[type].visible = true;\r\n    _.each( self.coordinateSystems[type].group.children, function(line){\r\n      line.visible = true;\r\n    });\r\n  },\r\n\r\n  hide: function( type ){\r\n    var self = this;\r\n    self.coordinateSystems[type].visible = false;\r\n    _.each( self.coordinateSystems[type].group.children, function(line){\r\n      line.visible = false;\r\n    });\r\n  },\r\n\r\n  // render loop to check the distance in light years and render the correct sized coordinate system\r\n  update: function(){\r\n    var self = this;\r\n\r\n    var distance = self.app.currentDistanceLY;\r\n\r\n    if (distance > 1000000) {\r\n      self.hide('galaxy');\r\n      self.hide('cluster');\r\n      self.hide('stars');\r\n      self.hide('planets');\r\n    }\r\n\r\n    if (distance > 1000 && distance <= 1000000) {\r\n      if (!self.coordinateSystems.galaxy.rendered);\r\n        self.renderCoordinateSystem('galaxy');\r\n\r\n      self.show('galaxy');\r\n\r\n      self.hide('stars');\r\n      self.hide('planets');\r\n    }\r\n\r\n     if (distance > 100 && distance <= 10000) {\r\n\r\n      if (!self.coordinateSystems.cluster.rendered);\r\n        self.renderCoordinateSystem('cluster');\r\n\r\n      self.show('cluster');\r\n\r\n      self.hide('galaxy');\r\n      self.hide('stars');\r\n      self.hide('planets');\r\n    }\r\n\r\n    if (distance > 1 && distance < 100) {\r\n\r\n      if (!self.coordinateSystems.stars.rendered);\r\n        self.renderCoordinateSystem('stars');\r\n\r\n      self.show('stars');\r\n\r\n      self.hide('galaxy');\r\n      self.hide('cluster');\r\n      self.hide('planets');\r\n\r\n    } else if (distance < 1) {\r\n\r\n      if (!self.coordinateSystems.planets.rendered);\r\n        self.renderCoordinateSystem('planets');\r\n\r\n      self.show('planets');\r\n\r\n      self.hide('galaxy');\r\n      self.hide('cluster');\r\n      self.hide('stars');\r\n    }\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar Particle = require('models/particle');\r\nvar Shaders = require('lib/shaders');\r\n\r\n\r\n/**\r\n * Firmament\r\n */\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'galaxy clusters',\r\n  template: false,\r\n\r\n\tinitialize: function( options ) {\r\n\t\tconsole.log(' --- rendering firmaments --- ');\r\n\r\n\t\tthis.app = options.app;\r\n\t\tthis.particles = [];\r\n\r\n\t\t// the number of small stars\r\n\t\tthis.firmamentCount = 750;\r\n\t\tthis.firmaments = null;\r\n\t\tthis.firmamentRendered = false;\r\n\r\n\t\tthis.group = new THREE.Geometry();\r\n\r\n\t\tthis.texture = THREE.ImageUtils.loadTexture( 'img/galaxy.jpg', null );\r\n\r\n\t\tthis.attributes = {\r\n\t\t\tsize: {\ttype: 'f', value: [] },\r\n\t\t\tca: {\ttype: 'c', value: [] }\r\n\t\t};\r\n\r\n\t\tthis.uniforms = {\r\n\t\t\tamplitude: { type: \"f\", value: 1.0 },\r\n\t\t\tcolor: { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t};\r\n\r\n\t\t_.bindAll(this, \r\n\t\t\t'render', \r\n\t\t\t'update'\r\n\t\t);\r\n\r\n\t\tthis.render();\r\n\t},\r\n\r\n\trender: function() {\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.firmamentRendered)\r\n\t\t\treturn false;\r\n\r\n\t\tvar values_size = this.attributes.size.value;\r\n\t\tvar values_color = this.attributes.ca.value;\r\n\r\n\t\tfor ( var i = 0; i < this.firmamentCount; i++ ) {\r\n\r\n\t\t\t//values_size[i] = Math.random() * 1000;\r\n\t\t\tvalues_size[i] = 100000*100000 * window.settings.LY / window.settings.distancePixelRatio;\r\n\r\n\t\t\t// set size variation\r\n\t\t\t// taken from: http://workshop.chromeexperiments.com/stars/js/galaxy.js\r\n\t\t\tif( Math.random() > 0.95 )\r\n\t\t\t\tvalues_size[i] *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.75;\t\r\n\t\t\telse if( Math.random() > 0.90 )\r\n\t\t\t\tvalues_size[i] *= 1 + Math.pow(1 + Math.random(), 2) * 0.25;\r\n\r\n\r\n\t\t\t// define the star colors\r\n\t\t\tif( Math.random() > 0.99 )\r\n\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[0].color );\r\n\t\t\telse if( Math.random() > 0.40 )\r\n\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[1].color );\r\n\t\t\telse if( Math.random() > 0.05 )\r\n\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[2].color );\r\n\t\t\telse \r\n\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[3].color );\r\n\r\n\r\n\t\t\tvar x = window.settings.LY * (Math.random() * 2000000) / window.settings.distancePixelRatio;\r\n\t\t\tvar y = window.settings.LY * (Math.random() * 2000000) / window.settings.distancePixelRatio;\r\n\r\n\t\t\t\t\tx = x + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 12000 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\t\t\t\t\ty = y + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 12000 * window.settings.LY / window.settings.distancePixelRatio);\r\n\r\n\t\t\tvar z = 0 + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 3500 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\r\n\t\t\tif( Math.random() > 0.98 )\r\n\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.8;\t\r\n\r\n\t\t\tif( Math.random() > 0.5 )\r\n\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.15;\t\r\n\r\n\t    var particle = new Particle({ vector: new THREE.Vector3(x, y, z) });\r\n\r\n\t    this.particles.push( particle );\r\n\t\t\tthis.group.vertices.push( particle.position );\r\n\t\t}\r\n\r\n\t\tthis.material = new THREE.ShaderMaterial({\r\n\t\t\tuniforms: self.uniforms,\r\n\t\t\tattributes: self.attributes,\r\n\t\t\tvertexShader: self.app.shaders['firmament'].vertex,\r\n\t\t\tfragmentShader: self.app.shaders['firmament'].fragment,\r\n\t\t\tblending: THREE.AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\ttransparent: true\r\n\t\t});\r\n\r\n\t\tself.firmaments = new THREE.ParticleSystem(\r\n\t    this.group,\r\n\t    this.material\r\n\t  );\r\n\r\n\t  self.firmaments.rotation.set( -90 * Math.PI / 180, -180 * Math.PI / 180, 0 );\r\n\t  self.firmaments.position.set( -this.distanceFromSunToCenter, 0, 0 );\r\n\r\n\t  self.app.firmamentParticles = self.firmaments;\r\n\t  self.app.scene.add( self.firmaments );\r\n\r\n\t  self.firmamentRendered = true;\r\n\r\n\t},\r\n\r\n\tshow: function(){\r\n\t\tif (!this.firmamentRendered) {\r\n\t\t\tthis.firmaments.traverse(function(child){\r\n\t\t\t\tchild.visible = true;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.firmamentRendered = true;\r\n\t},\r\n\r\n\thide: function() {\r\n\t\tif (this.firmamentRendered) {\r\n\t\t\tthis.firmaments.traverse(function(child){\r\n\t\t\t\tchild.visible = false;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.firmamentRendered = false;\r\n\t},\r\n\r\n\tupdate: function( start, length ) {\r\n\t\tfor ( var i = start; i < length; i++ ) {\r\n\t\t\t//this.attributes.size.value[i] = 10000;\r\n\t\t}\r\n\t\t//this.attributes.size.needsUpdate = true;\r\n\t}\r\n\r\n});\r\n","var View = require('./view');\r\n\r\nvar Particle = require('models/particle');\r\nvar Shaders = require('lib/shaders');\r\n\r\n\r\n/**\r\n * Galaxy Clusters are rendered\r\n * There are basically two types of galaxies (spiral, spherical galaxies)\r\n */\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'galaxy-clusters',\r\n  template: false,\r\n\r\n\tinitialize: function( options ) {\r\n\t\tconsole.log(' --- rendering galaxy cluster --- ');\r\n\r\n\t\tthis.app = options.app;\r\n\t\tthis.particles = [];\r\n\r\n\t\t// the number of small stars\r\n\t\tthis.galaxyCount = 750;\r\n\t\tthis.galaxies = null;\r\n\t\tthis.galaxiesRendered = false;\r\n\r\n\t\t// the number of star clusters\r\n\t\tthis.clustersCount = 500;\r\n\t\tthis.clusters = null;\r\n\t\tthis.clustersRendered = false;\r\n\r\n\t\tthis.group = new THREE.Geometry();\r\n\r\n\t\tthis.texture = THREE.ImageUtils.loadTexture( 'img/galaxy.jpg', null );\r\n\r\n\t\tthis.points = '565.62,482.2 593.58,450.95 623.18,408.19 626.47,362.15 591.94,324.32 536.02,294.72 476.82,291.43 412.68,302.94 346.9,357.21 315.65,421.35 299.21,469.04 300.85,534.82 320.59,580.87 345.26,630.21 356.77,663.1 389.66,710.79 429.13,730.53 486.69,758.48 524.51,779.86 583.71,781.51 637.98,769.99 674.17,751.9 728.44,725.59 495.59,470.09 464.09,521.09 431.09,561.59 434.09,593.09 462.59,626.08 506.09,639.58 566.09,653.08 624.58,639.58 672.58,606.58 707.08,579.59 750.58,543.59 803.08,456.59 801.58,351.6\t749.08,240.6 674.29,170.05 674.29,170.05 606.69,125.03 503.09,93.5 409,93.5 305.1,128.11 239.1,164.11 140.11,261.6 729.58,521.09 752.08,459.59 738.58,387.6 714.58,317.1 696.58,288.6 645.58,245.1 569.09,204.61 507.59,201.61 432.59,207.61 348.6,246.6 282.6,285.6 225.6,363.6 200.1,443.09 173.11,542.09 195.61,629.08 227.1,699.58 254.1,294.6 198.61,357.6 168.61,387.6 149.11,432.59 126.61,500.09 119.11,563.09 147.61,678.58 204.6,761.08 228.6,801.58 302.1,870.57 362.06,639.79 426.58,680.18 543.58,720.63 603.58,717.6 687.58,692.09 750.58,645.59 795.57,590.09 857.04,497.09 870.5,443.09 870.5,388 870.57,314.1 840.57,236.1 542.09,629.08 597.58,609.58 644.08,555.59 674.08,479.09\t666.58,422.09 566,348.5 470,348.5 393.6,402.6 374.1,483.59 386.1,552.59 497.05,480.55 474.57,509.07 453.58,537.58 434.09,563.08 432.59,600.58 464.09,632.04 507.59,645.5 572,645.5 633.58,630.58 704.08,585.59 746.08,543.59 803.08,456.59 809.07,441.59 797.08,345.6 743.08,246.6 725.08,225.6 663.58,161.11 641.08,143.11 620.08,126.61 585.59,116.11 549.59,102.61 476.09,92.11 407.09,93.61 333.6,108.61 252.6,156.61 171.61,224.1';\r\n\t\tthis.points = this.points.split(' ');\r\n\r\n\t\tthis.distanceFromSunToCenter = window.settings.LY * 28000 / window.settings.distancePixelRatio;\r\n\r\n\t\tthis.attributes = {\r\n\t\t\tsize: {\ttype: 'f', value: [] },\r\n\t\t\tca: {\ttype: 'c', value: [] }\r\n\t\t};\r\n\r\n\t\tthis.uniforms = {\r\n\t\t\tamplitude: { type: \"f\", value: 1.0 },\r\n\t\t\tcolor: { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\ttexture: { type: \"t\", value: this.texture }\r\n\t\t};\r\n\r\n\t\t_.bindAll(this, \r\n\t\t\t'render', \r\n\t\t\t'renderClusters',\r\n\t\t\t'update'\r\n\t\t);\r\n\r\n\t\tthis.render();\r\n\t},\r\n\r\n\trender: function(){\r\n\t\tthis.renderClusters();\r\n\t},\r\n\r\n\trenderClusters: function() {\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.galaxiesRendered)\r\n\t\t\treturn false;\r\n\r\n\t\tvar values_size = this.attributes.size.value;\r\n\t\tvar values_color = this.attributes.ca.value;\r\n\r\n\t\tfor ( var i = 0; i < this.galaxyCount; i++ ) {\r\n\r\n\t\t\t//values_size[i] = Math.random() * 1000;\r\n\t\t\tvalues_size[i] = 1000000 * window.settings.LY / window.settings.distancePixelRatio;\r\n\r\n\t\t\t// set size variation\r\n\t\t\t// taken from: http://workshop.chromeexperiments.com/stars/js/galaxy.js\r\n\t\t\tif( Math.random() > 0.95 )\r\n\t\t\t\tvalues_size[i] *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.75;\t\r\n\t\t\telse if( Math.random() > 0.90 )\r\n\t\t\t\tvalues_size[i] *= 1 + Math.pow(1 + Math.random(), 2) * 0.25;\r\n\r\n\r\n\t\t\t// define the star colors\r\n\t\t\tif( Math.random() > 0.99 )\r\n\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[0].color );\r\n\t\t\telse if( Math.random() > 0.40 )\r\n\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[1].color );\r\n\t\t\telse if( Math.random() > 0.05 )\r\n\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[2].color );\r\n\t\t\telse \r\n\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[3].color );\r\n\r\n\r\n\t\t\t// pick a random point of the galaxy points\r\n\t\t\t//var item = _.shuffle( self.points )[0];\r\n\t\t\t//var item = item.split(',');\r\n\r\n\t\t\tvar x = window.settings.LY * (Math.random()*2000000000) / window.settings.distancePixelRatio;\r\n\t\t\tvar y = window.settings.LY * (Math.random()*2000000000) / window.settings.distancePixelRatio;\r\n\r\n\t\t\t\t\tx = x + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 120000000 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\t\t\t\t\ty = y + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 120000000 * window.settings.LY / window.settings.distancePixelRatio);\r\n\r\n\t\t\tvar z = 0 + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 35000000 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\r\n\t\t\tif( Math.random() > 0.75 )\r\n\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.5;\t\r\n\r\n\t\t\tif( Math.random() > 0.25 )\r\n\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 1;\t\r\n\r\n\t    var particle = new Particle({ vector: new THREE.Vector3(x, y, z) });\r\n\r\n\t    this.particles.push( particle );\r\n\t\t\tthis.group.vertices.push( particle.position );\r\n\t\t}\r\n\r\n\t\tthis.material = new THREE.ShaderMaterial({\r\n\t\t\tuniforms: self.uniforms,\r\n\t\t\tattributes: self.attributes,\r\n\t\t\tvertexShader: self.app.shaders['galaxy'].vertex,\r\n\t\t\tfragmentShader: self.app.shaders['galaxy'].fragment,\r\n\t\t\tblending: THREE.AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\ttransparent: true\r\n\t\t});\r\n\r\n\t\tself.galaxies = new THREE.ParticleSystem(\r\n\t    this.group,\r\n\t    this.material\r\n\t  );\r\n\r\n\t  self.galaxies.rotation.set( -90 * Math.PI / 180, -180 * Math.PI / 180, 0 );\r\n\t  self.galaxies.position.set( -this.distanceFromSunToCenter, 0, 0 );\r\n\r\n\t  // self.app.galaxyParticles = self.galaxies;\r\n\t  self.app.scene.add( self.galaxies );\r\n\r\n\t  self.galaxiesRendered = true;\r\n\r\n\t},\r\n\r\n\tshow: function(){\r\n\t\tif (!this.galaxiesRendered) {\r\n\t\t\tconsole.log('showing galaxy cluster');\r\n\t\t\tthis.galaxies.traverse(function(child){\r\n\t\t\t\tchild.visible = true;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.galaxiesRendered = true;\r\n\t},\r\n\r\n\thide: function() {\r\n\t\tif (this.galaxiesRendered) {\r\n\t\t\tconsole.log('hiding galaxy cluster');\r\n\t\t\tthis.galaxies.traverse(function(child){\r\n\t\t\t\t// child.visible = false;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t//this.galaxiesRendered = false;\r\n\t},\r\n\r\n\tupdate: function( start, length ) {\r\n\t\tfor ( var i = start; i < length; i++ ) {\r\n\t\t\t//this.attributes.size.value[i] = 10000;\r\n\t\t}\r\n\t\t//this.attributes.size.needsUpdate = true;\r\n\t}\r\n\r\n});\r\n","var View = require('./view');\r\n\r\nvar Particle = require('models/particle');\r\nvar Shaders = require('lib/shaders');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'galaxy-skybox',\r\n  template: false,\r\n\r\n\tinitialize: function( options ) {\r\n\t\tconsole.log(' --- rendering galaxy skybox --- ');\r\n\r\n\t\tthis.app = options.app;\r\n\t\t// load the cube textures\r\n\t\tvar urlPrefix = \"img/skybox/s_\";\r\n\t\tthis.urls = [ \r\n\t\t\turlPrefix + \"px.jpg\", \r\n\t\t\turlPrefix + \"nx.jpg\",\r\n\t\t\turlPrefix + \"py.jpg\", \r\n\t\t\turlPrefix + \"ny.jpg\",\r\n\t\t\turlPrefix + \"pz.jpg\", \r\n\t\t\turlPrefix + \"nz.jpg\" \r\n\t\t];\r\n\r\n\t\tthis.textureCube = THREE.ImageUtils.loadTextureCube( this.urls );\r\n\t\t\r\n\t\t// init the cube shader\r\n\t\tthis.shader = THREE.ShaderLib[\"cube\"];\r\n\t\tthis.shader.uniforms[\"tCube\"].value = this.textureCube;\r\n\t\tthis.shader.uniforms[\"opacity\"] = { \r\n\t\t\tvalue: 0.1, \r\n\t\t\ttype: \"f\" \r\n\t\t};\r\n\r\n\t\tthis.skyboxUniforms = this.shader.uniforms;\r\n\r\n\t\tvar material = new THREE.ShaderMaterial({\r\n\t\t\tfragmentShader: this.shader.fragmentShader,\r\n\t\t\tvertexShader: this.shader.vertexShader,\r\n\t\t\tuniforms: this.shader.uniforms,\r\n\t\t\tside: THREE.BackSide,\r\n\t\t\topacity: 0.1,\r\n\t\t\tdepthWrite: false,\r\n\t\t\tdepthTest: false\r\n\t\t});\r\n\r\n\t\t// build the skybox Mesh\r\n\t\tvar skyboxMesh = new THREE.Mesh( \r\n\t\t\tnew THREE.CubeGeometry( \r\n\t\t\t\t10000 * window.settings.LY / window.settings.distancePixelRatio, \r\n\t\t\t\t10000 * window.settings.LY / window.settings.distancePixelRatio,\r\n\t\t\t\t10000 * window.settings.LY / window.settings.distancePixelRatio,\r\n\t\t\t\t1,\r\n\t\t\t\t1, \r\n\t\t\t\t1, \r\n\t\t\t\tnull, \r\n\t\t\t\ttrue \r\n\t\t\t), \r\n\t\t\tmaterial \r\n\t\t);\r\n\r\n\t\tskyboxMesh.rotation.set(0, -180, 0);\r\n\r\n\t\t/*\r\n\t\tvar sphere = new THREE.Mesh(\r\n\t\t\tnew THREE.SphereGeometry(10000 * window.settings.LY / window.settings.distancePixelRatio, 64, 64), \r\n\t\t\tnew THREE.MeshBasicMaterial({\r\n\t\t\t  map: THREE.ImageUtils.loadTexture('img/galaxy-m.jpg'),\r\n\t\t\t  shading: THREE.SmoothShading, \r\n\t\t\t  blending: THREE.AdditiveBlending, \r\n\t\t\t  side: THREE.DoubleSide,\r\n\t\t\t  color: 0xffffff, \r\n\t\t\t  ambient: 0xffffff, \r\n\t\t\t  shininess: 100\r\n\t\t\t})\r\n\t\t);\r\n\t\t*/\r\n      \t\r\n    // this.app.scene.add(sphere);\r\n\t\tthis.app.scene.add( skyboxMesh );\r\n\t\tthis.render();\r\n\r\n\t\t_.bindAll(this, \r\n\t\t\t'render', \r\n\t\t\t'update'\r\n\t\t);\r\n\r\n\t\treturn this;\t\t\r\n\t},\r\n\r\n\trender: function(){\r\n\r\n\t},\r\n\r\n\tupdate: function(){\r\n\t\tvar skyboxBrightness = 1.4 / this.app.camera.position.z;\r\n\r\n\t\t// console.log(skyboxBrightness);\r\n\t\tthis.skyboxUniforms['opacity'].value = 0.1;\r\n\t},\r\n\r\n\tshow: function(){\r\n\t\r\n\t},\r\n\r\n\thide: function() {\r\n\t\r\n\t}\r\n\r\n});\r\n","var View = require('./view');\r\n\r\nvar Particle = require('models/particle');\r\nvar Shaders = require('lib/shaders');\r\n\r\n\r\n/**\r\n * The Galaxy is rendered as a spiral galaxy.\r\n * \r\n * There is a galaxy skeleton which defines the basic shape of the galaxy. \r\n * \r\n * A galaxy has a certain amount of star clusters, that has a high star density.\r\n * \r\n * The Galaxy consists of dark nebulas which observe light.\r\n */\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'galaxy',\r\n  template: false,\r\n\r\n\tinitialize: function( options ) {\r\n\t\tconsole.log(' --- rendering galaxy --- ');\r\n\r\n\t\tthis.app = options.app;\r\n\t\tthis.particles = [];\r\n\r\n\t\t// the number of large stars\r\n\t\tthis.starsCount = 1500;\r\n\t\tthis.stars = null;\r\n\t\tthis.starsRendered = false;\r\n\r\n\t\t// the number of star clusters\r\n\t\tthis.starClustersCount = 25000;\r\n\t\tthis.starClusters = null;\r\n\t\tthis.starClustersRenderd = false;\r\n\r\n\t\t// the number of nebulars at the outer area of the galaxy\r\n\t\tthis.nebulasCount = 5000;\r\n\t\tthis.nebulas = null;\r\n\t\tthis.nebulasRendered = false;\r\n\r\n\t\tthis.bulge = null;\r\n\t\tthis.bulgeRendered = false;\r\n\r\n\t\tthis.anchor = new THREE.Object3D();\r\n\t\tthis.group = new THREE.Geometry();\r\n\r\n\t\tthis.anchor.add(this.group);\r\n\r\n\t\tthis.plane = null;\r\n\r\n\t\t// rotation of the galactical plane around 63 degres from the solar system plane\r\n\t\t// see http://curious.astro.cornell.edu/question.php?number=633\r\n\t\tthis.galacticalPlaneRotation = 63;\r\n\r\n\t\t// 2 times the sun\r\n\t\tthis.minSize = 2;\r\n\r\n\t\t// 100000 light years\r\n\t\tthis.width = 100000;\r\n\r\n\t\t// galaxy is 5000 light years high\r\n\t\tthis.height = 5000;\r\n\r\n\t\tthis.colors = [\r\n\t\t\t{ 'color': '#00ffff' },\r\n\t\t\t{ 'color': '#ff00ff' }\r\n\t\t];\r\n\r\n\t\tthis.points = '565.62,482.2 593.58,450.95 623.18,408.19 626.47,362.15 591.94,324.32 536.02,294.72 476.82,291.43 412.68,302.94 346.9,357.21 315.65,421.35 299.21,469.04 300.85,534.82 320.59,580.87 345.26,630.21 356.77,663.1 389.66,710.79 429.13,730.53 486.69,758.48 524.51,779.86 583.71,781.51 637.98,769.99 674.17,751.9 728.44,725.59 495.59,470.09 464.09,521.09 431.09,561.59 434.09,593.09 462.59,626.08 506.09,639.58 566.09,653.08 624.58,639.58 672.58,606.58 707.08,579.59 750.58,543.59 803.08,456.59 801.58,351.6\t749.08,240.6 674.29,170.05 674.29,170.05 606.69,125.03 503.09,93.5 409,93.5 305.1,128.11 239.1,164.11 140.11,261.6 729.58,521.09 752.08,459.59 738.58,387.6 714.58,317.1 696.58,288.6 645.58,245.1 569.09,204.61 507.59,201.61 432.59,207.61 348.6,246.6 282.6,285.6 225.6,363.6 200.1,443.09 173.11,542.09 195.61,629.08 227.1,699.58 254.1,294.6 198.61,357.6 168.61,387.6 149.11,432.59 126.61,500.09 119.11,563.09 147.61,678.58 204.6,761.08 228.6,801.58 302.1,870.57 362.06,639.79 426.58,680.18 543.58,720.63 603.58,717.6 687.58,692.09 750.58,645.59 795.57,590.09 857.04,497.09 870.5,443.09 870.5,388 870.57,314.1 840.57,236.1 542.09,629.08 597.58,609.58 644.08,555.59 674.08,479.09\t666.58,422.09 566,348.5 470,348.5 393.6,402.6 374.1,483.59 386.1,552.59 497.05,480.55 474.57,509.07 453.58,537.58 434.09,563.08 432.59,600.58 464.09,632.04 507.59,645.5 572,645.5 633.58,630.58 704.08,585.59 746.08,543.59 803.08,456.59 809.07,441.59 797.08,345.6 743.08,246.6 725.08,225.6 663.58,161.11 641.08,143.11 620.08,126.61 585.59,116.11 549.59,102.61 476.09,92.11 407.09,93.61 333.6,108.61 252.6,156.61 171.61,224.1';\r\n\r\n\t\t// 100000 light years\r\n\t\tthis.dimension = window.settings.LY * 10000 / window.settings.distancePixelRatio;\r\n\r\n\t\t// 28000 light years away from sun !\r\n\t\tthis.distanceFromSunToCenter = window.settings.LY * 28000 / window.settings.distancePixelRatio;\r\n\r\n\t\tthis.attributes = {\r\n\t\t\tsize: {\ttype: 'f', value: [] },\r\n\t\t\tca: {\ttype: 'c', value: [] }\r\n\t\t};\r\n\r\n\t\tthis.clusterAttributes = {};\r\n\r\n\t\t//var texture = THREE.ImageUtils.loadTexture( 'img/Flare_KPL-a.png', null );\r\n\r\n\t\tthis.uniforms = {\r\n\t\t\tamplitude: { type: \"f\", value: 1.0 },\r\n\t\t\tcolor: { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\ttexture: { type: \"t\", value: this.app.textures.getGalaxyStarMaterial() }\r\n\t\t};\r\n\r\n\t\tthis.values_size = this.attributes.size.value;\r\n\t\tthis.values_color = this.attributes.ca.value;\r\n\r\n\t\t// 10 light years from center\r\n\t\tthis.minDistance = 10;\r\n\t\tthis.points = this.points.split(' ');\r\n\r\n\t\t_.bindAll(this, \r\n\t\t\t'getPlaneRotation',\r\n\t\t\t'render', \r\n\t\t\t'renderSkeleton', \r\n\t\t\t'renderStars', \r\n\t\t\t'renderPlane', \r\n\t\t\t'renderBulge', \r\n\t\t\t'renderStarClusters', \r\n\t\t\t'renderNebulas',\r\n\t\t\t'update'\r\n\t\t);\r\n\r\n\t\tthis.render();\r\n\t},\r\n\r\n\trender: function(){\r\n\t\t// this.renderSkeleton();\r\n\t\t// this.renderStars();\r\n\t\tthis.renderPlane();\r\n\t\tthis.renderBulge();\r\n\t\tthis.renderStarClusters();\r\n\t\tthis.renderNebulas();\r\n\t},\r\n\r\n\tgetPlaneRotation: function() {\r\n\t\treturn -90 + window.settings.galaxy.planeRotation * window.settings.toRad();\r\n\t},\r\n\r\n\trenderSkeleton: function(){\r\n\t\tvar self = this;\r\n\r\n\t\tfor ( var i = 0; i < self.points.length; i++ ) {\r\n\t\t\tself.values_size[i] = window.settings.LY * 1000000 / window.settings.distancePixelRatio;\r\n\t\t\tself.values_color[i] = new THREE.Color( 0xffffff );\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < self.points.length; i++ ) {\r\n\r\n\t\t\tvar p = self.points[i].split(',');\r\n\r\n\t\t\tvar x = parseFloat(p[0]) * window.settings.LY * 1000;\r\n\t\t\tvar y = parseFloat(p[1]) * window.settings.LY * 1000;\r\n\r\n\t\t\t\t\tx = x / window.settings.distancePixelRatio;\r\n\t\t\t\t\ty = y / window.settings.distancePixelRatio;\r\n\r\n\t\t\tvar particle = new Particle({ vector: new THREE.Vector3( x, y, 0 ) });\r\n\t\t\tthis.group.vertices.push( particle.position );\r\n\t\t}\r\n\r\n\t\tthis.material = new THREE.ShaderMaterial({\r\n\t\t\tuniforms: self.uniforms,\r\n\t\t\tattributes: self.attributes,\r\n\t\t\tvertexShader: self.app.shaders['galaxy'].vertex,\r\n\t\t\tfragmentShader: self.app.shaders['galaxy'].fragment,\r\n\t\t\tblending: THREE.AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\ttransparent: true\r\n\t\t});\r\n\r\n\t\tvar particleSystem = new THREE.ParticleSystem(\r\n\t    this.group,\r\n\t    this.material\r\n\t  );\r\n\r\n\t  particleSystem.rotation.set( this.getPlaneRotation(), 0, 0 );\r\n\t  particleSystem.position.set( -this.distanceFromSunToCenter, 0, 0 );\r\n\t  self.app.scene.add( particleSystem );\r\n\t},\r\n\r\n\trenderStars: function() {\r\n\t\tvar self = this;\r\n\r\n\t\tif (self.starsRendered)\r\n\t\t\treturn false;\r\n\r\n\t\tvar values_size = this.attributes.size.value;\r\n\t\tvar values_color = this.attributes.ca.value;\r\n\r\n\t\tfor ( var i = 0; i < this.starsCount; i++ ) {\r\n\r\n\t\t\tvalues_size[i] = 500 * window.settings.LY / window.settings.distancePixelRatio;\r\n\r\n\t\t\t// set the size of the galaxy bulge\r\n\t\t\tif (i == 0) {\r\n\r\n\t\t\t\tmapC = THREE.ImageUtils.loadTexture( 'img/starcluster.png', null );\r\n\r\n\t\t\t\tvar m = new THREE.SpriteMaterial({ \r\n\t\t\t\t\tmap: mapC, \r\n\t\t\t\t\tcolor: 0xff00ff\r\n\t\t\t\t});\r\n\r\n\t\t\t\tvar sprite = new THREE.Sprite( m );\r\n\t\t\t\t\t\tsprite.position.set( 0, 0, 0 );\r\n\t\t\t\t\t\tsprite.position.normalize();\r\n\t\t\t\t\t\tsprite.position.multiplyScalar( window.settings.LY * 100000 / window.settings.distancePixelRatio );\r\n\r\n\t\t\t\tvar group = new THREE.Object3D();\r\n\t\t\t\t\t\tgroup.add( sprite );\r\n\r\n\t\t\t\t//self.app.scene.add( group );\r\n\t\t\t\t//self.app.scene.add( sprite );\r\n\r\n\t\t\t\tvalues_size[i] = 50000000 * window.settings.LY;\t\t\r\n\t\t\t\tvalues_color[i] = new THREE.Color( 0xffffff );\r\n\r\n\t\t\t\tvar particle = new Particle({ vector: new THREE.Vector3( 0, 0, 0 ) });\r\n\r\n\t\t\t\tthis.particles.push( particle );\r\n\t\t\t\tthis.group.vertices.push( particle.position );\t\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// set size variation\r\n\t\t\t\t// taken from: http://workshop.chromeexperiments.com/stars/js/galaxy.js\r\n\t\t\t\tif( Math.random() > 0.75 )\r\n\t\t\t\t\tvalues_size[i] *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.75;\t\r\n\t\t\t\telse if( Math.random() > 0.60 )\r\n\t\t\t\t\tvalues_size[i] *= 1 + Math.pow(1 + Math.random(), 2) * 0.25;\r\n\r\n\r\n\t\t\t\t// define the star colors\r\n\t\t\t\tif( Math.random() > 0.99 )\r\n\t\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[0].color );\r\n\t\t\t\telse if( Math.random() > 0.40 )\r\n\t\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[1].color );\r\n\t\t\t\telse if( Math.random() > 0.05 )\r\n\t\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[2].color );\r\n\t\t\t\telse \r\n\t\t\t\t\tvalues_color[i] = new THREE.Color( window.settings.galaxyStarColors[3].color );\r\n\r\n\r\n\t\t\t\t// pick a random point of the galaxy points\r\n\t\t\t\tvar item = _.shuffle( self.points )[0];\r\n\t\t\t\tvar item = item.split(',');\r\n\r\n\t\t\t\tvar x = ( parseFloat(item[0]) - 500) * window.settings.LY * 200 / window.settings.distancePixelRatio;\r\n\t\t\t\tvar y = ( parseFloat(item[1]) - 500) * window.settings.LY * 200 / window.settings.distancePixelRatio;\r\n\r\n\t\t\t\t\t\tx = x + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 12000 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\t\t\t\t\t\ty = y + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 12000 * window.settings.LY / window.settings.distancePixelRatio);\r\n\r\n\t\t\t\tvar z = 0 + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 3500 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\r\n\t\t\t\tif( Math.random() > 0.98 )\r\n\t\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.8;\t\r\n\r\n\t\t\t\tif( Math.random() > 0.5 )\r\n\t\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.15;\t\r\n\r\n\t\t    var particle = new Particle({ vector: new THREE.Vector3(x, y, z) });\r\n\r\n\t\t    this.particles.push( particle );\r\n\t\t\t\tthis.group.vertices.push( particle.position );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.material = new THREE.ShaderMaterial({\r\n\t\t\tuniforms: self.uniforms,\r\n\t\t\tattributes: self.attributes,\r\n\t\t\tvertexShader: self.app.shaders['galaxy'].vertex,\r\n\t\t\tfragmentShader: self.app.shaders['galaxy'].fragment,\r\n\t\t\tblending: THREE.AdditiveBlending,\r\n\t\t\tdepthTest: false,\r\n\t\t\ttransparent: true\r\n\t\t});\r\n\r\n\t\tself.stars = new THREE.ParticleSystem(\r\n\t    this.group,\r\n\t    this.material\r\n\t  );\r\n\r\n\t  self.stars.rotation.set( this.getPlaneRotation(), -180 * Math.PI / 180, 0 );\r\n\t  self.stars.position.set( -this.distanceFromSunToCenter, 0, 0 );\r\n\r\n\t  self.app.galaxyParticles = self.stars;\r\n\t  self.app.scene.add( self.stars );\r\n\r\n\t  self.starsRendered = true;\r\n\r\n\t  //self.app.galaxyParticles.traverse(function(child) { \r\n\t\t\t//child.visible = true;\r\n\t\t//});\r\n\r\n\t},\r\n\r\n\r\n\trenderPlane: function() {\r\n\t\tvar self = this;\r\n\r\n\t\tvar material = new THREE.MeshBasicMaterial({\r\n\t\t\tmap: self.app.textures.galaxyPlaneTexture(),\r\n\t  \ttransparent: true,\r\n\t  \topacity: 1.0,\r\n\t  \tblending: THREE.AdditiveBlending,\r\n\t  \tside: THREE.DoubleSide \r\n\t\t});\r\n\r\n\t\tvar radius = window.settings.LY * 100000 / window.settings.distancePixelRatio;\r\n\t\tvar segments = 32;\r\n\r\n\t\tvar circleGeometry = new THREE.CircleGeometry( radius, segments );\t\t\t\t\r\n\t\tself.plane = new THREE.Mesh( circleGeometry, material );\r\n\t\tself.app.scene.add( self.plane );\r\n\r\n\t\tself.plane.rotation.set( this.getPlaneRotation(), 0, 0 );\r\n\t  self.plane.position.set( -self.distanceFromSunToCenter, 0, 0 );\r\n\r\n\t},\r\n\r\n\trenderBulge: function() {\r\n\t\tvar self = this;\r\n\r\n\t\tif (self.bulgeRendered) \r\n\t\t\treturn;\r\n\r\n\t\tvar material = new THREE.SpriteMaterial({ \r\n\t\t\t//map: self.app.textures.getStarMaterial(),\r\n\t\t\tmap: THREE.ImageUtils.loadTexture( \"img/galaxy-bulge.png\" ),\r\n\t\t\tcolor: 0xffffff,\r\n\t\t\tuseScreenCoordinates: false,\r\n      sizeAttenuation: true,\r\n      transparent: true,\r\n      opacity: 0.3,\r\n      blending: THREE.AdditiveBlending \r\n    });\r\n\r\n\t\tthis.bulge = new THREE.Sprite( material );\r\n\t\tthis.bulge.position = new THREE.Vector3(-this.distanceFromSunToCenter, 0, 0);\r\n\t\tthis.bulge.scale.set( \r\n\t\t\t60000000000000, \r\n\t\t\t60000000000000, \r\n\t\t\t1.0 \r\n\t\t);\r\n\r\n\t\t/*\r\n\t\tvar geometry = new THREE.Geometry();\r\n    // var texture = THREE.ImageUtils.loadTexture( 'img/starcluster.png', null );\r\n    var texture = self.app.textures.starCluster();\r\n\r\n    var uniforms = {\r\n\t\t\tamplitude: { type: \"f\", value: 1.0 },\r\n\t\t\tcolor: { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\ttexture: { type: \"t\", value: texture }\r\n\t\t}\r\n\r\n\t\tvar attributes = {\r\n\t\t\tsize: {\ttype: 'f', value: [] },\r\n\t\t\tca: {\ttype: 'c', value: [] },\r\n\t\t\talpha: { type: 'f', value: [] },\r\n\t\t\trotation: { type: 'f', value: [] }\r\n\t\t}\r\n\r\n\t\tvar values_size = attributes.size.value;\r\n\t\tvar values_color = attributes.ca.value;\r\n\t\tvar values_alpha = attributes.alpha.value;\r\n\t\tvar values_rotation = attributes.rotation.value;\r\n\r\n\t\tvar galaxyCenterCount = 100;\r\n\t\tfor ( var i = 0; i < galaxyCenterCount; i++ ) {\r\n\r\n\t\t\tvalues_size[i] = (20000 * Math.random() + 1000) * window.settings.LY / window.settings.distancePixelRatio;\t\t\r\n\t\t\tvalues_color[i] = new THREE.Color('#00ff00');\r\n\r\n\t\t\tvar item = _.shuffle( self.points )[0];\r\n\t\t\tvar item = item.split(',');\r\n\r\n\t\t\tvar x = ( parseFloat(item[0]) - 500) * window.settings.LY * 250 / window.settings.distancePixelRatio;\r\n\t\t\tvar y = ( parseFloat(item[1]) - 500) * window.settings.LY * 250 / window.settings.distancePixelRatio;\r\n\t\t\tvar z = ( Math.random() * 50 - 50 ) * (window.settings.LY * 250);\r\n\r\n\t\t\tvar particle = new Particle({ vector: new THREE.Vector3( x, y, z ) });\r\n\t\t\tgeometry.vertices.push( particle.position );\r\n\t\t}\r\n\r\n    var material = new THREE.ShaderMaterial({\r\n      uniforms: uniforms,\r\n\t\t\tattributes: attributes,\r\n      vertexShader: self.app.shaders['galaxydust'].vertex,\r\n      fragmentShader: self.app.shaders['galaxydust'].fragment,\r\n      blending: THREE.AdditiveBlending,\r\n     \tdepthTest: false,\r\n\t\t\tdepthWrite: false,\t\r\n      transparent: true\r\n    });\r\n\r\n    this.bulge = new THREE.ParticleSystem(\r\n\t    geometry,\r\n\t    material\r\n\t  );\r\n\r\n\t  this.bulge.rotation.set( this.getPlaneRotation(), 0, 0 );\r\n\t  this.bulge.position.set( -this.distanceFromSunToCenter, 0, 0 );\r\n\t  */\r\n\r\n\t  self.app.scene.add(this.bulge);\r\n\t\t\r\n\t\t// self.app.scene.add( this.bulge );\r\n\t\tself.bulgeRendered = true;\r\n\r\n\t},\r\n\r\n\trenderGalaxyCenter: function() {\r\n\r\n\t},\r\n\r\n\trenderGalaxyImage: function(){\r\n\r\n\t},\r\n\r\n\trenderStarClusters: function(){\r\n\t\tvar self = this;\r\n\r\n\t\tif (self.starClustersRendered) \r\n\t\t\treturn;\r\n\r\n\t\tvar geometry = new THREE.Geometry();\r\n    // var texture = THREE.ImageUtils.loadTexture( 'img/starcluster.png', null );\r\n    var texture = self.app.textures.starCluster();\r\n\r\n    var uniforms = {\r\n\t\t\tamplitude: { type: \"f\", value: 1.0 },\r\n\t\t\tcolor: { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\ttexture: { type: \"t\", value: texture }\r\n\t\t}\r\n\r\n\t\tself.clusterAttributes = {\r\n\t\t\tsize: {\ttype: 'f', value: [] },\r\n\t\t\tca: {\ttype: 'c', value: [] },\r\n\t\t\talpha: { type: 'f', value: [] },\r\n\t\t\trotation: { type: 'f', value: [] }\r\n\t\t}\r\n\r\n\t\tvar values_size = self.clusterAttributes.size.value;\r\n\t\tvar values_color = self.clusterAttributes.ca.value;\r\n\t\tvar values_alpha = self.clusterAttributes.alpha.value;\r\n\t\tvar values_rotation = self.clusterAttributes.rotation.value;\r\n\r\n\t\tvar colors = ['#FFFF00', '#c7bba1', '#b0a285', '#87775d', '#918263', '#E0FFFF', '#EEB4B4'];\r\n\r\n    for ( var i = 0; i < self.starClustersCount; i++ ) {\r\n\r\n\t\t\tvalues_size[i] = (1000 * Math.random() + 750) * window.settings.LY / window.settings.distancePixelRatio;\t\t\r\n\r\n\t\t\tvar color = Math.round(window.utils.rand(0, 6));\r\n\t\t\tvalues_color[i] = new THREE.Color(colors[color]);\r\n\t\t\t//values_alpha[i] = Math.random() + 0.25;\r\n\t\t\tvalues_alpha[i] = 0.75;\r\n\r\n\t\t\tvalues_rotation[i] = Math.random() * 100;\r\n\r\n\t\t\tvar item = _.shuffle( self.points )[0];\r\n\t\t\tvar item = item.split(',');\r\n\r\n\t\t\tvar x = ( parseFloat(item[0]) - 500) * window.settings.LY * 250 / window.settings.distancePixelRatio;\r\n\t\t\tvar y = ( parseFloat(item[1]) - 500) * window.settings.LY * 250 / window.settings.distancePixelRatio;\r\n\t\t\tvar z = ( Math.random() * 50 - 50 ) * (window.settings.LY * 250);\r\n\r\n\t\t\t\t\tx = x + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 12000 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\t\t\t\t\ty = y + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 12000 * window.settings.LY / window.settings.distancePixelRatio);\r\n\r\n\t\t\tvar z = 0 + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 8000 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\r\n\t\t\t// create more density clusters around the center\r\n\t\t\tvar rd = window.utils.rand(0, 10);\r\n\r\n\t\t\tif (rd >= 9.5) {\r\n\r\n\t\t\t\t//x = Math.round(window.utils.rand(-25000, 25000)) * window.settings.LY / window.settings.distancePixelRatio;\r\n\t\t\t\t//y = Math.round(window.utils.rand(-50000, 50000)) * window.settings.LY / window.settings.distancePixelRatio;\r\n\t\t\t\t//z = Math.round(window.utils.rand(-7500, 7500)) * window.settings.LY / window.settings.distancePixelRatio;\r\n\r\n\t\t\t\tif (rd > 9.6) {\r\n\t\t\t\t\t//values_size[i] = (2500 * Math.random() + 750) * window.settings.LY / window.settings.distancePixelRatio;\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (rd > 9.9) {\r\n\t\t\t\t\t//values_size[i] = (7500 * Math.random() + 750) * window.settings.LY / window.settings.distancePixelRatio;\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif( Math.random() > 0.95 )\r\n\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.8;\t\r\n\r\n\t\t\tif( Math.random() > 0.5 )\r\n\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.15;\t\r\n\r\n\t\t\tif (i == 0) {\r\n\t\t\t\tx = y = z = 0;\r\n\t\t\t\tx = this.distanceFromSunToCenter;\r\n\t\t\t\tvalues_size[i] = 7500000 * window.settings.LY / window.settings.distancePixelRatio;\t\t\r\n\t\t\t} \r\n\r\n\t\t\tvar particle = new Particle({ vector: new THREE.Vector3( x, y, z ) });\r\n\t\t\tgeometry.vertices.push( particle.position );\r\n\t\t}\r\n\r\n    var material = new THREE.ShaderMaterial({\r\n      uniforms: uniforms,\r\n\t\t\tattributes: self.clusterAttributes,\r\n      vertexShader: self.app.shaders['galaxydust'].vertex,\r\n      fragmentShader: self.app.shaders['galaxydust'].fragment,\r\n      blending: THREE.AdditiveBlending,\r\n      //blending: \"CustomBlending\",\r\n\t\t\t//blendSrc: \"OneMinusDstAlphaFactor\",\r\n\t\t\t//blendDst: \"SrcColorFactor\",\r\n\t\t\t//blendEquation: THREE.AddEquation,\r\n     \tdepthTest: false,\r\n\t\t\tdepthWrite: false,\t\r\n      transparent: true\r\n    });\r\n\r\n    this.starClusters = new THREE.ParticleSystem(\r\n\t    geometry,\r\n\t    material\r\n\t  );\r\n\r\n\t  this.starClusters.rotation.set( this.getPlaneRotation(), 0, 0 );\r\n\t  this.starClusters.position.set( -this.distanceFromSunToCenter, 0, 0 );\r\n\r\n\t  self.app.scene.add(this.starClusters);\r\n\t  self.starClustersRendered = true;\r\n\r\n\t},\r\n\r\n\trenderNebulas: function() {\r\n\t\tvar self = this;\r\n\r\n\t\tif (self.nebulasRendered) \r\n\t\t\treturn;\r\n\r\n\t\tvar geometry = new THREE.Geometry();\r\n    var texture = THREE.ImageUtils.loadTexture( 'img/nebula-dust-02.png', null );\r\n\r\n    var uniforms = {\r\n\t\t\tamplitude: { type: \"f\", value: 1.0 },\r\n\t\t\tcolor: { type: \"c\", value: new THREE.Color( 0xffffff ) },\r\n\t\t\ttexture: { type: \"t\", value: texture }\r\n\t\t}\r\n\r\n\t\tvar attributes = {\r\n\t\t\tsize: {\ttype: 'f', value: [] },\r\n\t\t\tca: {\ttype: 'c', value: [] },\r\n\t\t\talpha: { type: 'f', value: [] },\r\n\t\t\trotation: { type: 'f', value: [] }\r\n\t\t}\r\n\r\n\t\t// see: https://github.com/mrdoob/three.js/issues/1891#issuecomment-5923058\r\n\t\tvar values_size = attributes.size.value;\r\n\t\tvar values_color = attributes.ca.value;\r\n\t\tvar values_alpha = attributes.alpha.value;\r\n\t\tvar values_rotation = attributes.rotation.value;\r\n\r\n    for ( var i = 0; i < self.nebulasCount; i++ ) {\r\n\t\t\tvalues_size[i] = Math.random() * 10000 * window.settings.LY / window.settings.distancePixelRatio;\t\t\r\n\r\n\t\t\tvar colors = ['#463521', '#DEB887', '#EEDFCC', '#E9967A'];\r\n\t\t\tvar color = new THREE.Color( colors[Math.round(window.utils.rand(0,4))] );\r\n\t\t\tvalues_color[i] = color;\r\n\r\n\t\t\t/*\r\n\t\t\t// color variation orange/yellow (0.02 - 0.1)\r\n\t\t\tvar random = (Math.random() > 0.90);\r\n\t\t\tvalues_color[i] = color.setHSL( \r\n\t\t\t\trandom ? window.utils.rand(0.5, 0.53) : window.utils.rand(0.02, 0.1), \r\n\t\t\t\twindow.utils.rand(0.55, 0.7), \r\n\t\t\t\t0.5 \r\n\t\t\t);\r\n\t\t\t*/\r\n\r\n\t\t\tvalues_alpha[i] = Math.random() + 0.4;\r\n\t\t\t// values_rotation[i] = Math.random() * 100;\r\n\r\n\t\t\tvar item = _.shuffle( self.points )[0];\r\n\t\t\tvar item = item.split(',');\r\n\r\n\t\t\tvar x = ( parseFloat(item[0]) - 500) * window.settings.LY * 200 / window.settings.distancePixelRatio;\r\n\t\t\tvar y = ( parseFloat(item[1]) - 500) * window.settings.LY * 200 / window.settings.distancePixelRatio;\r\n\t\t\tvar z = ( Math.random() * 50 - 50 ) * (window.settings.LY * 250);\r\n\r\n\t\t\t\t\tx = x + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 6000 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\t\t\t\t\ty = y + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 6000 * window.settings.LY / window.settings.distancePixelRatio);\r\n\r\n\t\t\tvar z = 0 + ( Math.round( Math.random() ) * 2 - 1 ) * (Math.random() * 2500 * window.settings.LY / window.settings.distancePixelRatio);\t\r\n\r\n\t\t\tif( Math.random() > 0.98 )\r\n\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.8;\t\r\n\r\n\t\t\tif( Math.random() > 0.5 )\r\n\t\t\t\tz *= Math.pow(1 + Math.random(), 3 + Math.random() * 3) * 0.15;\t\r\n\r\n\r\n\t\t\tvar particle = new Particle({ vector: new THREE.Vector3( x, y, z ) });\r\n\t\t\tgeometry.vertices.push( particle.position );\r\n\t\t}\r\n\r\n\t\t// for blending see http://alteredqualia.com/three/examples/webgl_materials_blending_custom.html#\r\n    var material = new THREE.ShaderMaterial({\r\n      uniforms: uniforms,\r\n\t\t\tattributes: attributes,\r\n      vertexShader: self.app.shaders['galaxydust'].vertex,\r\n      fragmentShader: self.app.shaders['galaxydust'].fragment,\r\n      //blending: THREE.SubtractiveBlending,\r\n      depthTest: false,\r\n      transparent: true,\r\n      blending: \"CustomBlending\",\r\n\t\t\tblendSrc: \"OneMinusDstAlphaFactor\",\r\n\t\t\tblendDst: \"SrcColorFactor\",\r\n\t\t\tblendEquation: THREE.AddEquation\r\n    });\r\n\r\n    this.nebulas = new THREE.ParticleSystem(\r\n\t    geometry,\r\n\t    material\r\n\t  );\r\n\r\n\t  this.nebulas.rotation.set( this.getPlaneRotation(), 0, 0 );\r\n\t  this.nebulas.position.set( -this.distanceFromSunToCenter, 0, 0 );\r\n\r\n\t  self.app.scene.add(this.nebulas);\r\n\t  self.nebulasRendered = true;\r\n\t},\r\n\r\n\tgetRandomPositionInRange: function() {\r\n\r\n\t},\r\n\r\n\tshow: function(){\r\n\r\n\t\tvar maxAmount = 7500;\r\n\t\tvar maxPercent = 60;\r\n\t\tvar currentAmount = this.app.currentDistanceLY;\r\n\t\tvar percent = currentAmount * 100 / maxAmount;\r\n\r\n\t\tif (percent > maxPercent)\r\n\t\t\tpercent = maxPercent;\r\n\r\n\t\tif (this.stars) {\r\n\t\t\tthis.stars.traverse(function(child){\r\n\t\t\t\tchild.visible = true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.nebulas) {\r\n\t\t\tthis.nebulas.traverse(function(child){\r\n\t\t\t\tchild.visible = true;\r\n\t\t\t\tchild.material.opacity = (percent / 100);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.starClusters) {\r\n\t\t\tthis.starClusters.traverse(function(child){\r\n\t\t\t\tchild.visible = true;\r\n\t\t\t\tchild.opacity = (percent / 100);\r\n\t\t\t});\r\n\t\t\tthis.starClusters.opacity = (percent / 100);\r\n\t\t\tthis.starClusters.material.opacity = (percent / 100);\r\n\t\t}\r\n\r\n\t\tif (this.plane) {\r\n\t\t\tthis.plane.visible = true;\r\n\t\t\tthis.plane.material.opacity = (percent / 100);\r\n\t\t}\r\n\r\n\t\tif (this.bulge) {\r\n\t\t\tthis.bulge.visible = true;\r\n\t\t}\r\n\t},\r\n\r\n\thide: function() {\r\n\t\t//this.app.scene.remove(this.stars);\r\n\t\t//this.app.scene.remove(this.nebulas);\r\n\r\n\t\tif (this.stars) {\r\n\t\t\tthis.stars.traverse(function(child){\r\n\t\t\t\tchild.visible = false;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.nebulas) {\r\n\t\t\tthis.nebulas.traverse(function(child){\r\n\t\t\t\tchild.visible = false;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.starClusters) {\r\n\t\t\tthis.starClusters.traverse(function(child){\r\n\t\t\t\tchild.visible = false;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.plane) {\r\n\t\t\tthis.plane.visible = false;\r\n\t\t}\r\n\r\n\t\tif (this.bulge) {\r\n\t\t\tthis.bulge.visible = false;\r\n\t\t}\r\n\t\t\r\n\t\tthis.starsRendered = false;\r\n\t\tthis.nebulasRendered = false;\r\n\t\tthis.starClustersRendered = false;\r\n\t\tthis.bulgeRendered = false;\r\n\t},\r\n\r\n\tupdate: function( start, length ) {\r\n\t\tfor ( var i = start; i < length; i++ ) {\r\n\t\t\t// this.attributes.size.value[i] = 10000;\r\n\t\t}\r\n\t\t// this.attributes.size.needsUpdate = true;\r\n\t}\r\n\r\n});\r\n","var View = require('./view');\r\nvar PopupView = require('./popup_view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'infobox',\r\n  template: require('./templates/infobox'),\r\n\r\n  events: {\r\n  \t'click .close-btn': 'close',\r\n    'click #actions .action': 'doAction',\r\n    'click #tab-list li': 'tab'\r\n  },\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n    this.object = options.object;\r\n    this.model = options.data;\r\n    this.content = require('./templates/' + options.template);\r\n\r\n  \t_.bindAll(this, \r\n      'render', \r\n      'close',\r\n      'doAction',\r\n      'tab',\r\n      'loadImages'\r\n    );\r\n\r\n    console.log(options);\r\n\r\n    if (this.model.texture)\r\n      this.model.image = this.model.texture;\r\n\r\n    // read the planet infos for this stellar system\r\n    var self = this;\r\n    var satellites = null;\r\n    _.each(this.app.planetsystems.models, function(system, index){\r\n      if (system.get('name') === self.model.name) {\r\n        satellites = system.get('satellites');\r\n      }\r\n    }); \r\n\r\n    this.model.satellites = satellites;\r\n    this.render();\r\n  },\r\n\r\n  render: function(){\r\n    var self = this;\r\n\r\n    $('#' + self.id).remove();\r\n    $('body').append(self.$el.html(self.template()));\r\n    $('#infobox-content').html(this.content(self.model));\r\n\r\n    this.loadImages($('#tab-images'));\r\n  },\r\n\r\n  close: function(e){\r\n    e.preventDefault();\r\n    $('#' + this.id).remove();\r\n  },\r\n\r\n  doAction: function(e){\r\n    var self = this;\r\n    e.preventDefault();\r\n\r\n    var action = $(e.currentTarget).attr('action');\r\n\r\n    if (action == 'show') {\r\n      self.app.addSystem(this.model.id);\r\n    }\r\n\r\n    if (action == 'moveTo') {\r\n      // animate the camera to the new location\r\n      self.app.config.distance.value = 1;\r\n      self.app.config.distance.type = 'au';\r\n      self.app.cameraHelper.bindObject = self.model;\r\n      self.app.cameraHelper.moveTo(self.app.camera.position, self.model.position, 5000, function(){\r\n        self.app.cameraHelper.bindObject = null\r\n      });\r\n\r\n      // also load the system after the camera has been moved there\r\n      self.app.addSystem(self.model.id);\r\n    }\r\n\r\n    if (action == 'bindTo') {\r\n      self.app.animationControlsView.pause();\r\n      self.app.cameraHelper.bindTo(self.object, self.model.position);\r\n    }\r\n  },\r\n\r\n  tab: function(e){\r\n    var $el = $(e.currentTarget);\r\n    var container = $el.attr('rel');\r\n\r\n    $('#tab-list li').removeClass('active');\r\n    $el.addClass('active');\r\n\r\n    $('#tabs .tab').removeClass('active');\r\n    $('#tabs #' + container).addClass('active');\r\n  },\r\n\r\n  loadImages: function( el ){\r\n    var name = this.model.name;\r\n        name = 'planetary system ' + name;\r\n\r\n    $.getJSON('http://ajax.googleapis.com/ajax/services/search/images?v=1.0&start=0&rsz=5&q='+ name +'&callback=?', function(data) {\r\n      var images = data.responseData.results;\r\n\r\n      var $ul = $('<ul/>');\r\n          $ul.prepend('<p>Image data provided by Google Search</p>')\r\n\r\n      for (i in images) {\r\n        var url = images[i].url;\r\n        var $li = $('<li/>');\r\n            $li.append('<img src=\"'+ url +'\" />');\r\n\r\n        $ul.append( $li );\r\n      }\r\n\r\n      el.html( $ul );\r\n\r\n    });\r\n  },\r\n\r\n  showLoading: function(){\r\n    $('#loading').fadeIn();\r\n  },\r\n\r\n  hideLoading: function(){\r\n    $('#loading').fadeOut();\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar InfoboxView = require('views/infobox_view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: _.uniqueId(),\r\n  tagName: 'span',\r\n  className: 'space-label',\r\n  template: null,\r\n\r\n  events: {\r\n    'click': 'labelClicked',\r\n    'mouseenter': 'labelMouseEnter',\r\n    'mouseleave': 'labelMouseLeave'\r\n  },\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n    this.object = options.object,\r\n  \tthis.data = options.data;\r\n    this.planetsystem = options.planetsystem;\r\n\r\n    this.currentOrbitColor = null;\r\n    this.currentOrbitOpacity = null;\r\n\r\n  \tthis.render();\r\n\r\n  \t_.bindAll(this, 'render', 'labelClicked', 'labelMouseEnter', 'labelMouseLeave');\r\n  },\r\n\r\n  render: function(){\r\n  \tvar self = this;\r\n\r\n  \t// render the label as html object to prevent zooming with web gl\r\n    var labelID = 'object-' + self.data.name.replace(' ', '-').toLowerCase();\r\n        labelID = labelID.replace(' ', '-');\r\n\r\n    self.$el.attr('id', labelID);\r\n    self.$el.html(self.data.name);\r\n\r\n    self.$el.addClass('labelgroup-' + self.app.systems.length);\r\n    self.$el.addClass('planetsystem-' + this.planetsystem.name.replace(' ', '').toLowerCase() );\r\n    self.$el.css({'color': '#' + window.settings.orbitColors[ self.app.systems.length ].toString(16) });\r\n\r\n    return self;\r\n  },\r\n\r\n  labelClicked: function(){\r\n    var self = this;\r\n    self.infobox = new InfoboxView({\r\n      app: self.app,\r\n      object: self.object,\r\n      data: self.data,\r\n      template: 'planet-info'\r\n    });\r\n  },\r\n\r\n  labelMouseEnter: function(e){\r\n    var self = this;\r\n    var name = $(e.currentTarget).attr('id').replace('object-', '');\r\n\r\n    _.each( self.app.orbits, function( orbit, idx ) {\r\n      if (orbit.name.toLowerCase() == name) {\r\n        self.currentOrbitColor = orbit.line.material.color;\r\n        self.currentOrbitOpacity = orbit.line.opacity;\r\n\r\n        orbit.line.material.color = new THREE.Color( 0xffffff );\r\n        orbit.line.opacity = 1.0;\r\n      }\r\n    });\r\n  },\r\n\r\n  labelMouseLeave: function(e) {\r\n    var self = this;\r\n    var name = $(e.currentTarget).attr('id').replace('object-', '');\r\n\r\n    _.each( self.app.orbits, function( orbit, idx ) {\r\n      if (orbit.name.toLowerCase() == name) {\r\n        orbit.line.material.color = self.currentOrbitColor;\r\n        orbit.line.opacity = self.currentOrbitOpacity;\r\n      }\r\n    });\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'loader',\r\n  template: require('./templates/loader'),\r\n\r\n  initialize: function( options ){\r\n  \tthis.options = options;\r\n\r\n  \t_.bindAll(this, 'render');\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar PopupView = require('./popup_view');\r\nvar SystemsContainerView = require('./systems_container_view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'mainmenu',\r\n  template: require('./templates/menu'),\r\n\r\n  events: {\r\n  \t'click .menu li': 'menuClicked'\r\n  },\r\n\r\n  initialize: function( options ){\r\n    this.app = options.app;\r\n  \tthis.type = options.type;\r\n    this.model = options.structure;\r\n\r\n    console.log(this.model);\r\n\r\n  \t_.bindAll(this, 'menuClicked');\r\n  },\r\n\r\n  render: function(){\r\n    this.$el.html(this.template(this.model));\r\n    return this;\r\n  },\r\n\r\n  menuClicked: function(event){\r\n  \tvar self = this;\r\n  \tvar id = $(event.currentTarget).attr('id');\r\n\r\n  \tswitch(id) {\r\n      case 'firmament-view': \r\n        var target = {\r\n          x: window.settings.LY * 1000000000 / window.settings.distancePixelRatio,\r\n          y: window.settings.LY * 1000000000 / window.settings.distancePixelRatio,\r\n          z: window.settings.LY * 1000000000 / window.settings.distancePixelRatio \r\n        };\r\n        self.app.config.distance.value = 1000000000;\r\n        self.app.config.distance.type = 'ly';\r\n        self.app.cameraHelper.bindObject = null;\r\n        self.app.cameraHelper.moveTo(self.app.camera.position, target, 30000);\r\n      break;\r\n      case 'local-group-view': \r\n        var target = {\r\n          x: window.settings.LY * 10000000 / window.settings.distancePixelRatio,\r\n          y: window.settings.LY * 10000000 / window.settings.distancePixelRatio,\r\n          z: window.settings.LY * 10000000 / window.settings.distancePixelRatio \r\n        };\r\n        self.app.config.distance.value = 10000000;\r\n        self.app.config.distance.type = 'ly';\r\n        self.app.cameraHelper.bindObject = null;\r\n        self.app.cameraHelper.moveTo(self.app.camera.position, target, 30000);\r\n      break;\r\n      case 'galaxy-view': \r\n        var target = {\r\n          x: window.settings.LY * 10000 / window.settings.distancePixelRatio,\r\n          y: window.settings.LY * 10000 / window.settings.distancePixelRatio,\r\n          z: window.settings.LY * 10000 / window.settings.distancePixelRatio \r\n        };\r\n        self.app.config.distance.value = 10000;\r\n        self.app.config.distance.type = 'ly';\r\n        self.app.cameraHelper.bindObject = null;\r\n        self.app.cameraHelper.moveTo(self.app.camera.position, target, 5000);\r\n      break;\r\n      case 'star-view': \r\n        var target = {\r\n          x: window.settings.LY * 100 / window.settings.distancePixelRatio,\r\n          y: window.settings.LY * 100 / window.settings.distancePixelRatio,\r\n          z: window.settings.LY * 100 / window.settings.distancePixelRatio \r\n        };\r\n        self.app.config.distance.value = 100;\r\n        self.app.config.distance.type = 'ly';\r\n        self.app.cameraHelper.bindObject = null;\r\n        self.app.cameraHelper.moveTo(self.app.camera.position, target, 5000);\r\n      break;\r\n      case 'planet-view': \r\n        var target = {\r\n          x: window.settings.AU * 1 / window.settings.distancePixelRatio,\r\n          y: window.settings.AU * 1 / window.settings.distancePixelRatio,\r\n          z: window.settings.AU * 1 / window.settings.distancePixelRatio \r\n        };\r\n        self.app.config.distance.value = 1;\r\n        self.app.config.distance.type = 'au';\r\n        self.app.cameraHelper.bindObject = null;\r\n        self.app.cameraHelper.moveTo(self.app.camera.position, target, 5000);\r\n      break;\r\n\r\n      case 'search': \r\n        new PopupView({ app:self.app, template: 'search'});\r\n      break;\r\n\r\n      case 'systems': \r\n        if (window.systemsContainerView)\r\n          window.systemsContainerView.$el.toggle();\r\n        else\r\n          window.systemsContainerView = new SystemsContainerView({ app:self.app, data: self.app.systems});\r\n      break;\r\n\r\n      case 'fullscreen': \r\n        if (THREEx.FullScreen.activated())\r\n          THREEx.FullScreen.cancel();\r\n        else\r\n          THREEx.FullScreen.request();\r\n      break;\r\n\r\n      case 'settings': \r\n        new PopupView({ app:self.app, template: 'settings'});\r\n      break;\r\n\r\n      case 'view-2d': \r\n        self.app.cameraHelper.bindObject = null;\r\n        self.app.cameraHelper.moveTo(\r\n          self.app.camera.position,\r\n          {\r\n            x: 0, \r\n            y: window.utils.makeDistance( self.app.config.distance.value, self.app.config.distance.type ), \r\n            z: 0\r\n          }\r\n        );\r\n      break;\r\n\r\n      case 'view-3d': \r\n        self.app.cameraHelper.bindObject = null;\r\n        self.app.cameraHelper.moveTo(\r\n          self.app.camera.position,\r\n          {\r\n            x: window.utils.makeDistance( self.app.config.distance.value, self.app.config.distance.type ),\r\n            y: window.utils.makeDistance( self.app.config.distance.value, self.app.config.distance.type ),\r\n            z: window.utils.makeDistance( self.app.config.distance.value, self.app.config.distance.type )\r\n          }\r\n        );\r\n      break;\r\n\r\n      case 'solarsystem': \r\n        if (self.app.config.settings.solarsystem === false) {\r\n          self.app.config.settings.solarsystem = true;\r\n          self.app.config.settings.habitable_zone = false;\r\n          self.app.config.settings.inclination = true;\r\n          self.app.addSolarSystem();\r\n        }\r\n      break;\r\n  \t}\r\n\r\n  }\r\n\r\n\r\n});","var View = require('./view');\r\n\r\n// var Shaders = require('lib/shaders');\r\nvar Particle = require('models/particle');\r\n\r\nvar LabelView = require('./label_view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: null,\r\n  template: null,\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n  \tthis.stars = options.stars;\r\n\r\n    /*\r\n    this.stars.push({\r\n      'id': 100000000,\r\n      'pl_hostname': 'Sun',\r\n      'ra': 0,\r\n      'dec': 0,\r\n      'dist': 0,\r\n      'type': 'G5',\r\n      'pl_num': 8,\r\n      'habitable': 0,\r\n      'mass': 1,\r\n      'radius': 1,\r\n      'constellation': ''\r\n    });\r\n    */  \r\n\r\n    this.spectralStars = {\r\n      'o': [],\r\n      'b': [],\r\n      'a': [],\r\n      'f': [],\r\n      'g': [],\r\n      'k': [],\r\n      'm': [],\r\n      'l': [],\r\n      't': [],\r\n      'y': []\r\n    };\r\n\r\n    this.particleArray = [];\r\n    this.particleCount = this.stars.length;\r\n\r\n    this.habitableStars = [];\r\n\r\n    this.sizeFlag = '';\r\n\r\n    this.attributes = {\r\n      size: { type: 'f', value: [] },\r\n      ca: { type: 'c', value: [] },\r\n      alpha: { type: 'f', value: [] }\r\n    };\r\n\r\n    this.uniforms = {\r\n      amplitude: { type: 'f', value: 1.0 },\r\n      color: { type: 'c', value: new THREE.Color( 0xffffff ) },\r\n      texture: { type: 't', value: this.app.textures.getStarMaterial() }\r\n    };\r\n\r\n    this.attributes.alpha.needsUpdate = true;\r\n\r\n    // every spectral class needs its own particle system that are saved \r\n    // to a group\r\n    // multiple textures / colors in one particlesystem is not yet possible with three.js\r\n    this.particleSystems = new THREE.Object3D();\r\n\r\n  \tthis.render();\r\n\r\n  \t_.bindAll(this, \r\n      'render', \r\n      'renderHabitableStars', \r\n      'update', \r\n      'checkConditions'\r\n    );\r\n  },\r\n\r\n  render: function(){\r\n  \tvar self = this;\r\n\r\n    // separate the stars by spectral type\r\n    var values_size = self.attributes.size.value;\r\n    var values_color = self.attributes.ca.value;\r\n    var values_alpha = self.attributes.alpha.value;\r\n\r\n    for ( var i = 0; i < self.stars.length; i++ ) {\r\n\r\n      var spectralType = self.stars[i].type.substr(0, 1).toLowerCase().toString();\r\n\r\n      if (self.spectralStars[spectralType])\r\n        self.spectralStars[spectralType].push( self.stars[i] );\r\n\r\n      values_size[i] = window.settings.LY * 100 / window.settings.distancePixelRatio;\r\n\r\n      // console.log( window.settingsspectralColors[ spectralType ] );\r\n\r\n      if (window.settings.spectralColors[ spectralType ] != undefined) {\r\n        values_color[i] = new THREE.Color( window.settings.spectralColors[ spectralType ] );\r\n      } else\r\n        values_color[i] = new THREE.Color( 0xffffff );\r\n\r\n      values_alpha[ i ] = 1.0;\r\n    }\r\n\r\n    self.attributes.alpha.needsUpdate = true;\r\n\r\n    self.particles = new THREE.Geometry();\r\n    self.particleTexture  = null;\r\n\r\n    self.particleMaterial = new THREE.ShaderMaterial({\r\n      uniforms: self.uniforms,\r\n      attributes: self.attributes,\r\n      vertexShader: self.app.shaders['stars'].vertex,\r\n      fragmentShader: self.app.shaders['stars'].fragment,\r\n      blending: THREE.AdditiveBlending,\r\n      depthTest: false,\r\n      transparent: true\r\n    });\r\n\r\n    _.each( self.stars, function( star, idx ) {\r\n\r\n      var $span = $('<span>' + star.pl_hostname + '</span>');\r\n          $span.addClass('star-label');\r\n          $span.addClass('star-label-' + idx);\r\n\r\n      /*\r\n      $this.material = new THREE.ParticleBasicMaterial({\r\n        map: _Textures.getStarMaterial(),\r\n        color: window.settingsspectralColors[ star.type.substr(0, 1).toLowerCase() ],\r\n        transparent: true,\r\n        blending: THREE.AdditiveBlending,\r\n        depthTest: false,\r\n        size: window.settings.stars.size\r\n      });\r\n      */\r\n\r\n      // if distance is unknown we assume a distance of 500 parsec\r\n      if( !star.dist || star.dist == 0 )\r\n        star.dist = 500;\r\n\r\n      if (star.pl_hostname == 'Sun')\r\n        star.dist = 0;\r\n\r\n      // change distance to light years\r\n      var distance = star.dist * window.settings.PC * window.settings.LY / window.settings.distancePixelRatio;\r\n      var distanceLY = star.dist * window.settings.PC;\r\n\r\n      // make every star the same distance from the center to make them visible\r\n      var normalizedDistance = window.settings.AU / window.settings.distancePixelRatio;\r\n\r\n      // for each particle set the space position depending on its distance, right acsession and declination\r\n      // taken from http://www.stjarnhimlen.se/comp/tutorial.html\r\n      // var x = normalizedDistance * Math.cos( star.ra ) * Math.cos( star.dec );\r\n      // var y = normalizedDistance * Math.sin( star.ra ) * Math.cos( star.dec );\r\n      // var z = normalizedDistance * Math.sin( star.dec );\r\n\r\n      star.ra = star.ra * Math.PI / 180.0;\r\n      star.dec = star.dec * Math.PI / 180.0;\r\n\r\n      // star distance in parsec \r\n      // right acsession in h \r\n      // declination in h \r\n      var x = distance * Math.cos( (star.ra*15) ) * Math.cos( star.dec );\r\n      var y = distance * Math.sin( (star.ra*15) ) * Math.cos( star.dec );\r\n      var z = distance * Math.sin( star.dec );\r\n\r\n      // check star conditions\r\n      if ( self.checkConditions(star) ) {\r\n\r\n        var particle = new Particle({ vector: new THREE.Vector3(x, y, z) });\r\n\r\n        particle.properties = {\r\n          id: star.id,\r\n          name: star.pl_hostname,\r\n          type: star.type,\r\n          distance: star.dist,\r\n          distanceLY: Math.round(star.dist * window.settings.PC),\r\n          mass: star.mass,\r\n          radius: star.radius,\r\n          planets: star.pl_num,\r\n          habitable: star.habitable,\r\n          constellation: star.constellation,\r\n          position: {\r\n            x:x, \r\n            y:y, \r\n            z:z \r\n          }\r\n        }\r\n\r\n        // add it to the geometry\r\n        self.particles.vertices.push( particle.position );\r\n        self.particleArray.push( particle );\r\n        self.app.stars.push( particle );\r\n\r\n        if ( parseInt(star.habitable) == 1)\r\n          self.habitableStars.push(particle.properties);\r\n\r\n      } else {\r\n        console.log( 'star not in range' );\r\n      }\r\n\r\n    });\r\n\r\n    var particleSystem = new THREE.ParticleSystem(\r\n      self.particles,\r\n      self.particleMaterial\r\n    );\r\n\r\n    particleSystem.dynamic = true;\r\n\r\n    // rotate the whole particle system by 39 degrees\r\n    // see http://www.astronews.com/forum/archive/index.php/t-3533.html\r\n    // particleSystem.rotation.x = -39 * (Math.PI/180);\r\n      \r\n\r\n    self.app.particleSystems = particleSystem;\r\n    self.app.scene.add( particleSystem );\r\n\r\n    self.renderHabitableStars();\r\n\r\n    console.log(self.habitableStars);\r\n\r\n  },\r\n\r\n  renderHabitableStars: function(){\r\n    var self = this;\r\n    \r\n    var particles = new THREE.Geometry();\r\n    var material = new THREE.ParticleBasicMaterial({\r\n      map: self.app.textures.getHabitableStarMaterial(),\r\n      color: '#00ff00',\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending,\r\n      depthTest: false,\r\n      size: window.settings.LY * 2 / window.settings.distancePixelRatio\r\n    });\r\n\r\n    _.each( self.habitableStars, function(star, index){\r\n      \r\n      var particle = new Particle({ \r\n        vector: new THREE.Vector3(\r\n          star.position.x, \r\n          star.position.y, \r\n          star.position.z\r\n        ) \r\n      });\r\n\r\n      var vector = new THREE.Vector3(\r\n        star.position.x, \r\n        star.position.y, \r\n        star.position.z\r\n      );\r\n\r\n      var pos = window.utils.project3DTo2D( vector, self.app );\r\n\r\n      var $label = $('<span/>');\r\n          $label.attr('id', 'habitable-label-' + star.id);\r\n          $label.attr('class', 'space-label habitable-star-label');\r\n          $label.html('<span class=\"text\">' + star.name + '</span>');\r\n\r\n          $label.css({'left': pos.x, 'top': pos.y});\r\n\r\n      $('#labels').append($label);\r\n\r\n      particles.vertices.push( particle.position );\r\n\r\n    });\r\n\r\n    //var particleSystem = new THREE.ParticleSystem(\r\n      //particles, material\r\n    //);\r\n\r\n    //self.app.scene.add(particleSystem);\r\n  },\r\n\r\n  update: function() {\r\n    var self = this;\r\n\r\n    if (self.habitableStars.length) {\r\n      for (var i = 0; i < self.habitableStars.length; i++) {\r\n\r\n        var vector = new THREE.Vector3(\r\n          self.habitableStars[i].position.x,\r\n          self.habitableStars[i].position.y,\r\n          self.habitableStars[i].position.z\r\n        );\r\n        var pos = window.utils.project3DTo2D( vector, self.app );\r\n        $('#habitable-label-' + self.habitableStars[i].id).css({'left': pos.x, 'top': pos.y});\r\n      }\r\n    }\r\n\r\n    for (var i = 0; i < self.attributes.size.value.length; i++) {\r\n      if ( self.particleArray[i].position ) {\r\n        \r\n        // this.setDistanceSize( this.particleArray[i] );\r\n        var distance = window.utils.getDistance( self.app.camera.position, this.particleArray[i].position );\r\n        \r\n        // see http://stackoverflow.com/questions/13350875/three-js-width-of-view/13351534#13351534\r\n        var vFOV = self.app.camera.fov * Math.PI / 180;\r\n        var height = 2 * Math.tan( vFOV / 2 ) / (distance / window.settings.PC / window.settings.LY * window.settings.distancePixelRatio);\r\n\r\n        var aspect = $(window).width() / $(window).height();\r\n        var width = height * aspect; \r\n\r\n        var newWidth = 0;\r\n        if( window.settings.stars.appearance == 'relative sizes' ) \r\n          newWidth = (window.settings.stars.minSize / width * window.settings.LY / 100000 * this.particleArray[i].properties.radius );\r\n        else  \r\n          newWidth = (window.settings.stars.minSize / width * window.settings.LY / 100000 );\r\n        \r\n\r\n        if( width && height ) {\r\n          self.attributes.size.value[i] = newWidth;\r\n        }\r\n        \r\n      }\r\n    }\r\n    \r\n    // self.attributes.size.needsUpdate = true;\r\n  },\r\n\r\n  checkConditions: function( star ) {\r\n\r\n    var distanceLY = star.dist * window.settingsPC;\r\n    //console.log( distanceLY, star.pl_num );\r\n    if ( star.pl_num >= window.settings.stars.minPlanets )\r\n      return true;\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar Textures = require('lib/textures');\r\nvar Geometries = require('lib/geometries');\r\n\r\nvar LabelView = require('./label_view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: null,\r\n  template: null,\r\n\r\n  initialize: function( options ){\r\n  \t// console.log( options );\r\n\r\n  \tthis.app = options.app;\r\n  \tthis.data = options.data;\r\n  \tthis.planetsystem = options.planetsystem;\r\n  \tthis.parentGroup = options.group;\r\n\r\n  \tif (options.visible === undefined)\r\n  \t\tthis.visible = 1;\r\n\r\n  \tthis.animationFunctions = [];\r\n  \tthis.texture = options.data.texture || false;\r\n\r\n  \t// orbit options\r\n\t\tthis.eccentricity = options.data.eccentricity || 0.0;\r\n\t\tthis.semiMajorAxis = options.data.semiMajorAxis || 1;\r\n\t\t//this.semiMinorAxis = this.semiMajorAxis * Math.sqrt( 1 - Math.pow(this.eccentricity, 2) );\r\n\t\tthis.inclination = options.data.inclination || 0;\r\n\r\n\t\tthis.rotationPeriod = options.data.rotationPeriod || null;\r\n\t\tthis.rotationClockwise = options.data.rotationClockwise;\r\n\t\tthis.longitudeAscendingNode = options.data.longitudeAscendingNode || 0;\r\n\r\n\t\t// assumed one erath year if not given\r\n\t\tthis.siderealOrbitPeriod = options.data.siderealOrbitPeriod || 365;\r\n\r\n  \tthis.radius = options.data.radius || window.settings.radiusEarth;\r\n  \t// console.log(this.radius);\r\n  \tif( this.data.type == 'planet' && this.radius < 1000 ) {\r\n\t\t\tthis.radius *= window.settings.radiusEarth;\r\n\t\t}\r\n\r\n\t\tif (this.data.orbit_color !== undefined) \r\n\t\t\tthis.data.orbitColor = this.data.orbit_color;\r\n\r\n\t\tif (this.data.confirmed == undefined)\r\n\t\t\tthis.data.confirmed = 1;\r\n\r\n  \t// used for longitude of the ascending node\r\n\t\tthis.referencePlane = new THREE.Object3D();\r\n\r\n\t\t// base plane holds the orbit ellipse and inclination\r\n\t\tthis.basePlane = new THREE.Object3D();\r\n\r\n\t\t// pivot holds the planet sphere shape\r\n\t  this.pivot = new THREE.Object3D();\r\n\r\n\t  // planet plane is used for additional objects like moons\r\n\t  // moons will be added as child objects to this group\r\n\t\tthis.objectPlane = new THREE.Object3D();\r\n\r\n  \tthis.referencePlane.add( this.basePlane );\r\n\t\tthis.basePlane.add(this.pivot);\r\n\t\tthis.pivot.add(this.objectPlane);\r\n\t\tthis.parentGroup.add( this.referencePlane );\r\n\r\n\t\tthis.color = new THREE.Color( window.settings.planets.defaultColor );\r\n\r\n\t\tif (options.data.color)\r\n\t\t\tthis.color.setRGB( options.data.color[0], options.data.color[1], options.data.color[2] );\r\n\r\n  \tthis.render();\r\n\t\tthis.renderOrbit();\r\n\t\tthis.prepareAnimations();\r\n\r\n\t\tif (!this.visible) {\r\n\t\t\tthis.hideChildren();\r\n\t\t}\r\n\r\n\t\tthis.labelView = null;\r\n\t\t\r\n\t\t_.bindAll(this, 'render');\r\n\r\n  \treturn this;\r\n  },\r\n\r\n  render: function() {\r\n  \tvar self = this;\r\n\r\n  \tvar geometry = new THREE.SphereGeometry( this.radius / window.settings.radiusPixelRatio, 32, 32 );\r\n\t\tvar material = new THREE.MeshLambertMaterial({ \r\n\t\t\tcolor: self.color.getHex()\r\n\t\t});\r\n\r\n\t\tvar planetTransparency = 1.0;\r\n\t\tif (!self.data.confirmed) {\r\n\t\t\tplanetTransparency = 0.25;\r\n\t\t}\r\n\t  if( self.texture ){\r\n\t  \tmaterial = new THREE.MeshLambertMaterial({\r\n\t\t    map: THREE.ImageUtils.loadTexture('img/materials/'+ self.texture + ''),\r\n\t\t    wireframe: false,\r\n\t\t    transparent: true,\r\n\t\t    opacity: planetTransparency\r\n\t\t  });\r\n\t  };\r\n\r\n\t  this.object = new THREE.Mesh(geometry, material);\r\n\t\tthis.object.name = self.data.name;\r\n\t\tthis.object.properties = {\r\n\t\t\tname: self.data.name,\r\n\t\t\trealName: self.realName,\r\n\t\t\tradius: self.radius.toFixed(2),\r\n\t\t\tdistance: (self.data.distance * window.settings.PC).toFixed(4),\r\n\t\t\tsiderealOrbitPeriod: self.siderealOrbitPeriod,\r\n\t\t\tsemiMajorAxis: self.semiMajorAxis,\r\n\t\t\teccentricity: self.eccentricity,\r\n\t\t\tinclination: self.inclination,\r\n\t\t\trotationPeriod: self.rotationPeriod,\r\n\t\t\timage: self.texture,\r\n\t\t\ttemparature: self.data.temp,\r\n\t\t\tmasse: self.data.masse,\r\n\t\t\thabitable: self.data.habitable,\r\n\t\t\tesi: self.data.esi,\r\n\t\t\thabitableMoon: self.data.habitableMoon,\r\n\t\t\tmethod: self.data.method,\r\n\t\t\tyear: self.data.year,\r\n\t\t\ttype: self.data.class,\r\n\t\t\ttempClass: self.data.tempClass,\r\n\t\t\tconfirmed: self.data.confirmed,\r\n\t\t\ttexture: self.texture\r\n\t\t};\r\n\r\n\t\tthis.object.spaceRadius = self.radius / window.settings.radiusPixelRatio;\r\n\t\tthis.objectPlane.add(this.object);\r\n\t\tthis.planetsystem.meshes.push(this.object);\r\n\t\tthis.app.meshes.push(this.object);\r\n\r\n\t\tif ( self.data.type == 'planet' || self.data.type == 'moon' || self.data.type == 'dwarf-planet' || self.data.type == 'star' || self.data.type == 'comet' ) {\r\n\t\t\tthis.labelView = new LabelView({ \r\n\t\t\t\tapp: self.app, \r\n\t\t\t\tobject: self,\r\n\t\t\t\tdata: self.object.properties, \r\n\t\t\t\tplanetsystem: self.planetsystem \r\n\t\t\t});\r\n\t\t\t$('#labels').append(this.labelView.render().el);\r\n\t\t}\r\n  },\r\n\r\n  showChildren: function(){\r\n\t\tthis.basePlane.traverse(function(object){ \r\n\t\t\tobject.visible = true; \r\n\t\t});\r\n\r\n\t\t// this.labelView.show();\r\n  },\r\n\r\n  hideChildren: function(){\r\n\t\tthis.basePlane.traverse(function(object){ \r\n\t\t\tobject.visible = false; \r\n\t\t});\r\n\t\t// this.labelView.hide();\r\n  },\r\n\r\n  renderOrbit: function() {\r\n  \tvar self = this;\r\n\t  var circle = new THREE.Shape();\r\n\t  //circle.moveTo(this.position[0], 0);\r\n\r\n\t  if( this.eccentricity >= -1 ) {\r\n\r\n\t  \t// aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise\r\n\t\t\tvar ellipseCurve = new THREE.EllipseCurve(\r\n\t\t\t\t(self.eccentricity * 100 * self.semiMajorAxis / 100) / window.settings.distancePixelRatio,\r\n\t\t\t\t0,\r\n\t   \t\tself.semiMajorAxis / window.settings.distancePixelRatio, \r\n\r\n\t   \t\t// taken from http://en.wikipedia.org/wiki/Semi-minor_axis\r\n\t\t\t\t( self.semiMajorAxis * Math.sqrt(1 - Math.pow(self.eccentricity, 2) ) ) / window.settings.distancePixelRatio, \r\n\t    \t0, \r\n\t    \t2.0 * Math.PI,\r\n\t    \tfalse\r\n\t    );\r\n\r\n\t\t\tvar ellipseCurvePath = new THREE.CurvePath();\r\n\t\t\t\t\tellipseCurvePath.add(ellipseCurve);\r\n\r\n\t\t\tvar ellipseGeometry = ellipseCurvePath.createPointsGeometry(200);\r\n\t\t\t\t\tellipseGeometry.computeTangents();\r\n\r\n\t\t\t// render solid line\t\t\r\n\t\t\t/*\r\n\t\t\tvar orbitMaterial = new THREE.LineBasicMaterial({\r\n\t\t\t  color: window.settings.orbitColors[ App.systems.length ],\r\n\t\t\t  blending: THREE.AdditiveBlending,\r\n\t\t\t  depthTest: true,\r\n\t\t\t  depthWrite: false,\r\n\t\t\t  opacity: window.settings.orbitTransparency,\r\n\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t  transparent: true\r\n\t\t\t});\r\n\t\t\t*/\r\n\r\n\t\t\tvar orbitTransparency = window.settings.orbitTransparency;\r\n\t\t\tif (!self.data.confirmed) {\r\n\t\t\t\torbitTransparency = 0.25;\r\n\t\t\t}\r\n\r\n\t\t\tvar orbitColor = window.settings.orbitColors[ this.app.systems.length ];\r\n\t\t\t\r\n\t\t\tif (self.data.type == 'comet' || self.data.type == 'dwarf-planet') {\r\n\t\t\t\torbitColor = 0x909090;\r\n\t\t\t\torbitTransparency = 0.25;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.data.orbitColor) {\r\n\t\t\t\torbitColor = this.data.orbitColor;\r\n\t\t\t}\r\n\r\n\t\t\t// render dashed line\r\n\t\t\tvar orbitMaterial = new THREE.LineDashedMaterial({\r\n\t\t\t  color: orbitColor,\r\n\t\t\t  blending: THREE.AdditiveBlending,\r\n\t\t\t  depthTest: true,\r\n\t\t\t  depthWrite: false,\r\n\t\t\t  opacity: orbitTransparency,\r\n\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t  transparent: true,\r\n\t\t\t  dashSize: window.settings.AU/10, \r\n\t\t\t  gapSize: window.settings.AU/10 \r\n\t\t\t});\r\n\r\n\t\t\tvar line = new THREE.Line(ellipseGeometry, orbitMaterial);\r\n\t\t\t\r\n\t\t\tif (!self.data.confirmed || self.data.type === 'comet' || self.data.type == 'dwarf-planet') {\r\n\t\t\t\tellipseGeometry.computeLineDistances();\r\n\t\t\t\tline = new THREE.Line(ellipseGeometry, orbitMaterial, THREE.LinePieces);\r\n\t\t\t}\r\n\r\n\t\t\tline.orbitColor = window.settings.orbitColors[ this.app.systems.length ];\r\n\t\t\t// line.orbitColorHover = window.settings.Colors[ App.systems.length ].orbitHover;\r\n\r\n\t\t\tthis.referencePlane.rotation.y = this.longitudeAscendingNode * Math.PI/2;\r\n\t\t\tline.rotation.set(Math.PI/2, 0, 0);\r\n\r\n\t\t\tif( this.type != 'camera' ) {\r\n\t\t  \tself.basePlane.add(line);\r\n\t\t  \tself.planetsystem.orbits.push({ \r\n\t\t  \t\tline: line ,\r\n\t\t  \t\tname: self.data.name.replace(' ', '-').toLowerCase(), \r\n\t\t  \t\ttype: self.data.type\r\n\t\t  \t});\r\n\r\n\t\t  \tself.app.orbits.push({ \r\n\t\t  \t\tline: line ,\r\n\t\t  \t\tname: self.data.name.replace(' ', '-').toLowerCase(), \r\n\t\t  \t\ttype: self.data.type\r\n\t\t  \t});\r\n\t  \t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// x, y, radius, start, end, anti-clockwise\r\n\t\t\tcircle.absarc(0, 0, self.semiMajorAxis / window.settings.distancePixelRatio, 0, Math.PI*2, false);\r\n\r\n\t\t\tvar points = circle.createPointsGeometry(128);\r\n\t\t  v_circle = new THREE.Line(\r\n\t\t  \tpoints, \r\n\t\t\t\tnew THREE.LineBasicMaterial({ \r\n\t\t\t\t\t//color: self.orbitColor,\r\n\t\t\t\t\tcolor: window.settings.orbitColors[ self.app.systems.length ],\r\n\t\t\t\t\topacity: window.settings.orbitTransparency,\r\n\t\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t\t\ttransparent: true\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\t  v_circle.rotation.set(Math.PI/2, 0, 0);\r\n\r\n\t\t  self.basePlane.add(v_circle);\r\n\t\t  self.planetsystem.orbits.push({ \r\n\t\t  \tline: v_circle,\r\n\t\t  \tname: self.data.name, \r\n\t\t  \ttype: self.data.type\r\n\t\t  });\r\n\r\n\t\t  self.app.orbits.push({ \r\n\t  \t\tline: v_circle,\r\n\t  \t\tname: self.data.name, \r\n\t  \t\ttype: self.data.type\r\n\t  \t});\r\n\r\n\t\t}\r\n\r\n\t\tthis.basePlane.inclination = 1;\r\n\t\tthis.basePlane.rendertype = 'basePlane';\r\n\t\tthis.basePlane.rendername = this.name;\r\n\r\n\t\t// set the inclination\r\n\t\tif ( this.inclination > 0 && self.app.config.settings.inclination ) {\r\n\t\t\tthis.basePlane.inclination = this.inclination;\r\n\t\t\tthis.basePlane.rotation.set(this.inclination * Math.PI / 180.0, 0, 0);\r\n\t\t}\r\n\r\n  },\r\n\r\n  prepareAnimations: function(){\r\n  \tvar self = this;\r\n\r\n    // rotation of the space object\r\n    // not all objects have self rotation, e.g. mercury and moon don't have\r\n    // venus has a negative rotation\r\n\r\n    self.animationFunctions.push(function() {\r\n\r\n    \t// we have rotationPeriod in earth days\r\n    \tif ( self.rotationPeriod ) {\r\n\r\n    \t\tif ( self.rotationClockwise === false )\r\n\t\t\t\t\tself.object.rotation.y -= self.app.currentSpeed / (24 * 60 * 60);    \t\r\n\t\t\t\telse\r\n\t\t\t\t\tself.object.rotation.y += self.app.currentSpeed / (24 * 60 * 60);    \t\r\n    \t}\r\n    });\r\n\r\n    // planet orbit\r\n    if (self.pivot) {\r\n\t\t\tself.animationFunctions.push(function() {\r\n\t    \t\r\n\t\t\t\tif ( self.eccentricity > -1) {\r\n\r\n\t\t\t    var aRadius = self.semiMajorAxis / window.settings.distancePixelRatio;\r\n\t\t\t    var bRadius = aRadius * Math.sqrt(1.0 - Math.pow(self.eccentricity, 2.0));\r\n\r\n\t\t\t    // get the current angle\r\n\t\t\t    // the orbit period is always calculated in days, so here\r\n\t\t\t    // we need to change it to seconds\r\n\t\t\t    var angle = self.app.simTimeSecs / (self.siderealOrbitPeriod * 24 * 60 * 60 * 10) * Math.PI*2 * -1;\r\n\r\n\t\t\t    var x = aRadius * Math.cos(angle) + (self.eccentricity * 100 * self.semiMajorAxis / 100) / window.settings.distancePixelRatio;\r\n\t\t\t    var y = 0;\r\n\t\t\t    var z = bRadius * Math.sin(angle);\r\n\r\n\t\t\t    self.pivot.position.set(x, y, z);\r\n\t\t\t    self.app.scene.updateMatrixWorld();\r\n\r\n\t\t\t    var vector = new THREE.Vector3();\r\n\t\t\t\t\t\t\tvector.getPositionFromMatrix( self.pivot.matrixWorld );\r\n\t\t\t\t\tself.object.properties.position = {x: vector.x, y: vector.y, z: vector.z};\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tself.pivot.rotation.y += 1 / self.siderealOrbitPeriod;\r\n\t\t\t});\r\n    };\r\n    \r\n    // Inject functions array\r\n    self.objectPlane.animate = function() {\t\r\n\t\t\tself.animationFunctions.forEach(function(dt) {\r\n\t\t\t\tdt();\r\n\t\t\t});\r\n    };\r\n\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar Textures = require('lib/textures');\r\nvar Geometries = require('lib/geometries');\r\n\r\nvar SpaceObjectView = require('views/spaceobject_view');\r\nvar StarView = require('views/star_view');\r\nvar PlanetView = require('views/planet_view');\r\nvar AsteroidBeltView = require('views/asteroidbelt_view');\r\n\r\nmodule.exports = View.extend({\r\n  id: null,\r\n  template: null,\r\n\r\n  initialize: function( options ){\r\n\r\n  \tconsole.log('initializing planet system');\r\n\r\n  \tthis.app = options.app;\r\n    this.model = options.model;\r\n\r\n    this.geometries = new Geometries();\r\n    this.textures = new Textures();\r\n\r\n    this.id = this.model.id || null;\r\n\t\tthis.name = this.model.name;\r\n\t\tthis.radius = this.model.radius || 1000;\r\n\r\n\t\tthis.orbitColor = window.settings.orbitColors[ this.app.systems.length ];\r\n\r\n\t\tthis.temp = this.model.temp || null;\r\n\t\tthis.luminosity = this.model.luminosity || null;\r\n\r\n\t\t// a solar system may consist of multiple stars\r\n\t\tthis.stars = this.model.stars || [];\r\n\t\tthis.satellites = this.model.satellites || [];\r\n\t\tthis.meshes = [];\r\n\t\tthis.orbits = [];\r\n\r\n\t\t// create the group of the star(s)\r\n\t\tthis.group = new THREE.Object3D();\r\n\r\n\t\t// set initial visibility to true\r\n\t\tthis.isVisible = true;\r\n\r\n\t\t//this.group.position.set(0, window.exoplanetsystems.systems.length * 1000, 0);\r\n\t  // this.showSystemPlane = data.showSystemPlane || true;\r\n\t\t// this.renderHabitableZone();\r\n\t\tthis.renderObjects();\r\n\r\n\t\tthis.renderTemparatureZones();\r\n\r\n\t\t// place the group at the position where the camera currently looks at\r\n\t\t// var vector = new THREE.Vector3(0, 0, -1);\r\n    // vector.applyEuler(this.app.camera.rotation, this.app.camera.eulerOrder);\r\n\r\n    // this.group.position.set(vector);\r\n\t\tthis.app.scene.add(this.group);\r\n\r\n\t\t_.bindAll(this, 'render', 'renderTemparatureZones');\r\n  },\r\n\r\n  renderObjects: function() {\r\n\t\tvar self = this;\r\n\r\n\t\t// render the star\r\n\t\tself.model.stars[0].parentGroup = self.group;\r\n\t\tself.model.stars[0].meshes = self.meshes;\r\n\t\tself.model.stars[0].satellites = self.satellites;\r\n\t\tself.model.stars[0].orbits = self.orbits;\r\n\t\tself.model.stars[0].systemName = self.name;\r\n\r\n\t\tself.model.stars[0].orbitColor = self.orbitColor;\r\n\r\n\t\tvar starView = new StarView({ \r\n\t\t\tapp: self.app,\r\n\t\t\tdata: self.model.stars[0] \r\n\t\t});\r\n\r\n\r\n\t\t// can be planets, moon or other objects (asteroids, spaceships)\r\n\t\tfor ( satellite in self.satellites ) {\r\n\t\t\tvar object = self.satellites[satellite];\r\n\t\t\tif ( object.type === 'planet' || object.type === 'dwarf-planet' || object.type === 'moon' || object.type === 'comet' ) {\r\n\t\t\t\tvar planetView = new PlanetView({ \r\n\t\t\t\t\tapp: self.app, \r\n\t\t\t\t\tplanetsystem: self,\r\n\t\t\t\t\tdata: object, \r\n\t\t\t\t\tgroup: self.group \r\n\t\t\t\t});\r\n\r\n\t\t\t\tfor ( moon in object.satellites ) {\r\n\t\t\t\t\tvar obj = object.satellites[moon];\r\n\t\t\t\t\tnew PlanetView({ \r\n\t\t\t\t\t\tapp: self.app, \r\n\t\t\t\t\t\tplanetsystem: self,\r\n\t\t\t\t\t\tdata: obj, \r\n\t\t\t\t\t\tgroup: planetView.objectPlane,\r\n\t\t\t\t\t\tvisible: 0\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\tif (object.type === 'asteroid-belt') {\r\n\t\t\t\tnew AsteroidBeltView({ \r\n\t\t\t\t\tapp: self.app, \r\n\t\t\t\t\tplanetsystem: self,\r\n\t\t\t\t\tdata: object, \r\n\t\t\t\t\tgroup: self.group \r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t}\r\n\r\n\t},\r\n\r\n\trenderTemparatureZones: function(){\r\n\r\n\t\t/**\r\n\t\t * 24 Sex:\r\n\t\t * minHZ: 2.941, maxHZ: 7.147\r\n\t\t *  \r\n\t   * 8.00 = 100%\r\n\t\t * 7.15 = 89.37% \r\n\t\t * 2.94 = 36.75% \r\n\t\t * --------------------------\r\n\t\t *\r\n\t\t * Solar System:\r\n\t\t * minHZ: 0.95, maxHZ: 1.67 \r\n\t\t *  \r\n\t \t * 2.00 = 100%\r\n\t \t * 1.67 = 83.5% \r\n\t\t * 0.95 = 47.5%\r\n\t\t * --------------------------\r\n\t\t *\r\n\t\t * 2m 0103(ab):\r\n\t\t * minHZ: 0.134, maxHZ: 0.348\r\n\t\t *  \r\n\t \t * 1.00 = 100%\r\n\t \t * 0.348 = 34.80% \r\n\t\t * 0.134 = 13.40%\r\n\t\t * \r\n\t\t */\r\n\r\n\r\n\t\tvar minHZ = this.stars[0].minhz;\r\n\t\tvar maxHZ = this.stars[0].maxhz;\r\n\r\n\t\tvar HZPercentDimension = window.utils.getDimensionToTen( minHZ, maxHZ );\r\n\r\n\t\tconsole.log( HZPercentDimension );\r\n\r\n\t\tif( minHZ && maxHZ ) {\r\n\r\n\t\t\tconsole.log('render hab zone: ', minHZ, maxHZ);\r\n\r\n\t\t\tvar normalizedMinHZ = minHZ * window.settings.AU / window.settings.distancePixelRatio;\r\n\t\t\tvar normalizedMaxHZ = maxHZ * window.settings.AU / window.settings.distancePixelRatio;\r\n\r\n\t\t\tvar centerHZ = normalizedMaxHZ - normalizedMinHZ;\r\n\r\n\t\t\t// create 2d zone temparature texture\r\n\t\t\tvar canvas = document.createElement('canvas');\r\n\t        canvas.width = 256;\r\n\t        canvas.height = 256;\r\n\r\n\t    var context = canvas.getContext('2d');\r\n\t        centerX = canvas.width / 2;\r\n\t        centerY = canvas.height / 2;\r\n\t\t\t\r\n\t    var objGradient = context.createRadialGradient( centerX, centerY, 1, centerX, centerY, canvas.width/2 );\r\n\r\n\r\n\t    var colorStopMin = HZPercentDimension.minPercent - 0.1;\r\n\t    var colorStopMax = HZPercentDimension.maxPercent + 0.1;\r\n\r\n\t    if( colorStopMin <= 0.0) colorStopMin = 0.1;\r\n\t    if( colorStopMax >= 1.0) colorStopMax = 0.95;\r\n\r\n\t    objGradient.addColorStop( 0, 'rgba(255, 25, 25, 1.0)');\r\n\t    objGradient.addColorStop( colorStopMin, 'rgba(255, 125, 25, 0.5)');\r\n\t    objGradient.addColorStop( HZPercentDimension.minPercent + 0.1, 'rgba(50, 255, 50, 0.5)');\r\n\t    objGradient.addColorStop( HZPercentDimension.maxPercent - 0.1, 'rgba(50, 255, 50, 0.5)');\r\n\t    objGradient.addColorStop( colorStopMax, 'rgba(0, 0, 200, 0.5)');\r\n\t    objGradient.addColorStop( 1.0, 'rgba(0, 0, 200, 0.01)');\r\n\r\n\t    context.fillStyle = objGradient;\r\n\r\n\t    context.beginPath();\r\n\t    context.arc( centerX, centerY, canvas.width/2, 0, 2*Math.PI, true );\r\n\t    context.fill();\r\n\t    \r\n\t\t\tvar texture = new THREE.Texture(canvas); \r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\t      \r\n\t  \tvar material = new THREE.MeshBasicMaterial({\r\n\t  \t\tmap: texture,\r\n\t  \t\ttransparent: true,\r\n\t  \t\topacity: 0.4,\r\n\t  \t\tside: THREE.DoubleSide \r\n\t  \t});\r\n\r\n\t  \t//var dimension = (centerHZ*2) + ( (centerHZ*2) * 75 / 100 )*2;\r\n\t  \tvar dimension = (window.settings.AU / window.settings.distancePixelRatio )*2 * HZPercentDimension.size\r\n\r\n\t    var mesh = new THREE.Mesh(\r\n\t    \tnew THREE.PlaneGeometry( dimension, dimension ),\r\n\t   \t\tmaterial\r\n\t   \t);\r\n\r\n\t\t\t//mesh.position.set( 0, - window.exoplanetsystems.systems.length * 10, 0 );\r\n\t\t\tmesh.position.set( 0, this.app.systems.length * 5, 0 );\r\n\t\t\tmesh.rotation.set( -90 * Math.PI / 180, 0, 0 );\r\n\r\n\t\t\t// render the specific limits as well\t\t\r\n\t\t\tvar innerHZLine = this.geometries.renderDashedCircle( normalizedMinHZ, new THREE.Color('rgba(255, 50, 255, 0.75)') );\r\n\t\t\tvar outerHZLine = this.geometries.renderDashedCircle( normalizedMaxHZ, new THREE.Color('rgba(255, 50, 255, 0.75)') );\r\n\r\n\t\t\t//this.group.add( innerHZLine );\r\n\t\t\t//this.group.add( outerHZLine );\r\n\r\n\t\t\tmesh.visible = this.app.config.settings.habitable_zone;\r\n\r\n\t\t\tthis.group.add( mesh );\r\n\t\t\tthis.habitableZone = mesh;\r\n\t\t\tthis.app.habitableZones.push( mesh );\r\n\r\n\t\t}\r\n\t},\r\n\r\n\r\n\trenderHabitableZone: function() {\r\n\t\tvar self = this;\r\n\r\n\t\t//console.log( 'Star data', self );\r\n\r\n\t\t// radius in sun radii\r\n\t\tvar r = self.stars[0].radius * window.settings.radiusSun;\r\n\t\tvar t = self.stars[0].temp;\r\n\t\tvar L = self.stars[0].lum;\r\n\r\n\t\t// we need to check if the star has an effective temparature given\r\n\t\tif( !t ) {\r\n\t\t\t//var sLR = Math.pow(2, L);\r\n\t\t\tvar sLR = (1 + L) + 1;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\tvar sLR = Math.pow( (r / window.settings.radiusSun), 2) * Math.pow( (t / window.settings.tempSun), 4);\r\n\t\t}\r\n\r\n\t\t//console.log('Lum relation', sLR );\r\n\r\n\t\t// render inner boundary nad outer boundary of habitable zone\r\n\t\t// the habitable zone should be rendered in green\r\n\r\n\t\t// the hz is beeing calculated in relation to the hz of our sun.\r\n\t\t// star boundary = Sun boundary × Sqrt[ (star luminosity)/(Sun luminosity) ].\r\n\t\t// so we nee to calculate the star's luminosity first.\r\n\t\t// L = 4 PI r^2 BoltzmanConst T^4\r\n\r\n\t\tvar starLuminosity = 4*Math.PI * Math.pow(self.radius, 2) * window.settings.Boltzmann * Math.pow(self.temp, 4);\r\n\t \tvar starLuminosityRelation = Math.sqrt(starLuminosity / window.settings.sunLiminosity);\r\n\r\n\t\t// var minHZ = sLR * window.settings.minHZ;\r\n\t\t// var maxHZ = sLR * window.settings.maxHZ;\r\n\r\n\t\tvar minHZ = self.stars[0].minhz;\r\n\t\tvar maxHZ = self.stars[0].maxhz;\r\n\r\n\t\t// console.log('minHz', minHZ);\r\n\t\t// console.log('maxHz', maxHZ);\r\n\r\n\t\tif( minHZ && maxHZ ) {\r\n\r\n\t\t\tvar normalizedMinHZ = minHZ * window.settings.AU / window.settings.distancePixelRatio;\r\n\t\t\tvar normalizedMaxHZ = maxHZ * window.settings.AU / window.settings.distancePixelRatio;\r\n\r\n\t\t\tvar arcShape = new THREE.Shape();\r\n\t\t\tarcShape.moveTo( normalizedMaxHZ, 0 );\r\n\t\t\tarcShape.absarc( 0, 0, normalizedMaxHZ, 0, Math.PI*2, false );\r\n\r\n\t\t\tvar holePath = new THREE.Path();\r\n\t\t\tholePath.moveTo( normalizedMinHZ, 0 );\r\n\t\t\tholePath.absarc( 0, 0, normalizedMinHZ, 0, Math.PI*2, true );\r\n\t\t\tarcShape.holes.push( holePath );\r\n\r\n\t\t\tvar geometry = new THREE.ShapeGeometry( arcShape );\r\n\r\n\t\t\t/*\r\n\t\t\t\tvar geometry = new THREE.Line( \r\n\t\t\t\t\tarcShape.createPointsGeometry(100),\r\n\t\t\t\t\tnew THREE.LineBasicMaterial({ color: 0x00ff00, opacity: 0.5 }) \r\n\t\t\t\t);\r\n\t\t\t*/\r\n\r\n\t\t\t// self.group.add( geometry );\r\n\r\n\t\t\tvar mesh = new THREE.Mesh(\r\n\t\t\t\tgeometry, \r\n\t\t\t\tnew THREE.MeshBasicMaterial({ \r\n\t\t\t\t\tcolor: window.settings.habitableZoneColor,\r\n\t\t\t\t\ttransparent: true,\r\n\t\t\t\t\topacity: 0.75,\r\n\t\t\t\t\tside: THREE.DoubleSide\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\t\tmesh.position.set( 0, this.app.systems.length, 0);\r\n\t\t\tmesh.rotation.set( -90 * Math.PI / 180, 0, 0 );\r\n\t\t\t//mesh.scale.set(1, 1, 1);\r\n\r\n\t\t\tmesh.visible = window.settings.filters.habitableZones;\r\n\r\n\t\t\tself.group.add( mesh );\r\n\t\t\t// self.habitableZone = mesh;\r\n\t\t\tself.app.habitableZones.push( mesh );\r\n\r\n\t\t\t/*\r\n\t\t\tvar smooth = geometry.clone();\r\n\t    smooth.mergeVertices(); \r\n\t\t\tvar modifier = new THREE.SubdivisionModifier( 2 );\r\n\t   \tmodifier.modify( geometry );\r\n\t    //modifier.modify( smooth );\r\n\t    */\r\n\t  }\r\n\t},\r\n\r\n  render: function(){\r\n    var self = this;\r\n  \treturn self;\r\n  }\r\n\r\n});","var View = require('./view');\r\nvar SearchList = require('./search_list');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'popup',\r\n  template: require('./templates/popup'),\r\n\r\n  events: {\r\n  \t'click .close-btn': 'close',\r\n    'mouseover #popup': 'hovered',\r\n    'change input[type=checkbox]': 'checkboxClicked',\r\n    'keyup input[name=field-search]': 'search'\r\n  },\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n    this.content = require('./templates/' + options.template);\r\n\r\n    this.model = options.data || {};\r\n\r\n  \t_.bindAll(this, \r\n      'render', \r\n      'close', \r\n      'hovered', \r\n      'checkboxClicked', \r\n      'search',\r\n      'toggleVisibility'\r\n    );\r\n\r\n    this.render();\r\n  },\r\n\r\n  render: function(){\r\n    var self = this;\r\n    var data = {data: self.model};\r\n\r\n    $('#' + self.id).remove();\r\n    $('body').append(this.$el.html(this.template(data)));\r\n    $('#popup-content').html(this.content(data));\r\n\r\n    this.$el.css({\r\n      'margin-left': - $(self.$el).outerWidth() / 2,\r\n      'margin-top': - $(self.$el).outerHeight() / 2\r\n    });\r\n  },\r\n\r\n  close: function(e){\r\n    e.preventDefault();\r\n  \t\r\n    $('#' + this.id).remove();\r\n  },\r\n\r\n  hovered: function(e){\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  },\r\n\r\n  checkboxClicked: function(e){\r\n    var type = $(e.currentTarget).attr('type');\r\n    var id = $(e.currentTarget).attr('id');\r\n\r\n    switch(id) {\r\n      case 'checkbox-labels':\r\n        $('#labels').toggleClass('hidden');\r\n        $('#star-labels').toggleClass('hidden');\r\n      break;\r\n      case 'checkbox-orbits':\r\n        window.settings.showOrbits = !window.settings.showOrbits;\r\n      break;\r\n      case 'checkbox-orbit-inclination':\r\n        window.settings.showInclination = !window.settings.showInclination;\r\n      break;\r\n      case 'checkbox-distance-rings':\r\n        window.settings.showDistances = !window.settings.showDistances;\r\n      break;\r\n    }\r\n  },\r\n\r\n  toggleVisibility: function(object){\r\n\r\n  },\r\n\r\n  search: function(e){\r\n    var self = this;\r\n    var $el = $(e.currentTarget);\r\n    var key = $el.val().toLowerCase();\r\n\r\n    if ( key.length >= 3 ) {\r\n\r\n      // 1. search by planet name (ex: Kepler-90 b)\r\n      // 2. search by star name (ex: Kepler-90 b)\r\n      // 3. search planets by constellation name (ex: And or Andromeda)\r\n\r\n      var data = [];\r\n      _.each(self.app.planetsystems.models, function(planetsystem){\r\n        var n = planetsystem.get('name').toLowerCase();\r\n        if (n == key || n.indexOf(key) > -1)\r\n          data.push(planetsystem.attributes);\r\n      });\r\n\r\n      _.each(self.app.constellations.models, function(constellation){\r\n        var n = constellation.get('name').toLowerCase();\r\n        if (n == key || n.indexOf(key) > -1)\r\n          data.push(constellation.attributes);\r\n      });\r\n\r\n      var searchList = new SearchList({app: self.app, model: {data: data}});\r\n      $el.parent().find('.dynamic').html( searchList.render().el );\r\n    }\r\n  },\r\n\r\n  showLoading: function(){\r\n    $('#loading').fadeIn();\r\n  },\r\n\r\n  hideLoading: function(){\r\n    $('#loading').fadeOut();\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'search-list',\r\n\ttagName: 'ul',\r\n  template: require('./templates/search-list'),\r\n\r\n  events: {\r\n    'click li': 'itemClicked'\r\n  },\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n    this.model = options.model;\r\n\r\n  \t_.bindAll(this, 'render', 'itemClicked');\r\n  },\r\n\r\n  render: function(){\r\n  \tconsole.log(this.model);\r\n  \tthis.$el.html(this.template(this.model));\r\n  \treturn this;\r\n  },\r\n\r\n  itemClicked: function(e){\r\n    var id = $(e.currentTarget).attr('rel').replace('system-', '');\r\n    this.app.addSystem(id);\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\n// var SpaceObjectView = require('./spaceobject_view');\r\n\r\nmodule.exports = View.extend({\r\n  id: null,\r\n  template: null,\r\n\r\n  initialize: function( options ){\r\n\r\n  \tthis.app = options.app;\r\n\t\tthis.data = options.data;\r\n\t\tthis.id = options.data.id || Math.random() * 10000;\r\n\t\tthis.realName = options.data.name;\r\n\t\tthis.systemName = options.data.systemName;\r\n\t\tthis.name = options.data.name.replace(/\\s/g, '-');\r\n\t\tthis.type = options.data.type;\r\n\t\tthis.spectralClass = options.data.spec || null;\r\n\r\n\t\tthis.radius = options.data.radius || window.settings.radiusEarth;\r\n\r\n\t\t// if we have planet the values is lower than 1000 km we assume that the size is given\r\n\t\t// as earth value\r\n\t\tif( this.type == 'planet' && this.radius < 1000 ) {\r\n\t\t\tthis.radius *= window.settings.radiusEarth;\r\n\t\t}\r\n\r\n\t\tthis.rotation = options.data.rotation || 0;\r\n\t\tthis.distance = options.data.distance || null;\r\n\r\n\t\t// orbit options\r\n\t\tthis.eccentricity = options.data.eccentricity || 0;\r\n\t\tthis.semiMajorAxis = options.data.semiMajorAxis || 1;\r\n\t\t//this.semiMinorAxis = this.semiMajorAxis * Math.sqrt( 1 - Math.pow(this.eccentricity, 2) );\r\n\t\tthis.inclination = options.data.inclination || 0;\r\n\r\n\t\tthis.rotationPeriod = options.data.rotationPeriod || null;\r\n\t\tthis.rotationClockwise = options.data.rotationClockwise;\r\n\t\tthis.longitudeAscendingNode = options.data.longitudeAscendingNode || 0;\r\n\r\n\t\t// assumed one erath year if not given\r\n\t\tthis.siderealOrbitPeriod = options.data.siderealOrbitPeriod || 365;\r\n\t\t\r\n\t\t// additional values might be used later\r\n\t\tthis.periapsis = this.semiMajorAxis * (1 - this.eccentricity) / window.settings.AU;\r\n\t\tthis.apoapsis = this.semiMajorAxis * (1 + this.eccentricity) / window.settings.AU;\r\n\r\n\t\t// console.log('render object name', this.name);\r\n\r\n\t  this.animationFunctions = [];\r\n\r\n\t  \r\n\t  // object paramters\r\n\t  this.orbitColor = options.data.orbitColor || window.settings.orbitColor;\r\n\t\tthis.isSatellite = options.data.isSatellite || false;\r\n\r\n\t\tthis.parentGroup = options.data.parentGroup || this.app.scene;\r\n\t\tthis.mesh;\r\n\t\tthis.material;\r\n\r\n\t\tthis.color = new THREE.Color( window.settings.planets.defaultColor );\r\n\r\n\t\tif(options.data.color)\r\n\t\t\tthis.color.setRGB( options.data.color[0], options.data.color[1], options.data.color[2] );\r\n\r\n\t\t// check if there was a texture given and render it\r\n\t\tthis.texture = options.data.texture || false;\r\n\r\n\t\t// scene meshes array used for event dispatching\r\n\t\tthis.meshes = options.data.meshes;\r\n\r\n\t\t// child objects like moons / asteroids or similar\r\n\t\tthis.satellites = options.data.satellites;\r\n\r\n\t\t// scene orbits array\r\n\t\tthis.orbits = options.data.orbits;\r\n\r\n\r\n\t\t// ----\r\n\t\t// Define 3D objects for the scene\r\n\t\t// ----\r\n\r\n\t\t// used for longitude of the ascending node\r\n\t\tthis.referencePlane = new THREE.Object3D();\r\n\r\n\t\t// base plane holds the orbit ellipse and inclination\r\n\t\tthis.basePlane = new THREE.Object3D();\r\n\r\n\t\t// pivot holds the planet sphere shape\r\n\t  this.pivot = new THREE.Object3D();\r\n\r\n\t  // planet plane is used for additional objects like moons\r\n\t  // moons will be added as child objects to this group\r\n\t\tthis.objectPlane = new THREE.Object3D();\r\n\r\n\t\t// sattelites are all objects below a star\r\n\t\tif ( this.isSatellite ) {\r\n\r\n\t\t\tthis.referencePlane.add( this.basePlane );\r\n\t\t\tthis.basePlane.add(this.pivot);\r\n\t\t\tthis.pivot.add(this.objectPlane);\r\n\t\t\tthis.parentGroup.add( this.referencePlane );\r\n\r\n\t\t} else {\r\n\t\t\tthis.parentGroup.add( this.objectPlane );\r\n\t\t}\r\n\r\n\t\tthis.renderObject();\r\n\t\tthis.renderOrbit();\r\n\t\tthis.prepareAnimations();\r\n\r\n\t\treturn this.object;\r\n\t},\r\n\r\n\trenderObject: function(){\r\n\t\tvar self = this;\r\n\t\tvar geometry;\r\n\r\n\t\tif( this.type == 'star' ) {\r\n\r\n\t\t\t/* \r\n\t\t\t * Stars are rendered as glowing light source\r\n\t\t\t */\r\n\r\n\t\t\t// render as lens flare\r\n\t\t\tthis.textureLensFlare = THREE.ImageUtils.loadTexture( \"img/lensflare0.png\" );\r\n\r\n\t\t  var light = new THREE.PointLight( 0xffffff, 1.5, 4500 );\r\n\t\t\t\t\tlight.color.setHSL( 0.55, 0.9, 0.5 );\r\n\t\t\t\t\tlight.position.set( 0, 0, 0 );\r\n\t\t\t\t\t\r\n\t\t\t// App.bulgeLight = light;\r\n\t\t\tlight.intensity = 0.01;\r\n\t\t\tthis.app.scene.add( light );\r\n\r\n\t\t\tvar flareColor = new THREE.Color( 0xffffff );\r\n\t\t\t\t\tflareColor.setHSL( 0.55, 0.9, 0.5 + 0.7 );\r\n\r\n\t\t\tvar lensFlare = new THREE.LensFlare( this.textureLensFlare, 128, 0.0, THREE.AdditiveBlending, flareColor );\r\n\r\n\t\t\tlensFlare.add( this.textureLensFlare, 32, 0.0, THREE.AdditiveBlending );\r\n\t\t\tlensFlare.add( this.textureLensFlare, 64, 0.75, THREE.AdditiveBlending );\r\n\r\n\t\t\t// lensFlare.add( this.textureLensFlare, 60, 0.6, THREE.AdditiveBlending );\r\n\t\t\t// lensFlare.add( this.textureLensFlare, 70, 0.7, THREE.AdditiveBlending );\r\n\t\t\t// lensFlare.add( this.textureLensFlare, 120, 0.9, THREE.AdditiveBlending );\r\n\t\t\t// lensFlare.add( this.textureLensFlare, 70, 1.0, THREE.AdditiveBlending );\r\n\r\n\t\t\tlensFlare.customUpdateCallback = function(){ return false; };\r\n\t\t\tlensFlare.position = light.position;\r\n\r\n\t\t\t// App.bulge = lensFlare;\r\n\t\t\tthis.app.scene.add( lensFlare );\r\n\t\t\tthis.rotationPeriod = window.settings.defaultStarRotationPeriod;\r\n\r\n\t\t\t// render star as geometry\r\n\t\t\tgeometry = new THREE.SphereGeometry( 0.0001, 0, 0 );\r\n\t\t\tvar material = new THREE.MeshBasicMaterial({\r\n\t\t\t  map: THREE.ImageUtils.loadTexture(\"img/materials/sun.jpg\"),\r\n\t\t\t  shading: THREE.SmoothShading, \r\n\t\t\t  blending: THREE.AdditiveBlending, \r\n\t\t\t  color: 0xffffff, \r\n\t\t\t  ambient: 0xffffff, \r\n\t\t\t  shininess: 100\r\n\t\t\t});\r\n\r\n\t\t\tthis.object = new THREE.Mesh( geometry, material );\r\n\t\t\tthis.objectPlane.add( this.object );\r\n\r\n\t\t\tthis.object.name = self.name;\r\n\t\t\tthis.object.properties = {\r\n\t\t\t\ttype: 'star',\r\n\t\t\t\tradius: self.radius,\r\n\t\t\t\tmass: self.data.mass,\r\n\t\t\t\ttemp: self.data.temp,\r\n\t\t\t\tdistance:  ( self.data.dist * window.settings.PC ).toFixed(2),\r\n\t\t\t\tminhz: self.data.minhz / 1000,\r\n\t\t\t\tmaxhz: self.data.maxhz / 1000,\r\n\t\t\t\tplanets: self.data.planets,\r\n\t\t\t\ttexture: 'sun.jpg',\r\n\t\t\t\tspectralClass: self.spectralClass.toLowerCase()\r\n\t\t\t}\r\n\r\n\t\t\tthis.meshes.push( this.object );\t\t\t\r\n\t\t} \r\n\r\n\t\telse {\r\n\r\n\t\t\tif( this.type == 'camera' ) {\r\n\t\t\t\tr = 0.01;\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = new THREE.SphereGeometry( this.radius / window.settings.radiusPixelRatio, 32, 32 );\r\n\t\t\tvar material = new THREE.MeshLambertMaterial({ \r\n\t\t\t\tcolor: self.color.getHex()\r\n\t\t\t});\r\n\r\n\t\t  if( self.texture ){\r\n\t\t  \tmaterial = new THREE.MeshLambertMaterial({\r\n\t\t\t    map: THREE.ImageUtils.loadTexture('img/materials/'+ self.texture + ''),\r\n\t\t\t    wireframe: false  \r\n\t\t\t  });\r\n\t\t  };\r\n\r\n\t\t  this.object = new THREE.Mesh(geometry, material);\r\n\t\t\tthis.object.name = self.name;\r\n\t\t\tthis.object.properties = {\r\n\t\t\t\tname: self.name,\r\n\t\t\t\trealName: self.realName,\r\n\t\t\t\tradius: self.radius.toFixed(2),\r\n\t\t\t\tdistance: (self.distance * window.settings.PC).toFixed(4),\r\n\t\t\t\tsiderealOrbitPeriod: self.siderealOrbitPeriod,\r\n\t\t\t\tsemiMajorAxis: self.semiMajorAxis,\r\n\t\t\t\teccentricity: self.eccentricity,\r\n\t\t\t\tinclination: self.inclination,\r\n\t\t\t\trotationPeriod: self.rotationPeriod,\r\n\t\t\t\timage: self.texture,\r\n\t\t\t\ttemparature: self.data.temp,\r\n\t\t\t\tmasse: self.data.masse,\r\n\t\t\t\thabitable: self.data.habitable,\r\n\t\t\t\tesi: self.data.esi,\r\n\t\t\t\thabitableMoon: self.data.habitableMoon,\r\n\t\t\t\tmethod: self.data.method,\r\n\t\t\t\tyear: self.data.year,\r\n\t\t\t\ttype: self.data.class,\r\n\t\t\t\ttempClass: self.data.tempClass,\r\n\t\t\t\tconfirmed: self.data.confirmed\r\n\t\t\t};\r\n\r\n\t\t\tthis.object.spaceRadius = self.radius / window.settings.radiusPixelRatio;\r\n\t\t\tthis.objectPlane.add(this.object);\r\n\r\n\t\t\tif( this.type != 'camera' ) {\r\n\t\t\t\tthis.meshes.push( this.object );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif( self.type == 'planet' || self.type == 'dwarf-planet' || self.type == 'star' ) {\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t// render the label as html object to prevent zooming with web gl\r\n\t\t\tvar $label = $('<span class=\"space-label\" id=\"object-'+ self.name +'\">'+ self.realName +'</span>');\r\n\t\t\t$label.addClass('labelgroup-' + this.app.systems.length);\r\n\t\t\t$label.css({'color': '#' + window.settings.orbitColors[ this.app.systems.length ].toString(16) });\r\n\r\n\t\t\t$label.attr('rel', self.systemName);\r\n\r\n\t\t\tif( self.type == 'moon' )\r\n\t\t\t\t$label.addClass('moon');\r\n\r\n\t\t\tif( self.type == 'star' )\r\n\t\t\t\t$label.addClass('star');\r\n\r\n\t\t\t$('#labels').append( $label );\t\r\n\t\t\t*/\r\n\t\t}\r\n\r\n\t\tif( self.satellites ) {\r\n\t\t\t_.each(self.satellites, function( satellite, index ){\r\n\r\n\t\t\t\tsatellite.parentGroup = self.objectPlane;\r\n\t\t\t\tsatellite.meshes = self.meshes;\r\n\t\t\t\tsatellite.orbits = self.orbits;\r\n\t\t\t\tsatellite.isSatellite = true;\r\n\t\t\t\tsatellite.orbitColor = self.orbitColor;\r\n\t\t\t\tsatellite.systemName = self.systemName;\r\n\r\n\t\t\t\tnew SpaceObjectView({\r\n\t\t\t\t\tapp: self.app,\r\n\t\t\t\t\tdata: satellite\r\n\t\t\t\t});\r\n\r\n\t\t\t});\t\r\n\t\t}\r\n\t\t\r\n\t},\r\n\r\n\trenderOrbit: function() {\r\n\t  var self = this;\r\n\r\n\t  var circle = new THREE.Shape();\r\n\t  //circle.moveTo(this.position[0], 0);\r\n\r\n\t  if( this.eccentricity >= -1 ) {\r\n\r\n\t  \t// aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise\r\n\t\t\tvar ellipseCurve = new THREE.EllipseCurve(\r\n\t\t\t\t(self.eccentricity * 100 * self.semiMajorAxis / 100) / window.settings.distancePixelRatio,\r\n\t\t\t\t0,\r\n\t   \t\tself.semiMajorAxis / window.settings.distancePixelRatio, \r\n\r\n\t   \t\t// taken from http://en.wikipedia.org/wiki/Semi-minor_axis\r\n\t\t\t\t( self.semiMajorAxis * Math.sqrt(1 - Math.pow(self.eccentricity, 2) ) ) / window.settings.distancePixelRatio, \r\n\t    \t0, \r\n\t    \t2.0 * Math.PI,\r\n\t    \tfalse\r\n\t    );\r\n\r\n\t\t\tvar ellipseCurvePath = new THREE.CurvePath();\r\n\t\t\t\t\tellipseCurvePath.add(ellipseCurve);\r\n\r\n\t\t\tvar ellipseGeometry = ellipseCurvePath.createPointsGeometry(200);\r\n\t\t\t\t\tellipseGeometry.computeTangents();\r\n\r\n\t\t\t// render solid line\t\t\r\n\t\t\t/*\r\n\t\t\tvar orbitMaterial = new THREE.LineBasicMaterial({\r\n\t\t\t  color: window.settings.orbitColors[ App.systems.length ],\r\n\t\t\t  blending: THREE.AdditiveBlending,\r\n\t\t\t  depthTest: true,\r\n\t\t\t  depthWrite: false,\r\n\t\t\t  opacity: window.settings.orbitTransparency,\r\n\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t  transparent: true\r\n\t\t\t});\r\n\t\t\t*/\r\n\r\n\t\t\t// render dashed line\r\n\t\t\tvar orbitMaterial = new THREE.LineDashedMaterial({\r\n\t\t\t  color: window.settings.orbitColors[ this.app.systems.length ],\r\n\t\t\t  blending: THREE.AdditiveBlending,\r\n\t\t\t  depthTest: true,\r\n\t\t\t  depthWrite: false,\r\n\t\t\t  opacity: window.settings.orbitTransparency,\r\n\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t  transparent: true,\r\n\t\t\t  dashSize: window.settings.AU / 1000, \r\n\t\t\t  gapSize: window.settings.AU / 1000\r\n\t\t\t});\r\n\r\n\t\t\tvar line = new THREE.Line(ellipseGeometry, orbitMaterial);\r\n\t\t\tline.orbitColor = window.settings.orbitColors[ this.app.systems.length ];\r\n\t\t\t// line.orbitColorHover = window.settings.Colors[ App.systems.length ].orbitHover;\r\n\r\n\t\t\tthis.referencePlane.rotation.y = this.longitudeAscendingNode * Math.PI/2;\r\n\t\t\tline.rotation.set(Math.PI/2, 0, 0);\r\n\r\n\t\t\tif( this.type != 'camera' ) {\r\n\t\t  \tthis.basePlane.add(line);\r\n\t\t  \tthis.orbits.push({ \r\n\t\t  \t\tline: line ,\r\n\t\t  \t\tname: self.name, \r\n\t\t  \t\ttype: self.type\r\n\t\t  \t});\r\n\t  \t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// x, y, radius, start, end, anti-clockwise\r\n\t\t\tcircle.absarc(0, 0, self.semiMajorAxis / window.settings.distancePixelRatio, 0, Math.PI*2, false);\r\n\r\n\t\t\tvar points = circle.createPointsGeometry(128);\r\n\t\t  v_circle = new THREE.Line(\r\n\t\t  \tpoints, \r\n\t\t\t\tnew THREE.LineBasicMaterial({ \r\n\t\t\t\t\t//color: self.orbitColor,\r\n\t\t\t\t\tcolor: window.settings.Colors[ App.systems.length ].orbit,\r\n\t\t\t\t\topacity: window.settings.orbitTransparency,\r\n\t\t\t\t\tlinewidth: window.settings.orbitStrokeWidth,\r\n\t\t\t\t\ttransparent: true\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\t  v_circle.rotation.set(Math.PI/2, 0, 0);\r\n\t\t  this.basePlane.add(v_circle);\r\n\r\n\t\t  this.orbits.push({ \r\n\t\t  \tline: v_circle,\r\n\t\t  \tname: self.name, \r\n\t\t  \ttype: self.type\r\n\t\t  });\r\n\t\t}\r\n\r\n\t\tthis.basePlane.inclination = 1;\r\n\t\tthis.basePlane.rendertype = 'basePlane';\r\n\t\tthis.basePlane.rendername = this.name;\r\n\r\n\t\t// set the inclination\r\n\t\tif( this.inclination > 0 ) {\r\n\t\t\tthis.basePlane.inclination = this.inclination;\r\n\t\t\tthis.basePlane.rotation.set(this.inclination * Math.PI / 180.0, 0, 0);\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t// Define animation functions that will be called by the render loop inside if app.js\r\n\t// The functions will be invoked\r\n\tprepareAnimations: function() {\r\n    var self = this;\r\n\r\n    // rotation of the space object\r\n    // not all objects have self rotation, e.g. mercury and moon don't have\r\n    // venus has a negative rotation\r\n\r\n    self.animationFunctions.push(function() {\r\n\r\n    \t// we have rotationPeriod in earth days\r\n    \tif( self.rotationPeriod ) {\r\n\r\n    \t\tif( self.rotationClockwise === false )\r\n\t\t\t\t\tself.object.rotation.y -= self.app.currentSpeed / (24 * 60 * 60);    \t\r\n\t\t\t\telse\r\n\t\t\t\t\tself.object.rotation.y += self.app.currentSpeed / (24 * 60 * 60);    \t\r\n    \t}\r\n    });\r\n\r\n    // planet orbit\r\n    if (self.pivot) {\r\n\t\t\tself.animationFunctions.push(function() {\r\n\t    \t\r\n\t\t\t\tif( self.eccentricity ) {\r\n\r\n\t\t\t    var aRadius = self.semiMajorAxis / window.settings.distancePixelRatio;\r\n\t\t\t    var bRadius = aRadius * Math.sqrt(1.0 - Math.pow(self.eccentricity, 2.0));\r\n\r\n\t\t\t    // get the current angle\r\n\t\t\t    // the orbit period is always calculated in days, so here\r\n\t\t\t    // we need to change it to seconds\r\n\t\t\t    var angle = self.app.simTimeSecs / (self.siderealOrbitPeriod * 24 * 60 * 60) * Math.PI*2 * -1;\r\n\r\n\t\t\t    self.pivot.position.set(\r\n\t\t\t    \taRadius * Math.cos(angle) + (self.eccentricity * 100 * self.semiMajorAxis / 100) / window.settings.distancePixelRatio,\r\n\t\t\t    \t0,\r\n\t\t\t    \tbRadius * Math.sin(angle)\r\n\t\t\t    );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tself.pivot.rotation.y += 1 / self.siderealOrbitPeriod;\r\n\t\t\t});\r\n    };\r\n    \r\n    // Inject functions array\r\n    self.objectPlane.animate = function() {\t\r\n\t\t\tself.animationFunctions.forEach(function(dt) {\r\n\t\t\t\tdt();\r\n\t\t\t});\r\n    };\r\n\r\n\t}\r\n\r\n});","var View = require('./view');\r\n\r\nvar Textures = require('lib/textures');\r\nvar Geometries = require('lib/geometries');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: null,\r\n  template: null,\r\n  \r\n  initialize: function( options ){\r\n  \tconsole.log( options );\r\n\r\n  \tthis.app = options.app;\r\n  \tthis.data = options.data;\r\n  \tthis.objectPlane = new THREE.Object3D();\r\n  \toptions.data.parentGroup.add( this.objectPlane );\r\n\r\n  \tthis.animationFunctions = [];\r\n\r\n  \tthis.render();\r\n\t\t// this.renderOrbit();\r\n\t\tthis.prepareAnimations();\r\n\r\n\t\t_.bindAll(this, 'render', 'prepareAnimations');\r\n\r\n  \treturn this.object;\r\n  },\r\n\r\n  render: function() {\r\n  \tvar self = this;\r\n\r\n  \t\r\n\t\t// Stars are rendered as glowing light source\r\n\t\t// render as lens flare\r\n\t\tthis.textureLensFlare = THREE.ImageUtils.loadTexture( \"img/lensflare0.png\" );\r\n\r\n\t  var light = new THREE.PointLight( 0xffffff, 1.5, 4500 );\r\n\t\t\t\tlight.color.setHSL( 0.25, 0.9, 0.5 );\r\n\t\t\t\tlight.position.set( 0, 0, 0 );\r\n\t\t\t\t\r\n\t\t// App.bulgeLight = light;\r\n\t\tlight.intensity = 0.01;\r\n\t\tthis.app.scene.add( light );\r\n\r\n\t\tvar flareColor = new THREE.Color( 0xffffff );\r\n\t\t\t\t//flareColor.setHSL( 0.55, 0.9, 0.5 + 0.7 );\r\n\t\t\t\tflareColor.setHSL( 0.25, 0.4, 0.5 + 0.7 );\r\n\r\n\t\tvar lensFlare = new THREE.LensFlare( this.textureLensFlare, 128, 0.0, THREE.AdditiveBlending, flareColor );\r\n\r\n\t\tlensFlare.add( this.textureLensFlare, 32, 0.0, THREE.AdditiveBlending );\r\n\t\tlensFlare.add( this.textureLensFlare, 32, 1.0, THREE.AdditiveBlending );\r\n\r\n\t\t// lensFlare.add( this.textureLensFlare, 60, 0.6, THREE.AdditiveBlending );\r\n\t\t// lensFlare.add( this.textureLensFlare, 70, 0.7, THREE.AdditiveBlending );\r\n\t\t// lensFlare.add( this.textureLensFlare, 120, 0.9, THREE.AdditiveBlending );\r\n\t\t// lensFlare.add( this.textureLensFlare, 70, 1.0, THREE.AdditiveBlending );\r\n\r\n\t\tlensFlare.customUpdateCallback = function(){ return false; };\r\n\t\tlensFlare.position = light.position;\r\n\r\n\t\t// App.bulge = lensFlare;\r\n\t\t// this.app.scene.add( lensFlare );\r\n\r\n\t\tthis.rotationPeriod = window.settings.defaultStarRotationPeriod;\r\n\r\n\t\tvar radius = window.settings.radiusSun * self.data.radius / window.settings.radiusStarPixelRatio;\r\n\r\n\t\t// render star as geometry\r\n\t\tgeometry = new THREE.SphereGeometry( radius, 32, 32 );\r\n\t\tvar material = new THREE.MeshBasicMaterial({\r\n\t\t  map: THREE.ImageUtils.loadTexture(\"img/materials/sun.jpg\"),\r\n\t\t  shading: THREE.SmoothShading, \r\n\t\t  blending: THREE.AdditiveBlending, \r\n\t\t  color: 0xffffff, \r\n\t\t  ambient: 0xffffff, \r\n\t\t  shininess: 100\r\n\t\t});\r\n\r\n\t\tthis.object = new THREE.Mesh( geometry, material );\r\n\t\tthis.objectPlane.add( this.object );\r\n\t\tthis.app.meshes.push(this.object);\r\n\r\n\t\tthis.object.name = self.data.name;\r\n\t\tthis.object.properties = {\r\n\t\t\ttype: 'star',\r\n\t\t\tradius: self.data.radius,\r\n\t\t\tmass: self.data.mass,\r\n\t\t\ttemp: self.data.temp,\r\n\t\t\tdistance:  ( self.data.dist * window.settings.PC ).toFixed(2),\r\n\t\t\tminhz: self.data.minhz / 1000,\r\n\t\t\tmaxhz: self.data.maxhz / 1000,\r\n\t\t\tplanets: self.data.planets,\r\n\t\t\thabitable: self.data.habitable,\r\n\t\t\ttexture: 'sun.jpg',\r\n\t\t\tspectralClass: self.data.spec.toLowerCase()\r\n\t\t}\r\n\r\n\t\t//this.app.meshes.push( this.object );\r\n\t\t//this.app.scene.add( this.object );\r\n\r\n\t\t\r\n\t\tvar material = new THREE.SpriteMaterial({ \r\n\t\t\t//map: self.app.textures.getStarMaterial(),\r\n\t\t\tmap: THREE.ImageUtils.loadTexture( \"img/lensflare0.png\" ),\r\n\t\t\tcolor: 0xab9000,\r\n\t\t\tuseScreenCoordinates: false,\r\n      sizeAttenuation: true,\r\n      transparent: true,\r\n      blending: THREE.AdditiveBlending \r\n    });\r\n\r\n\t\tvar sprite = new THREE.Sprite( material );\r\n\t\tsprite.position = new THREE.Vector3(0,0,0);\r\n\t\tsprite.scale.set( \r\n\t\t\tself.data.radius * 1024 * 4, \r\n\t\t\tself.data.radius * 1024 * 4, \r\n\t\t\t1.0 \r\n\t\t);\r\n\t\t\r\n\t\tself.app.scene.add( sprite );\r\n  },\r\n\r\n  prepareAnimations: function(){\r\n  \tvar self = this;\r\n  \tself.animationFunctions.push(function() {\r\n\r\n    \tif (self.rotationPeriod) {\r\n    \t\tif ( self.rotationClockwise === false )\r\n\t\t\t\t\tself.object.rotation.y -= self.app.currentSpeed / (24 * 60 * 60);    \t\r\n\t\t\t\telse\r\n\t\t\t\t\tself.object.rotation.y += self.app.currentSpeed / (24 * 60 * 60);    \t\r\n    \t}\r\n    });\r\n\r\n    self.objectPlane.animate = function() {\t\r\n\t\t\tself.animationFunctions.forEach(function(dt) {\r\n\t\t\t\tdt();\r\n\t\t\t});\r\n    };\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar Shaders = require('lib/shaders');\r\nvar Particle = require('models/particle');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: null,\r\n  template: null,\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n  \tthis.stars = options.stars;\r\n\r\n    this.spectralStars = {\r\n      'o': [],\r\n      'b': [],\r\n      'a': [],\r\n      'f': [],\r\n      'g': [],\r\n      'k': [],\r\n      'm': [],\r\n      'l': [],\r\n      't': [],\r\n      'y': []\r\n    };\r\n\r\n\r\n    this.attributes = {\r\n      size: { \r\n        type: 'f', \r\n        value: [] \r\n      },\r\n      ca: { \r\n        type: 'c', \r\n        value: [] \r\n      }\r\n    };\r\n\r\n    this.uniforms = {\r\n      amplitude: { \r\n        type: 'f', \r\n        value: 1.0 \r\n      },\r\n      color: { \r\n        type: 'c', \r\n        value: new THREE.Color( 0xffffff ) \r\n      },\r\n      texture: { \r\n        type: 't', \r\n        value: this.app.textures.getStarMaterial() \r\n      }\r\n    };\r\n\r\n    this.interval = null;\r\n\r\n    this.particleArray = [];\r\n    this.particleCount = this.stars.length;\r\n    this.particleSystems = new THREE.Object3D();\r\n\r\n  \tthis.render();\r\n\r\n  \t_.bindAll(this, 'render', 'renderStarLabels', 'updateStarLabels', 'update');\r\n  },\r\n\r\n  render: function(){\r\n  \tvar self = this;\r\n\r\n    var values_size = self.attributes.size.value;\r\n    var values_color = self.attributes.ca.value;\r\n\r\n    for ( var i = 0; i < self.stars.length; i++ ) {\r\n      values_size[i] = window.settings.LY * 0.1 / window.settings.distancePixelRatio;\r\n      values_color[i] = new THREE.Color( 0xffffff );\r\n    }\r\n\r\n    self.particles = new THREE.Geometry();\r\n    self.particleTexture = null;\r\n\r\n    self.particleMaterial = new THREE.ShaderMaterial({\r\n      uniforms: self.uniforms,\r\n      attributes: self.attributes,\r\n      vertexShader: self.app.shaders['starnames'].vertex,\r\n      fragmentShader: self.app.shaders['starnames'].fragment,\r\n      blending: THREE.AdditiveBlending,\r\n      depthTest: false,\r\n      transparent: true\r\n    });\r\n\r\n    _.each( self.stars, function( star, idx ) {\r\n\r\n      var ra = parseFloat(star.ra);\r\n      var dec = parseFloat(star.dec);\r\n      var distance = parseFloat(star.distance) * window.settings.LY / window.settings.distancePixelRatio;\r\n      var distanceLY = parseFloat(star.distance) * window.settings.PC / window.settings.distancePixelRatio;\r\n     \r\n      // if distance is unknown we assume a distance of 500 parsec\r\n      if( !distance || distance == 0 )\r\n        distance = 500;\r\n\r\n      // change distance to light years\r\n      // var distance = star.dist * window.settings.PC * window.settings.LY / window.settings.distancePixelRatio;\r\n      // var distanceLY = star.dist * window.settings.PC;\r\n\r\n      // make every star the same distance from the center to make them visible\r\n      var normalizedDistance = window.settings.AU / window.settings.distancePixelRatio;\r\n\r\n      ra = ra * Math.PI / 180.0;\r\n      dec = dec * Math.PI / 180.0;\r\n\r\n      // star distance in parsec \r\n      // right acsession in h \r\n      // declination in h \r\n      var x = distance * Math.cos( (ra*15) ) * Math.cos( dec );\r\n      var y = distance * Math.sin( (ra*15) ) * Math.cos( dec );\r\n      var z = distance * Math.sin( dec );\r\n\r\n      var particle = new Particle({ vector: new THREE.Vector3(x, y, z) });\r\n\r\n      particle.properties = {\r\n        id: star.id,\r\n        name: star.proper_name,\r\n        spectrum: star.spectrum,\r\n        distance: star.distance,\r\n        distanceLY: Math.round(star.distance * window.settings.PC)\r\n      }\r\n      // add it to the geometry\r\n      self.particles.vertices.push( particle.position );\r\n      self.particleArray.push( particle );\r\n      // self.app.stars.push( particle );\r\n\r\n      // display the star label name at the star's position\r\n      // var pos = window.utils.project3DTo2D( particle.position, self.app );\r\n\r\n      if (star.proper_name == '') {\r\n        var $span = $('<span/>');\r\n            $span.text(star.proper_name);\r\n            $span.addClass('star-label');\r\n            $span.addClass('star-label-' + idx);\r\n            $span.attr('id', 'star-' + star.id);\r\n\r\n            $span.css('top', pos.y);\r\n            $span.css('left', pos.x);\r\n\r\n            $('#star-labels').append($span);\r\n      }\r\n    });\r\n\r\n    var particleSystem = new THREE.ParticleSystem(\r\n      self.particles,\r\n      self.particleMaterial\r\n    );\r\n\r\n    particleSystem.dynamic = true;\r\n\r\n    // self.app.particleSystems = particleSystem;\r\n    self.app.scene.add( particleSystem );\r\n  },\r\n\r\n  renderStarLabels: function(){\r\n\r\n  },\r\n\r\n  updateStarLabels: function(){\r\n    var self = this;\r\n\r\n    // divide the labeled stars into chunks to increase performance\r\n    _.each(self.particleArray, function( star, idx ) {\r\n\r\n      if (star) {\r\n        var pos = window.utils.project3DTo2D( star.position, self.app );\r\n\r\n        $('#star-' + star.properties.id).html( star.properties.name );\r\n        $('#star-' + star.properties.id).css({\r\n          'left': pos.x + window.settings.labelOffsetX + 'px',\r\n          'top': pos.y + window.settings.labelOffsetY + 'px',\r\n        });\r\n      }\r\n    }); \r\n\r\n  },\r\n\r\n  update: function() {\r\n    var self = this;\r\n\r\n    /*\r\n    for (var i = 0; i < self.attributes.size.value.length; i++) {\r\n\r\n      if( self.particleArray[i].position ) {\r\n        \r\n        // this.setDistanceSize( this.particleArray[i] );\r\n        var distance = window.utils.getDistance( self.app.camera.position, this.particleArray[i].position );\r\n        \r\n        // see http://stackoverflow.com/questions/13350875/three-js-width-of-view/13351534#13351534\r\n        var vFOV = self.app.camera.fov * Math.PI / 180;\r\n        var height = 2 * Math.tan( vFOV / 2 ) / (distance / window.settings.PC / window.settings.LY * window.settings.distancePixelRatio);\r\n\r\n        var aspect = $(window).width() / $(window).height();\r\n        var width = height * aspect; \r\n\r\n        var newWidth = 0;\r\n        if( window.settings.stars.appearance == 'relative sizes' ) \r\n          newWidth = (2 / width * window.settings.LY / 200000 * this.particleArray[i].properties.radius );\r\n        else  \r\n          newWidth = (2 / width * window.settings.LY / 200000 );\r\n        \r\n\r\n        if( width && height ) {\r\n          self.attributes.size.value[i] = newWidth;\r\n        }\r\n        \r\n      }\r\n    }\r\n\r\n    self.attributes.size.needsUpdate = true;\r\n    */\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nvar PopupView = require('./popup_view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'systems-controls',\r\n  template: require('./templates/systems'),\r\n\r\n  events: {\r\n    'click .system': 'showSystemInfo',\r\n    'click .system-setting': 'toggleSystemSetting',\r\n  },\r\n\r\n  initialize: function( options ){\r\n    this.app = options.app;\r\n    this.model = options.data;\r\n\r\n    this.data = {\r\n      systems: []\r\n    };\r\n\r\n    for (var i in this.model) {\r\n      console.log(this.model[i]);\r\n      this.data.systems.push( this.model[i].model );\r\n    }\r\n\r\n    this.render();\r\n\r\n  \t_.bindAll(this, \r\n      'afterRender', \r\n      'showSystemInfo', \r\n      'updateSystemSettings',\r\n      'toggleSystemSetting'\r\n    );\r\n  },\r\n\r\n  render: function() {\r\n    this.$el.html(this.template(this.data));\r\n    this.afterRender();\r\n    return this;\r\n  },\r\n\r\n  afterRender: function(){\r\n    $('#interface').append(this.$el);\r\n    this.$el.show();\r\n  },\r\n\r\n  showSystemInfo: function(e){\r\n    var self = this;\r\n    var el = $(e.currentTarget);\r\n\r\n    el.find('system-content').toggle();\r\n  },\r\n\r\n  updateSystemSettings: function(e){\r\n    var self = this;\r\n    var el = $(e.currentTarget);\r\n    var type = el.attr('type');\r\n    var system = el.attr('system');\r\n\r\n    console.log(el);\r\n\r\n  },\r\n\r\n  toggleSystemSetting: function(e){\r\n    var self = this;\r\n    var el = $(e.currentTarget);\r\n    var type = $(el).attr('type');\r\n    var systemName = $(el).parent().attr('system');\r\n\r\n    $(el).toggleClass('active');\r\n\r\n    _.each(self.model, function(model){\r\n      if (model.name == systemName) {\r\n        \r\n        if (type == 'planets') {\r\n          _.each( model.meshes, function( mesh, idx ) {\r\n            if (mesh.visible == true)\r\n              mesh.visible = false;\r\n            else\r\n              mesh.visible = true;\r\n          });\r\n        }\r\n\r\n        if (type == 'orbits') {\r\n          _.each( model.orbits, function( orbit, idx ) {\r\n            if (orbit.line) {\r\n              if (orbit.line.material.opacity == 0.0)\r\n                orbit.line.material.opacity = window.settings.orbitTransparency;\r\n              else\r\n                orbit.line.material.opacity = 0.0;  \r\n            }\r\n          });\r\n        }\r\n\r\n        if (type == 'labels') {\r\n          $('#labels .planetsystem-' + model.name.replace(' ', '').toLowerCase() ).toggle();\r\n        }\r\n\r\n        if (type == 'habitable') {\r\n          if (model.habitableZone.visible == false)\r\n            model.habitableZone.visible = true;\r\n          else\r\n            model.habitableZone.visible = false;\r\n        }\r\n\r\n        if (type == 'inclination') {\r\n\r\n          _.each( model.meshes, function( mesh, idx ) {\r\n            if (mesh.parent.parent.parent.rotation.x == 0)\r\n              mesh.parent.parent.parent.rotation.x = parseFloat(mesh.parent.parent.parent.inclination) * Math.PI/180;\r\n            else\r\n              mesh.parent.parent.parent.rotation.x = 0;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n});","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<h3>ExoPlanetSystems - How it works</h3>\\n\\n<p>The application shows orbital information of planets.</p>\\n\\n<p>\\n  The default view shows the solar system with their planets and orbits. In the background are the stars that have confirmed exoplanets. You can use you mouse to get more information about certain stars by hovering or clicking it. The color of the stars indicates its spectral class. Red stars are mostly small dwarf stars. Where yellow colored stars are mostly sun-like ones. <br/>\\n  Stars with habitable exoplanets have green markers in the scene. Those are currently expected to have planets in their habitable zone that might have liquid water on its surface.\\n</p>\\n\\n<p>\\n  You can use the blue icons in the top area to change the view of the scene or to search for any planetray system.\\n  You can use to display icon to show/hide rendered data of the currently displayed system(s).\\n</p>\\n\\n<p>\\n  On the top right corner you can change the speed of the animation. You also can pause the animation if you want.\\n</p>\\n\\n<p>\\n  The bottom area shows the current distance from the camera (your screen) to the center of the scene (per default the center shows the Sun). If you zoom you will see how the numbers change. Use it to get a feeling for the large distances between planets and stars.\\n</p>\\n\\n<p>\\n  Currently there are planets and moons visible. I am currently working on embedding comets and asteroids as well.\\n  (Please note that the positions are not time-related which means the real positions of the bodies are different. This visualization currently shows relative positions ans orbit information only).\\n</p>\\n\\n');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<ul class=\"menu\">\\n  <!--\\n  <li id=\"btn-help\" class=\"button\" title=\"Help\">\\n    <span class=\"fa fa-question\"></span>\\n  </li>\\n  -->\\n  \\n  <li id=\"btn-controls\" class=\"button dark\" title=\"Animation Controls\">\\n    <img src=\"img/icons/speed.svg\" alt=\"Speed Icon\"/>\\n  </li>\\n</ul>\\n\\n<div id=\"animation-controls-container\">\\n  <div id=\"speed-controls\">\\n    <span class=\"play-pause-btn\" id=\"play-pause-btn\"><i class=\"fa fa-pause\"></i></span>\\n    <span class=\"speed-btn\" id=\"speed-minus\"> &minus; </span>\\n    <span class=\"default-speed-btn\" title=\"The Speed of the animation\">1&times;</span>\\n    <span class=\"speed-btn\" id=\"speed-plus\"> &plus; </span>\\n  </div>\\n\\n  <div id=\"stars-distance-slider\"></div>\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n    \n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n    \n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<div class=\"dialog-header\">\\n\\t<span class=\"close-dialog-btn\">&times;</span>\\n</div>\\n\\n<div class=\"dialog-content\">\\n\\t<h2>');\n    \n      __out.push(__sanitize(this.headline));\n    \n      __out.push('</h2>\\n\\t<p>');\n    \n      __out.push(__sanitize(this.description));\n    \n      __out.push('</p>\\n</div>\\n\\n<div class=\"dialog-form\"></div>\\n<div class=\"dialog-footer\">\\n\\t');\n    \n      if (this.buttons.submit) {\n        __out.push('\\n\\t\\t<span class=\"form-btn submit-btn\" rel=\"start-game\">');\n        __out.push(__sanitize(this.buttons.submit));\n        __out.push('</span>\\n\\t');\n      }\n    \n      __out.push('\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<div id=\"help\">\\n  <h3 class=\"headline\">Help</h3>\\n\\n  <p>\\n    TODO: Give some information about this app\\n  </p>\\n\\n  <p>Discribe the purpose of this app</p>\\n  <p>What are exoplanets?</p>\\n  <p>Write about how to use this app (controls, Visual settings, interaction with the 3d scene)</p>\\n  <p>Tell some Browser infos</p>\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<span class=\"close-btn\"> &times; </span>\\n<div id=\"infobox-content\"></div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n    \n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      var m, _i, _len, _ref;\n    \n      __out.push('<ul class=\"menu\">\\n\\n  ');\n    \n      if (this.menu) {\n        __out.push('\\n    ');\n        _ref = this.menu;\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          m = _ref[_i];\n          __out.push('\\n      <li id=\"');\n          __out.push(__sanitize(m.id));\n          __out.push('\" class=\"button\" title=\"');\n          __out.push(__sanitize(m.title));\n          __out.push('\">\\n        <img src=\"img/icons/');\n          __out.push(__sanitize(m.id));\n          __out.push('.svg\" alt=\"Galaxy Icon\"/>\\n      </li>\\n    ');\n        }\n        __out.push('\\n  ');\n      } else {\n        __out.push('\\n\\n    <!--\\n    <li id=\"firmament-view\" class=\"button\" title=\"Firmament View ( 10 Bio Light Years) \">\\n      <span class=\"fa fa-globe\"></span>\\n    </li>\\n    <li id=\"local-group-view\" class=\"button\" title=\"Local Group ( 1 Mio Light Years) \">\\n      <span class=\"fa fa-globe\"></span>\\n    </li>\\n    -->\\n\\n    <li id=\"galaxy-view\" class=\"button\" title=\"Galaxy View (25000 Light Years) \">\\n     <img src=\"img/icons/galaxy.svg\" alt=\"Galaxy Icon\"/>\\n    </li>\\n    <li id=\"star-view\" class=\"button\" title=\"Star View (100 Light Years)\">\\n      <img src=\"img/icons/stars.svg\" alt=\"Stars Icon\"/>\\n    </li>\\n    <li id=\"planet-view\" class=\"button\" title=\"Planet System View (1 AU)\">\\n      <img src=\"img/icons/planetsystem.svg\" alt=\"Planetsystem Icon\"/>\\n    </li>  \\n\\n    <li id=\"systems\" class=\"button\" title=\"Show loaded systems\"> \\n      <img src=\"img/icons/systems.svg\" alt=\"Systems Icon\"/>\\n    </li>\\n\\n    <li id=\"search\" class=\"button\" title=\"Search by star or planet Name\"> \\n      <img src=\"img/icons/search.svg\" alt=\"Search Icon\"/>\\n    </li>\\n    <li id=\"fullscreen\" class=\"button\" title=\"Toggle Fullscreen (only if your browser supports it)\">\\n      <img src=\"img/icons/screen.svg\" alt=\"Fullscreen Icon\"/>\\n    </li>\\n    <li id=\"settings\" class=\"button\" title=\"Open the Settings\">\\n      <img src=\"img/icons/settings.svg\" alt=\"Settings Icon\"/>\\n    </li>\\n  ');\n      }\n    \n      __out.push('\\n  \\n</ul>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<div id=\"planet-view-header-left\">\\n  <img src=\"img/planets/');\n    \n      __out.push(__sanitize(this.image));\n    \n      __out.push('\" id=\"planet-image\" title=\"image based on artist impression\"/>\\n</div>\\n<div id=\"planet-view-header-right\">\\n  <h3 class=\"headline\">');\n    \n      __out.push(__sanitize(this.name));\n    \n      __out.push('</h3>\\n\\n  ');\n    \n      if (this.confirmed) {\n        __out.push('\\n    <span class=\"property green\">confirmed</span>\\n  ');\n      } else {\n        __out.push('\\n    <span class=\"property red\">unconfirmed</span>\\n  ');\n      }\n    \n      __out.push('\\n\\n  ');\n    \n      if (parseInt(this.habitable) === 1) {\n        __out.push('\\n    <span class=\"property green\">habitable</span>\\n  ');\n      } else {\n        __out.push('\\n    <span class=\"property red\">non-habitable</span>\\n  ');\n      }\n    \n      __out.push('\\n\\n  <div id=\"actions\">\\n    <span class=\"action\" action=\"bindTo\">Goto</span>\\n  </div>\\n</div>\\n\\n<div id=\"planet-view-content\">\\n\\n  <div class=\"content-block\">\\n\\n    <span class=\"label-headline\">Planetary properties</span>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Distance from earth (LY):</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.distance));\n    \n      __out.push('</span>\\n    </div>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Radius (earth):</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.radius));\n    \n      __out.push('</span>\\n    </div>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Mass (earth):</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.masse));\n    \n      __out.push('</span>\\n    </div>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Mean Temperature (K):</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.temp));\n    \n      __out.push('</span>\\n    </div>\\n    <div class=\"label-group\">\\n      <span class=\"label\">ESI:</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.esi));\n    \n      __out.push('</span>\\n    </div>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Habitable:</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.habitable));\n    \n      __out.push('</span>\\n    </div>\\n\\n    <span class=\"label-headline\">Orbital properties</span>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Semi Major Axis (AU):</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.semiMajorAxis));\n    \n      __out.push('</span>\\n    </div>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Sidereal Orbit Period (days):</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.siderealOrbitPeriod));\n    \n      __out.push('</span>\\n    </div>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Eccentricity:</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.eccentricity));\n    \n      __out.push('</span>\\n    </div>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Inclination:</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.inclination));\n    \n      __out.push('</span>\\n    </div>\\n\\n    <span class=\"label-headline\">Misc</span>\\n    <div class=\"label-group\">\\n      <span class=\"label\">Discovery Method:</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.method));\n    \n      __out.push('</span>\\n    </div>\\n     <div class=\"label-group\">\\n      <span class=\"label\">Discovery Year:</span>\\n      <span class=\"value\">');\n    \n      __out.push(__sanitize(this.year));\n    \n      __out.push('</span>\\n    </div>\\n\\n  </div>\\n\\n</div>\\n');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('\\n<p>title: Planet System not found</p>\\n<p>text: The requested planet system could not be found</p>\\n<p>type: warning </p>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<span class=\"close-btn\"> &times; </span>\\n<div id=\"popup-content\"></div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      var item, _i, _len, _ref;\n    \n      _ref = this.data;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        item = _ref[_i];\n        __out.push('\\n  <li rel=\"system-');\n        __out.push(__sanitize(item.id));\n        __out.push('\">\\n    ');\n        __out.push(__sanitize(item.name));\n        __out.push(' <span class=\"text-dark\"> | ');\n        __out.push(__sanitize(item.planets));\n        __out.push(' planets | ');\n        __out.push(__sanitize(item.distance));\n        __out.push(' parsec</span>\\n  </li>\\n');\n      }\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<div id=\"search\">\\n  <h3 class=\"headline\">Search</h3>\\n\\n  <form action=\"server/search.php\" method=\"post\">\\n    <input type=\"text\" name=\"field-search\" autocomplete=\"off\" placeholder=\"Planet Name or Star\" title=\"Search by stars like <Kepler-90> or <GJ 667> Search planet names like <Kepler-90 b> or <GJ 667 a>\" />\\n\\n    <div class=\"dynamic\"></div>\\n  </form>\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<div id=\"settings\">\\n  <h3 class=\"headline\">Settings</h3>\\n\\n  <div class=\"content-block\">\\n    <p>Visual Settings</p>\\n\\n    <span class=\"field-block\">\\n      <input type=\"checkbox\" id=\"checkbox-labels\" type=\"visibility\" checked=\"checked\"/>\\n      <label for=\"checkbox-labels\">Labels</label>\\n    </span>\\n\\n    <span class=\"field-block\">\\n      <input type=\"checkbox\" id=\"checkbox-named-stars\" type=\"visibility\" checked=\"checked\"/>\\n      <label for=\"checkbox-named-stars\">Named Stars</label>\\n    </span>\\n\\n    <span class=\"field-block\">\\n      <input type=\"checkbox\" id=\"checkbox-star-lines\" type=\"visibility\" checked=\"checked\"/>\\n      <label for=\"checkbox-star-lines\">Star Lines</label>\\n    </span>\\n\\n    <span class=\"field-block\">\\n      <input type=\"checkbox\" id=\"checkbox-dwarf-planets\" type=\"visibility\" checked=\"checked\"/>\\n      <label for=\"checkbox-dwarf-planets\">Dwarf Planets</label>\\n    </span>\\n\\n    <span class=\"field-block\">\\n      <input type=\"checkbox\" id=\"checkbox-orbits\" type=\"visibility\" checked=\"checked\"/>\\n      <label for=\"checkbox-orbits\">Orbits</label>\\n    </span>\\n\\n    <span class=\"field-block\">\\n      <input type=\"checkbox\" id=\"checkbox-orbit-inclination\" type=\"visibility\" checked=\"checked\"/>\\n      <label for=\"checkbox-orbit-inclination\">Orbit Inclination</label>\\n    </span>\\n\\n    <span class=\"field-block\">\\n      <input type=\"checkbox\" id=\"checkbox-grid\" type=\"visibility\" checked=\"checked\"/>\\n      <label for=\"checkbox-grid\">Grid</label>\\n    </span>\\n\\n    <span class=\"field-block\">\\n      <input type=\"checkbox\" id=\"checkbox-distance-rings\" type=\"visibility\" checked=\"checked\"/>\\n      <label for=\"checkbox-distance-rings\">Distance Rings</label>\\n    </span>\\n\\n  </div>\\n\\n\\n  <div class=\"content-block\">\\n    <p>Data Settings</p>\\n\\n    <span class=\"field-block\">\\n      <span>Stars with number of Planets</span>\\n      -- range --\\n    </span>\\n\\n    <span class=\"field-block\">\\n      <span>Stars Distance</span>\\n      -- range --\\n    </span>\\n\\n  </div>\\n\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      var s, _i, _len, _ref;\n    \n      __out.push('<h3 class=\"headline\">');\n    \n      __out.push(__sanitize(this.name));\n    \n      __out.push('</h3>\\n<a href=\"http://exoplanetsystems.org/system/');\n    \n      __out.push(__sanitize(this.name));\n    \n      __out.push('\" target=\"_blank\">\\n  http://exoplanetsystems.org/system/');\n    \n      __out.push(__sanitize(this.name));\n    \n      __out.push('\\n</a>\\n\\n<ul id=\"tab-list\">\\n  <li class=\"active\" rel=\"tab-info\">Stellar Info</li>\\n  <!-- <li rel=\"tab-images\">Images</li> -->\\n  <li rel=\"tab-planets\">Planets</li>\\n</ul>\\n\\n<div id=\"tabs\">\\n  <div class=\"tab active\" id=\"tab-info\">\\n    <div class=\"content-block\">\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Constellation:</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.constellation.name));\n    \n      __out.push('</span>\\n      </div>\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Spectral Type:</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.type));\n    \n      __out.push('</span>\\n      </div>\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Radius (sun radii):</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.radius));\n    \n      __out.push('</span>\\n      </div>\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Mass (sun masses):</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.mass));\n    \n      __out.push('</span>\\n      </div>\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Mean Temparature (surface):</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.temp));\n    \n      __out.push('</span>\\n      </div>\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Distance from Earth (Parsec)</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.distance));\n    \n      __out.push('</span>\\n      </div>\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Distance from Earth (Light Years)</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.distanceLY));\n    \n      __out.push('</span>\\n      </div>\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Planets</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.planets));\n    \n      __out.push('</span>\\n      </div>\\n\\n      <div class=\"label-group\">\\n        <span class=\"label\">Habitable Planets</span>\\n        <span class=\"value\">');\n    \n      __out.push(__sanitize(this.habitable));\n    \n      __out.push('</span>\\n      </div>\\n\\n    </div>\\n\\n    <div id=\"actions\">\\n      <span class=\"action\" action=\"show\">Show Planet System</span>\\n      <span class=\"action\" action=\"moveTo\">Goto Planet System</span>\\n      <!-- <span class=\"action\" action=\"calculateDistance\">How long to travel there</span> -->\\n    </div>\\n  </div>\\n\\n  <!-- <div class=\"tab\" id=\"tab-images\"></div> -->\\n\\n  <div class=\"tab\" id=\"tab-planets\">\\n    <ul id=\"system-planets\">\\n      ');\n    \n      _ref = this.satellites;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        s = _ref[_i];\n        __out.push('\\n        <li ');\n        if (s.confirmed === 0) {\n          __out.push(' class=\"unconfirmed\" ');\n        }\n        __out.push('>\\n          <img src=\"img/planets/');\n        __out.push(__sanitize(s.texture));\n        __out.push('\" id=\"planet-image\" title=\"image based on artist impression\"/>\\n          <span>');\n        __out.push(__sanitize(s.name));\n        __out.push('</span>\\n        </li>\\n      ');\n      }\n    \n      __out.push('\\n    </ul>\\n  </div>\\n\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      var system, _i, _len, _ref;\n    \n      __out.push('<div id=\"systems\">\\n  ');\n    \n      _ref = this.systems;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        system = _ref[_i];\n        __out.push('\\n    <div class=\"system\">\\n      <span class=\"system-name\">');\n        __out.push(__sanitize(system.name));\n        __out.push('</span>\\n      <div class=\"system-info\">\\n        <div class=\"system-stars\"></div>\\n        <div class=\"system-satellites\"></div>\\n        <div class=\"system-settings\" system=\"');\n        __out.push(__sanitize(system.name));\n        __out.push('\">\\n\\n          <span class=\"system-setting active\" type=\"planets\">\\n            <i class=\"fa fa-circle\"></i>\\n            <span>Planets</span>\\n          </span>\\n\\n          <span class=\"system-setting active\" type=\"orbits\">\\n            <i class=\"fa fa-circle\"></i>\\n            <span>Orbits</span>\\n          </span>\\n\\n          <span class=\"system-setting active\" type=\"labels\">\\n            <i class=\"fa fa-circle\"></i>\\n            <span>Labels</span>\\n          </span>\\n\\n          <span class=\"system-setting\" type=\"habitable\">\\n            <i class=\"fa fa-circle\"></i>\\n            <span>Habitable Zone</span>\\n          </span>\\n\\n          <span class=\"system-setting active\" type=\"inclination\">\\n            <i class=\"fa fa-circle\"></i>\\n            <span>Inclination (');\n        __out.push(__sanitize(system.satellites[0].inclination));\n        __out.push('&deg;)</span>\\n          </span>\\n\\n        </div>\\n      </div>\\n    </div>\\n  ');\n      }\n    \n      __out.push('\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('<div class=\"headline\">');\n    \n      __out.push(__sanitize(this.name));\n    \n      __out.push('</div>\\n\\n<div class=\"property\">\\n  <div class=\"label\"><span>Type</span></div>\\n  <div class=\"value\"><span>');\n    \n      __out.push(__sanitize(this.type));\n    \n      __out.push('</span></div>\\n</div>\\n\\n<div class=\"property\">\\n  <div class=\"label\"><span>Distance (Parsec)</span></div>\\n  <div class=\"value\"><span>');\n    \n      __out.push(__sanitize(this.distance));\n    \n      __out.push('</span></div>\\n</div>\\n\\n<div class=\"property\">\\n  <div class=\"label\"><span>Distance (Light Years)</span></div>\\n  <div class=\"value\"><span>');\n    \n      __out.push(__sanitize(this.distanceLY));\n    \n      __out.push('</span></div>\\n</div>\\n\\n<div class=\"property\">\\n  <div class=\"label\"><span>Mass (Sun Masses)</span></div>\\n  <div class=\"value\"><span>');\n    \n      __out.push(__sanitize(this.mass));\n    \n      __out.push('</span></div>\\n</div>\\n\\n<div class=\"property\">\\n  <div class=\"label\"><span>Radius (Sun Radii)</span></div>\\n  <div class=\"value\"><span>');\n    \n      __out.push(__sanitize(this.radius));\n    \n      __out.push('</span></div>\\n</div>\\n\\n<div class=\"property\">\\n  <div class=\"label\"><span>Planets</span></div>\\n  <div class=\"value\"><span>');\n    \n      __out.push(__sanitize(this.planets));\n    \n      __out.push('</span></div>\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","module.exports = function (__obj) {\n  if (!__obj) __obj = {};\n  var __out = [], __capture = function(callback) {\n    var out = __out, result;\n    __out = [];\n    callback.call(this);\n    result = __out.join('');\n    __out = out;\n    return __safe(result);\n  }, __sanitize = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else if (typeof value !== 'undefined' && value != null) {\n      return __escape(value);\n    } else {\n      return '';\n    }\n  }, __safe, __objSafe = __obj.safe, __escape = __obj.escape;\n  __safe = __obj.safe = function(value) {\n    if (value && value.ecoSafe) {\n      return value;\n    } else {\n      if (!(typeof value !== 'undefined' && value != null)) value = '';\n      var result = new String(value);\n      result.ecoSafe = true;\n      return result;\n    }\n  };\n  if (!__escape) {\n    __escape = __obj.escape = function(value) {\n      return ('' + value)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;');\n    };\n  }\n  (function() {\n    (function() {\n      __out.push('\\n\\n<div class=\"distance distance-1\">\\n  <p>Description Text for less than 1 Light year</p>\\n</div>\\n\\n<div class=\"distance distance-10\">\\n  <p>Description Text for less than 10 Light year</p>\\n</div>\\n\\n<div class=\"distance distance-1000\">\\n  <p>Our Milky Way. There are Billions of stars out there. The Milkyway plane is approximately 63° shifted from the sun plane.</p>\\n</div>');\n    \n    }).call(this);\n    \n  }).call(__obj);\n  __obj.safe = __objSafe, __obj.escape = __escape;\n  return __out.join('');\n}","var View = require('./view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: null,\r\n  template: require('./templates/tooltip'),\r\n\r\n  initialize: function( options ){\r\n  \tthis.pos = options.pos;\r\n  \tthis.model = options.data;\r\n\r\n  \tthis.render();\r\n\r\n\t\t_.bindAll(this, 'render');\r\n  },\r\n\r\n  render: function() {\r\n  \tvar self = this;\r\n\r\n  \t$('#tooltip').css({\r\n  \t\ttop: self.pos.y + 12,\r\n  \t\tleft: self.pos.x + 12\r\n  \t});\r\n\r\n  \t$('#tooltip').show();\r\n  \t$('#tooltip').html(self.template(self.model));\r\n  }\r\n\r\n});","var View = require('./view');\r\n\r\nmodule.exports = View.extend({\r\n\r\n\tid: 'tour',\r\n  template: require('./templates/tour'),\r\n\r\n  initialize: function( options ){\r\n  \tthis.app = options.app;\r\n    this.render();\r\n\t\t_.bindAll(this, 'render', 'update');\r\n  },\r\n\r\n  render: function(){\r\n    this.$el.html(this.template());\r\n    this.$el.find('.distance').hide();\r\n\r\n    $('body').append(this.$el);\r\n  },\r\n\r\n  update: function(){\r\n    var self = this;\r\n    var distance = self.app.currentDistanceLY;\r\n\r\n    this.$el.hide();\r\n    this.$el.find('.distance').hide();\r\n\r\n    if (distance <= 1) {\r\n      this.$el.find('.distance-1').show();\r\n      this.$el.show();\r\n    }\r\n\r\n    if (distance <= 25 && distance > 1) {\r\n      this.$el.find('.distance-10').show();\r\n      this.$el.show();\r\n    }\r\n\r\n    if (distance <= 100000 && distance > 1000) {\r\n      this.$el.find('.distance-1000').show();\r\n      this.$el.show();\r\n    }    \r\n  }\r\n\r\n});","// Base class for all views.\r\nmodule.exports = Backbone.View.extend({\r\n  initialize: function() {\r\n    this.render = _.bind(this.render, this);\r\n  },\r\n\r\n  template: function() {},\r\n  \r\n  getRenderData: function() {\r\n    if(this.model)\r\n      return this.model.toJSON();\r\n    else\r\n      return {};\r\n  },\r\n\r\n  render: function() {\r\n    this.$el.html(this.template(this.getRenderData()));\r\n    this.afterRender();\r\n    return this;\r\n  },\r\n\r\n  afterRender: function() {},\r\n\r\n  destroy: function(){\r\n    if(this.model)\r\n      this.model.off(null, null, this);\r\n\r\n    this.$el.remove();\r\n  }\r\n});\r\n"]}